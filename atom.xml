<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Jason Read]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-11-21T15:54:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Jason Tai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[软件安装方法]]></title>
    <link href="http://yoursite.com/2016/11/21/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/21/软件安装方法/</id>
    <published>2016-11-21T15:54:23.000Z</published>
    <updated>2016-11-21T15:54:23.000Z</updated>
    <content type="html"><![CDATA[<h4 id="XVim"><a href="#XVim" class="headerlink" title="XVim"></a>XVim</h4><p>在项目目录下运行make就可以了</p>
<h4 id="Alcaltra"><a href="#Alcaltra" class="headerlink" title="Alcaltra"></a>Alcaltra</h4><p><code>curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh | sh</code></p>
<h4 id="VAlign"><a href="#VAlign" class="headerlink" title="VAlign"></a>VAlign</h4><h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><p>输入三个<code>///</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="XVim"><a href="#XVim" class="headerlink" title="XVim"></a>XVim</h4><p>在项目目录下运行make就可以了</p>
<h4 id="Alcaltra"><a href="#Alcaltra" cla]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[RSpec]]></title>
    <link href="http://yoursite.com/2016/11/21/RSpec/"/>
    <id>http://yoursite.com/2016/11/21/RSpec/</id>
    <published>2016-11-21T15:54:23.000Z</published>
    <updated>2016-11-21T15:54:23.000Z</updated>
    <content type="html"><![CDATA[<p>header: RSpec<br>title: RSpec<br>data: 2016.02.18 16:02<br>tags: [Rails, RSpec]</p>
<hr>
<h3 id="RSpec__u94FE_u63A5"><a href="#RSpec__u94FE_u63A5" class="headerlink" title="RSpec 链接"></a>RSpec <a href="http://www.relishapp.com/rspec/rspec-rails/v/3-4/docs" target="_blank" rel="external">链接</a></h3><ol>
<li>model spec <a href="https://www.relishapp.com/rspec/rspec-rails/docs/model-specs" target="_blank" rel="external">链接</a></li>
<li>controler spec <a href="http://www.relishapp.com/rspec/rspec-rails/v/3-4/docs/controller-specs" target="_blank" rel="external">链接</a></li>
<li>exp <a href="https://github.com/rspec/rspec-expectations" target="_blank" rel="external">链接</a></li>
</ol>
<h3 id="Fatorygirls__u94FE_u63A5"><a href="#Fatorygirls__u94FE_u63A5" class="headerlink" title="Fatorygirls 链接"></a>Fatorygirls <a href="http://www.rubydoc.info/gems/factory_girl/file/GETTING_STARTED.md#Defining_factories" target="_blank" rel="external">链接</a></h3><h4 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec_helper.rb</span></span><br><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">	config.<span class="keyword">include</span> <span class="constant">FactoryGirl::Syntax::Methods</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="constant">FactoryGirl</span>.definition_file_paths = [<span class="constant">File</span>.expand_path(<span class="string">'../factories'</span>, __FILE_<span class="number">_</span>)]</span><br><span class="line"><span class="constant">FactoryGirl</span>.find_definitions</span><br></pre></td></tr></table></figure>
<h3 id="Faker"><a href="#Faker" class="headerlink" title="Faker"></a>Faker</h3><h3 id="DatabaseCleaner__u94FE_u63A5"><a href="#DatabaseCleaner__u94FE_u63A5" class="headerlink" title="DatabaseCleaner 链接"></a>DatabaseCleaner <a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank" rel="external">链接</a></h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec_helper.rb</span></span><br><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">    config.before(<span class="symbol">:suite</span>) <span class="keyword">do</span></span><br><span class="line">        <span class="constant">DatabaseCleaner</span>.strategy = <span class="symbol">:transaction</span></span><br><span class="line">        <span class="constant">DatabaseCleaner</span>.clean_with(<span class="symbol">:truncation</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    config.around(<span class="symbol">:each</span>) <span class="keyword">do</span> |example|</span><br><span class="line">        <span class="constant">DatabaseCleaner</span>.cleaning <span class="keyword">do</span></span><br><span class="line">          example.run</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="cancan"><a href="#cancan" class="headerlink" title="cancan"></a>cancan</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"cancan/matchers"</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">ability.should be_able_to(<span class="symbol">:destroy</span>, <span class="constant">Project</span>.new(<span class="symbol">:user</span> =&gt; user))</span><br><span class="line">ability.should_not be_able_to(<span class="symbol">:destroy</span>, <span class="constant">Project</span>.new)</span><br></pre></td></tr></table></figure>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># engine routes</span></span><br><span class="line">routes &#123; <span class="constant">Zangcun::Backend::Engine</span>.routes &#125;</span><br><span class="line">expect(response).to redirect_to(<span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">render_views			<span class="comment">#是否渲染view</span></span><br><span class="line">render_views <span class="keyword">false</span>		<span class="comment">#不渲染view</span></span><br></pre></td></tr></table></figure>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Api__u94FE_u63A5"><a href="#Api__u94FE_u63A5" class="headerlink" title="Api 链接"></a>Api <a href="https://github.com/brooklynDev/airborne" target="_blank" rel="external">链接</a></h3><ol>
<li>变量<ol>
<li>json_body: 获取json的返回结果</li>
<li>response: 返回结果</li>
<li>headers: 返回的头</li>
<li>body: http请求的内容</li>
<li>json_body: http请求的内容</li>
</ol>
</li>
<li>exception<ol>
<li>expect_json_types(“foo.address”, :string) 检查返回字段的类型</li>
<li>expect_json(“foo.address”, 内容) 检查返回字段的内容</li>
<li>expect_json_keys 检查keys</li>
<li>expect_json_sizes 检查内容的个数 或者检查是否为数组</li>
<li>expect_status 检查状态</li>
<li>expect_header 检查header内容</li>
</ol>
</li>
</ol>
<p>测试xml请求<br><code>request.env[&quot;CONTENT_TYPE&quot;] = &quot;application/xml&quot;</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: RSpec<br>title: RSpec<br>data: 2016.02.18 16:02<br>tags: [Rails, RSpec]</p>
<hr>
<h3 id="RSpec__u94FE_u63A5"><a href="#RSpec__u94]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails Engine]]></title>
    <link href="http://yoursite.com/2016/11/21/Rails%20Engine/"/>
    <id>http://yoursite.com/2016/11/21/Rails Engine/</id>
    <published>2016-11-21T15:54:23.000Z</published>
    <updated>2016-11-21T15:54:23.000Z</updated>
    <content type="html"><![CDATA[<p>header: Rails Engine<br>title: Rails Engine<br>date: 2016.02.15 15:24<br>tags: [Rails]</p>
<hr>
<h3 id="Rails_Template"><a href="#Rails_Template" class="headerlink" title="Rails Template"></a>Rails Template</h3><p>如果要按照最新的rails的来新建项目的话，可以使用这个命令<code>rails new myapp -T -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb --edge</code><br>自己写template<a href="http://guides.rubyonrails.org/rails_application_templates.html" target="_blank" rel="external">链接</a><br>可以用的命令<a href="https://github.com/erikhuda/thor/blob/master/lib/thor/actions.rb" target="_blank" rel="external">链接</a></p>
<h3 id="u907F_u514D_u6BCF_u6B21_u90FD_u8F93_u5165bundle_exec"><a href="#u907F_u514D_u6BCF_u6B21_u90FD_u8F93_u5165bundle_exec" class="headerlink" title="避免每次都输入bundle exec"></a>避免每次都输入bundle exec</h3><p><code>bundle install --binstubs=./bundler_stubs</code><br><code>bundle exec spring binstub --all</code></p>
<h3 id="Rails_Engine_u5206_u89E3_u9879_u76EE"><a href="#Rails_Engine_u5206_u89E3_u9879_u76EE" class="headerlink" title="Rails Engine分解项目"></a>Rails Engine分解项目</h3><p><strong>参考链接</strong></p>
<ol>
<li><a href="http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues/" target="_blank" rel="external">Rails Architecture and Scalability</a></li>
<li><a href="https://github.com/JuanitoFatas/Guides/blob/master/guides/edge-translation/engines-zh_CN.md" target="_blank" rel="external">Engine</a></li>
<li><a href="https://ruby-china.org/topics/28538" target="_blank" rel="external">讨论</a></li>
<li><a href="https://github.com/spree/spree" target="_blank" rel="external">Spree</a></li>
</ol>
<h3 id="u65B0_u5EFAEngine"><a href="#u65B0_u5EFAEngine" class="headerlink" title="新建Engine"></a>新建Engine</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 新建engine</span></span><br><span class="line">system(<span class="string">'rails plugin new zangcun-core --mountable -T --edge --dummy-path=spec/dummy'</span>)</span><br><span class="line"><span class="comment"># engine_root/config/spring.rb</span></span><br><span class="line"><span class="constant">Spring</span>.application_root = <span class="string">"spec/dummy"</span></span><br><span class="line"><span class="comment"># engine_root/spec/dummy/config/spring.rb</span></span><br><span class="line"><span class="constant">Spring</span>.application_root = <span class="string">""</span></span><br><span class="line"><span class="comment"># engine_root/spec/dummy/</span></span><br><span class="line">system(<span class="string">'bundle exec spring binstub --all'</span>)</span><br><span class="line"><span class="comment"># engine_root/spec/dummy/bin/spring</span></span><br><span class="line"><span class="comment"># 在第二行添加</span></span><br><span class="line"><span class="constant">ENV</span>[<span class="string">'BUNDLE_GEMFILE'</span>] ||= <span class="constant">File</span>.expand_path(<span class="string">'../../../../Gemfile'</span>, __FILE_<span class="number">_</span>)</span><br><span class="line"><span class="comment"># engine_root</span></span><br><span class="line">system(<span class="string">'bin/rails g rspec:install'</span>)</span><br><span class="line"><span class="comment"># engine_root</span></span><br><span class="line">system(<span class="string">'guard init'</span>)</span><br><span class="line"><span class="comment"># 将guard file中对rspec中的监听方法改为</span></span><br><span class="line">guard <span class="symbol">:rspec</span>, <span class="symbol">cmd:</span> <span class="string">"spec/dummy/bin/rspec"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># engine_root/spec/spec_helper.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'faker'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'factory_girl_rails'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'database_cleaner'</span></span><br><span class="line"><span class="constant">FactoryGirl</span>.definition_file_paths = [</span><br><span class="line">  <span class="constant">File</span>.expand_path(<span class="string">'../factories'</span>, __FILE_<span class="number">_</span>)</span><br><span class="line">]</span><br><span class="line"><span class="constant">FactoryGirl</span>.find_definitions</span><br><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">    <span class="comment"># rspec-expectations config goes here. You can use an alternate</span></span><br><span class="line">    <span class="comment"># assertion/expectation library such as wrong or the stdlib/minitest</span></span><br><span class="line">    <span class="comment"># assertions if you prefer.</span></span><br><span class="line">    config.before(<span class="symbol">:suite</span>) &#123; <span class="constant">FactoryGirl</span>.reload &#125;</span><br><span class="line">    config.<span class="keyword">include</span> <span class="constant">FactoryGirl::Syntax::Methods</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># engine_root/spec/rails_helper.rb</span></span><br><span class="line"><span class="constant">ENV</span>[<span class="string">"RAILS_ENV"</span>] ||= <span class="string">'test'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'spec_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="constant">File</span>.expand_path(<span class="string">"../dummy/config/environment"</span>, __FILE_<span class="number">_</span>)</span><br><span class="line"><span class="keyword">require</span> <span class="string">'rspec/rails'</span></span><br><span class="line"><span class="constant">ActiveRecord::Migrator</span>.migrations_path = [<span class="string">"<span class="subst">#&#123;<span class="constant">Rails</span>.application.root&#125;</span>/db/migrate"</span>]</span><br><span class="line"><span class="constant">ActiveRecord::Migration</span>.maintain_test_schema!</span><br><span class="line"><span class="constant">RSpec</span>.configure <span class="keyword">do</span> |config|</span><br><span class="line">  config.fixture_path = <span class="string">"../factories"</span></span><br><span class="line"></span><br><span class="line">  config.use_transactional_fixtures = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  config.infer_spec_type_from_file_location!</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><p>将核心的逻辑写入到Core中<br><code>rails plugin new zangcun-core --mountable -T --edge --dummy-path=spec/dummy</code> 加中划线会把core添加在zangcun的moudle中</p>
<h3 id="backend__u540E_u53F0"><a href="#backend__u540E_u53F0" class="headerlink" title="backend 后台"></a>backend 后台</h3><p><code>rails plugin new zangcun-backend --mountable -T --edge --dummy-path=spec/dummy</code> </p>
<h3 id="Frontend__u524D_u7AEF"><a href="#Frontend__u524D_u7AEF" class="headerlink" title="Frontend 前端"></a>Frontend 前端</h3><p><code>rails plugin new ydjc-front --mountable -T --edge --dummy-path=spec/dummy</code><br><code>$LOAD_PATH.unshift(File.dirname(__FILE__) + &#39;/../../../ydjc_core/lib&#39;)</code></p>
<h3 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h3><p><code>rails plugin new ydjc-front --mountable -T --edge --dummy-path=spec/dummy</code><br><code>$LOAD_PATH.unshift(File.dirname(__FILE__) + &#39;/../../../ydjc_core/lib&#39;)</code></p>
<h3 id="Engine_u89C4_u5219"><a href="#Engine_u89C4_u5219" class="headerlink" title="Engine规则"></a>Engine规则</h3><p>如果需要在Engine使用其他的Gem包，需要在Gemfile中添加，然后在gemspec添加add_dependency<br><strong>修改Engine的generator框架</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.generators <span class="keyword">do</span> |g|</span><br><span class="line">   g.test_framework <span class="symbol">:rspec</span></span><br><span class="line">   g.fixture_replacement <span class="symbol">:factory_girl</span>, <span class="symbol">:dir</span> =&gt; <span class="string">'spec/factories'</span></span><br><span class="line">   g.template_engine <span class="symbol">:slim</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h3><p>在宿主中运行bin/rake railties:install:migrations 会把Engine中的migration拷贝至宿主中。</p>
<h3 id="u4FEE_u6539_u6D4B_u8BD5_u89C4_u5219"><a href="#u4FEE_u6539_u6D4B_u8BD5_u89C4_u5219" class="headerlink" title="修改测试规则"></a>修改测试规则</h3><p>在每个Engine中测试各自的spec，需要修改<strong>spec_rails.rb</strong>文件</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">ActiveRecord::Migrator</span>.migrations_path = [<span class="string">"<span class="subst">#&#123;<span class="constant">Rails</span>.application.root&#125;</span>/db/migrate"</span>]</span><br><span class="line"><span class="keyword">require</span> <span class="constant">File</span>.expand_path(<span class="string">"../dummy/config/environment"</span>, __FILE_<span class="number">_</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Gem"><a href="#Gem" class="headerlink" title="Gem"></a>Gem</h3><p><del>在gemspec使用本地的gem作为depencence</del><br><del>在gemspec中使用git上面的gem作为depencence</del></p>
<p><code>$LOADPATH</code>是ruby的搜索路径。<br> 所以如果需要require其他的Gem包，就需要将其他的gem包的lib目录添加至LOADPATH中。</p>
<h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>如果需要使用Engine中的assets，需要把这些文件添加至precompile中。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在engine文件添加</span></span><br><span class="line"> initializer <span class="string">"ydjc.assets.precompile"</span>, <span class="symbol">group:</span> <span class="symbol">:all</span> <span class="keyword">do</span> |app|</span><br><span class="line">   app.config.assets.precompile += <span class="string">%w[</span><br><span class="line">     ydjc/front/front.css</span><br><span class="line">     ydjc/front/front.js</span><br><span class="line">   ]</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>引用时候需要使用全路径<code>stylesheet_link_tag &quot;yjdc/front/front&quot;</code><br>因为Rails只会搜索Engine中的app/assests/stylesheets目录。</p>
<h3 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h3><h3 id="u65B9_u4FBF_u8C03_u8BD5"><a href="#u65B9_u4FBF_u8C03_u8BD5" class="headerlink" title="方便调试"></a>方便调试</h3><p>web-console<br>better_errors<br>byebug<br>pry-rails</p>
<h3 id="u6027_u80FD_u8C03_u4F18"><a href="#u6027_u80FD_u8C03_u4F18" class="headerlink" title="性能调优"></a>性能调优</h3><p>request-log-analyzer<br>derailed_benchmarks<br>ruby-prof<br>oink <a href="https://github.com/noahd1/oink" target="_blank" rel="external">https://github.com/noahd1/oink</a><br>代码规范rubocop <a href="https://github.com/bbatsov/rubocop" target="_blank" rel="external">https://github.com/bbatsov/rubocop</a></p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><h4 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h4><p>spring在engine中无法使用，在test/dummy<br>需要在springload之前，先声明<code>ENV[&#39;BUNDLE_GEMFILE&#39;] ||= File.expand_path(&#39;../../../../Gemfile&#39;, __FILE__)</code></p>
<h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>需要在application中设置，Engine中设置没有用.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Rails Engine<br>title: Rails Engine<br>date: 2016.02.15 15:24<br>tags: [Rails]</p>
<hr>
<h3 id="Rails_Template"><a href="#Rails_T]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails Migration]]></title>
    <link href="http://yoursite.com/2016/11/21/Rails%20Migration/"/>
    <id>http://yoursite.com/2016/11/21/Rails Migration/</id>
    <published>2016-11-21T15:54:23.000Z</published>
    <updated>2016-11-21T15:54:23.000Z</updated>
    <content type="html"><![CDATA[<p>header: Rails Migration<br>title: Rails Migration<br>date: 2016.02.14 14:40<br>tags: [Rails]</p>
<hr>
<h4 id="create_table_u65B9_u6CD5"><a href="#create_table_u65B9_u6CD5" class="headerlink" title="create_table方法"></a>create_table方法</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create_table <span class="symbol">:table_name</span> <span class="keyword">do</span> |t|</span><br><span class="line">	t.string name, <span class="symbol">limit:</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>可选参数</strong>:</p>
<ol>
<li>id: 是否需要一个自增的id</li>
<li>primary_key: 声明主键字段</li>
<li>force: 在创建之前先把表删除，默认为false，也可设置为cascade，会删除关联表</li>
<li>options: 其他的选项</li>
</ol>
<h4 id="column_u65B9_u6CD5"><a href="#column_u65B9_u6CD5" class="headerlink" title="column方法"></a>column方法</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t.column name, type, options</span><br><span class="line"><span class="comment"># type有一下种类: :primary_key, :string, :text, :integer, :float, :decimal, :datetime, :time, :date, :binary, :boolean</span></span><br></pre></td></tr></table></figure>
<p><strong>可选参数</strong></p>
<ol>
<li>limit: 长度</li>
<li>default: 默认值</li>
<li>null: 是否允许为空</li>
<li>index: 建立该字段的索引</li>
<li>precision, scale: 声明float时候可用</li>
</ol>
<p><strong>Integer 参数</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_to_sql</span><span class="params">(type, limit = <span class="keyword">nil</span>, precision = <span class="keyword">nil</span>, scale = <span class="keyword">nil</span>)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span> <span class="keyword">unless</span> type.to_s == <span class="string">'integer'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> limit</span><br><span class="line">  <span class="keyword">when</span> <span class="number">1</span>; <span class="string">'tinyint'</span></span><br><span class="line">  <span class="keyword">when</span> <span class="number">2</span>; <span class="string">'smallint'</span></span><br><span class="line">  <span class="keyword">when</span> <span class="number">3</span>; <span class="string">'mediumint'</span></span><br><span class="line">  <span class="keyword">when</span> <span class="keyword">nil</span>, <span class="number">4</span>, <span class="number">11</span>; <span class="string">'int(11)'</span>  <span class="comment"># compatibility with MySQL default</span></span><br><span class="line">  <span class="keyword">when</span> <span class="number">5</span>..<span class="number">8</span>; <span class="string">'bigint'</span></span><br><span class="line">  <span class="keyword">else</span> raise(<span class="constant">ActiveRecordError</span>, <span class="string">"No integer type has byte size <span class="subst">#&#123;limit&#125;</span>"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ActiveRecord Migrate</span></span><br><span class="line">create_table <span class="string">'example'</span> <span class="keyword">do</span> |t|</span><br><span class="line">  t.integer <span class="symbol">:int</span>                 <span class="comment"># int (4 bytes, max 2,147,483,647)</span></span><br><span class="line">  t.integer <span class="symbol">:int1</span>, <span class="symbol">:limit</span> =&gt; <span class="number">1</span>   <span class="comment"># tinyint (1 byte, -128 to 127)</span></span><br><span class="line">  t.integer <span class="symbol">:int2</span>, <span class="symbol">:limit</span> =&gt; <span class="number">2</span>   <span class="comment"># smallint (2 bytes, max 32,767)</span></span><br><span class="line">  t.integer <span class="symbol">:int3</span>, <span class="symbol">:limit</span> =&gt; <span class="number">3</span>   <span class="comment"># mediumint (3 bytes, max 8,388,607)</span></span><br><span class="line">  t.integer <span class="symbol">:int4</span>, <span class="symbol">:limit</span> =&gt; <span class="number">4</span>   <span class="comment"># int (4 bytes)</span></span><br><span class="line">  t.integer <span class="symbol">:int5</span>, <span class="symbol">:limit</span> =&gt; <span class="number">5</span>   <span class="comment"># bigint (8 bytes, max 9,223,372,036,854,775,807)</span></span><br><span class="line">  t.integer <span class="symbol">:int8</span>, <span class="symbol">:limit</span> =&gt; <span class="number">8</span>   <span class="comment"># bigint (8 bytes)</span></span><br><span class="line">  t.integer <span class="symbol">:int11</span>, <span class="symbol">:limit</span> =&gt; <span class="number">11</span> <span class="comment"># int (4 bytes)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="index_u65B9_u6CD5"><a href="#index_u65B9_u6CD5" class="headerlink" title="index方法"></a>index方法</h4><p>新建一个索引<br><code>t.index [:index], name: &quot;index_name&quot;</code></p>
<h4 id="references_u65B9_u6CD5"><a href="#references_u65B9_u6CD5" class="headerlink" title="references方法"></a>references方法</h4><p>等同于belongs_to<br><code>t.belongs_to :user, foreign_key: true</code></p>
<h4 id="primary_key_u65B9_u6CD5"><a href="#primary_key_u65B9_u6CD5" class="headerlink" title="primary_key方法"></a>primary_key方法</h4><p>定义主键</p>
<p>同sql相关的内容<br><a href="https://github.com/jeremyevans/sequel" target="_blank" rel="external">Sequel</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Rails Migration<br>title: Rails Migration<br>date: 2016.02.14 14:40<br>tags: [Rails]</p>
<hr>
<h4 id="create_table_u65B9_u6CD5"><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thor]]></title>
    <link href="http://yoursite.com/2016/11/21/Thor/"/>
    <id>http://yoursite.com/2016/11/21/Thor/</id>
    <published>2016-11-21T15:54:23.000Z</published>
    <updated>2016-11-21T15:54:23.000Z</updated>
    <content type="html"><![CDATA[<p>header: thor<br>title: thor<br>date: 2016.04.07 11:36</p>
<hr>
<p><a href="https://github.com/erikhuda/thor/wiki" target="_blank" rel="external">wiki</a></p>
<h3 id="Thor_class"><a href="#Thor_class" class="headerlink" title="Thor class"></a>Thor class</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="inheritance">&lt; <span class="parent">Thor</span></span></span></span><br><span class="line">  desc <span class="string">"example"</span>, <span class="string">"an example task"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">example</span></span></span><br><span class="line">    puts <span class="string">"I'm a thor task!"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">thor <span class="symbol">test:</span>example</span><br></pre></td></tr></table></figure>
<ol>
<li>remove_file: 删除文件， 可以声明全路径</li>
<li>dictionary: 拷贝文件中的内容，把source中的拷贝到target中</li>
<li>copy_file: 可以声明全路径</li>
<li>FileUtils.mkdir_p</li>
<li>FileUtils.rm_p</li>
<li>ask(“问句?”, :yellow)</li>
<li>print_table([[]])</li>
<li>say(“表达”, :yellow)</li>
<li></li>
</ol>
<p><code>__FILE__</code> 是运行命令的文件,并不是当前的文件</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: thor<br>title: thor<br>date: 2016.04.07 11:36</p>
<hr>
<p><a href="https://github.com/erikhuda/thor/wiki" target="_blank" rel="ex]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fastlane]]></title>
    <link href="http://yoursite.com/2016/11/21/Fastlane/"/>
    <id>http://yoursite.com/2016/11/21/Fastlane/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>title: 学习Fastlane</p>
<h2 id="header_3A__u5B66_u4E60Fastlane"><a href="#header_3A__u5B66_u4E60Fastlane" class="headerlink" title="header: 学习Fastlane"></a>header: 学习Fastlane</h2><h1 id="u5B66_u4E60Fastlane"><a href="#u5B66_u4E60Fastlane" class="headerlink" title="学习Fastlane"></a>学习Fastlane</h1><h3 id="u57FA_u7840_u914D_u7F6E"><a href="#u57FA_u7840_u914D_u7F6E" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd project_dir</span><br><span class="line">gem install fastlane</span><br><span class="line">fastlane init</span><br><span class="line"><span class="comment">#Your Apple ID (e.g. fastlane<span class="doctag">@krausefx</span>.com):</span></span><br><span class="line"><span class="comment">#输入你的Apple Id</span></span><br><span class="line"><span class="comment">#输入密码</span></span><br></pre></td></tr></table></figure>
<p><strong><a href="https://github.com/fastlane/fastlane/blob/master/docs/Appfile.md" target="_blank" rel="external">Appfile</a></strong>:主要是声明一些操作时候的变量。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app_identifier <span class="string">"tools.fastlane.app"</span></span><br><span class="line">for_platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  team_id <span class="string">'123'</span> <span class="comment"># for all iOS related things</span></span><br><span class="line">  for_lane <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">    app_identifier <span class="string">'com.app.test'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#在其他文件中，CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)可以获取这个变量</span></span><br></pre></td></tr></table></figure>
<p><strong><a href="https://github.com/fastlane/fastlane/tree/master/docs" target="_blank" rel="external">Fastfile</a></strong>:编写新的命令。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:my_lane</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Whatever actions you like go in here.</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># fastlane my_lane 运行</span></span><br></pre></td></tr></table></figure>
<h4 id="u5168_u5C40_u53D8_u91CF_u4E0E_u65B9_u6CD5"><a href="#u5168_u5C40_u53D8_u91CF_u4E0E_u65B9_u6CD5" class="headerlink" title="全局变量与方法"></a>全局变量与方法</h4><ol>
<li><strong>全局变量</strong>：<br>  <code>CredentialsManager::AppfileConfig.try_fetch_value(:变量名)</code></li>
<li><strong>运行中产生的变量</strong>:<br>  <code>Actions.lane_context[SharedValues::SIGH_PROFILE_TYPE]</code></li>
<li><strong>打印</strong>:<br> <code>Helper.log.info</code></li>
</ol>
<h4 id="Gym_3A_u7F16_u8BD1_u9879_u76EE_u94FE_u63A5"><a href="#Gym_3A_u7F16_u8BD1_u9879_u76EE_u94FE_u63A5" class="headerlink" title="Gym:编译项目链接"></a>Gym:编译项目<a href="https://github.com/fastlane/gym" target="_blank" rel="external">链接</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gym init</span><br><span class="line"><span class="comment">#Gymfile</span></span><br><span class="line">output_directory <span class="string">"./ipas"</span> <span class="comment">#ipa的输出地址 相对于项目根目录</span></span><br><span class="line">output_name <span class="string">"IpaName"</span> <span class="comment">#ipa文件的名称</span></span><br><span class="line">provisioning_profile_path <span class="string">"/path/to/provision/"</span> <span class="comment">#编译时候的provision</span></span><br></pre></td></tr></table></figure>
<h4 id="Match_3A_u83B7_u53D6certificates_u4E0Eprofiles_u94FE_u63A5"><a href="#Match_3A_u83B7_u53D6certificates_u4E0Eprofiles_u94FE_u63A5" class="headerlink" title="Match:获取certificates与profiles链接"></a>Match:获取certificates与profiles<a href="https://github.com/fastlane/match" target="_blank" rel="external">链接</a></h4><ul>
<li>配置：需要一个git repo，本地的也可以</li>
<li><code>match init</code></li>
<li><code>git_url &quot;file:///path/to/repo.git&quot;</code></li>
<li><code>match adhoc --readobly</code>: 会去查看repo中有没有相应的cert与profiles，如果没有的话，会新建。</li>
<li><code>match appstore --readonly</code></li>
<li><code>match developent --readonly</code></li>
<li><strong>readonly</strong>: 如果不加这个选项的话，如果在repo中没有相应的文件，会从memcenter中下载，并且push到repo中。</li>
<li><a href="https://codesigning.guide" target="_blank" rel="external">参考链接</a></li>
<li>match主要是调用了其他的两个工具cert，与sign</li>
</ul>
<h4 id="cert_3A_u7BA1_u7406_u6216_u8005_u751F_u6210_u5F00_u53D1_u8BC1_u4E66_u94FE_u63A5_u5730_u5740"><a href="#cert_3A_u7BA1_u7406_u6216_u8005_u751F_u6210_u5F00_u53D1_u8BC1_u4E66_u94FE_u63A5_u5730_u5740" class="headerlink" title="cert:管理或者生成开发证书链接地址"></a>cert:管理或者生成开发证书<a href="https://github.com/fastlane/cert" target="_blank" rel="external">链接地址</a></h4><ul>
<li>直接运行<code>cert</code>会检测本地有没有可用的证书，如果没有的话，会完成一系列的工作，直到将苹果的证书导入到本地。</li>
</ul>
<h4 id="sigh_3A_u7BA1_u7406_u6216_u8005_u751F_u6210profile_u94FE_u63A5_u5730_u5740"><a href="#sigh_3A_u7BA1_u7406_u6216_u8005_u751F_u6210profile_u94FE_u63A5_u5730_u5740" class="headerlink" title="sigh:管理或者生成profile链接地址"></a>sigh:管理或者生成profile<a href="https://github.com/fastlane/sigh" target="_blank" rel="external">链接地址</a></h4><ul>
<li><code>sigh</code>:如果没有会生成再下载</li>
<li><code>sigh --development</code>:生成dev profile</li>
<li><code>sigh -o &quot;~/Certificates/&quot;</code>: 生成至特定的目录</li>
<li><code>sigh download_all</code>: 下载所有的profile</li>
<li><code>sigh --skip_install</code>: 只下载不安装</li>
<li><code>sigh --force</code>: 强制重新生成</li>
</ul>
<h4 id="u4F8B_u5B50"><a href="#u4F8B_u5B50" class="headerlink" title="例子"></a>例子</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">provision_file</span><span class="params">(type=<span class="keyword">nil</span>)</span></span></span><br><span class="line">    type ||= <span class="constant">Actions</span>.lane_context[<span class="constant">SharedValues::SIGH_PROFILE_TYPE</span>].gsub(<span class="string">"-"</span>,<span class="string">""</span>)</span><br><span class="line">    <span class="constant">Helper</span>.log.info <span class="string">"---------<span class="subst">#&#123;type&#125;</span>"</span></span><br><span class="line">    env_name = <span class="string">"sigh_<span class="subst">#&#123;<span class="constant">CredentialsManager::AppfileConfig</span>.try_fetch_value(<span class="symbol">:app_identifier</span>)&#125;</span>_<span class="subst">#&#123;type&#125;</span>"</span></span><br><span class="line">    <span class="constant">Helper</span>.log.info <span class="string">"************<span class="subst">#&#123;env_name&#125;</span>"</span></span><br><span class="line">    filename = <span class="constant">ENV</span>[env_name]</span><br><span class="line">    <span class="string">"<span class="subst">#&#123;<span class="constant">PROVISION_DIR</span>&#125;</span><span class="subst">#&#123;filename&#125;</span>.mobileprovision"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">desc <span class="string">"build adoc and publish to fir.im "</span></span><br><span class="line">lane <span class="symbol">:firim</span> <span class="keyword">do</span></span><br><span class="line">	match(<span class="symbol">type:</span> <span class="string">"adhoc"</span>)</span><br><span class="line">	gym(<span class="symbol">scheme:</span> <span class="string">"Yidian"</span>, <span class="symbol">output_name:</span> <span class="string">"YidianAdhoc"</span>, <span class="symbol">provisioning_profile_path:</span>provision_file)</span><br><span class="line">	sh <span class="string">"fir publish ../ipas/YidianAdhoc.ipa"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="u9519_u8BEF"><a href="#u9519_u8BEF" class="headerlink" title="错误"></a>错误</h4><ul>
<li>Certificate for Provisioning Profile ‘Development_com.zangcun.Yidian’ not available locally: V5387C7CZU ：有可能是cert的密钥没有设置对，需要重新运行cert</li>
<li></li>
</ul>
<h4 id="u5176_u4ED6_u547D_u4EE4_uFF1A"><a href="#u5176_u4ED6_u547D_u4EE4_uFF1A" class="headerlink" title="其他命令："></a>其他命令：</h4><ol>
<li><a href="https://github.com/fastlane/deliver" target="_blank" rel="external">Deliver</a>:提交app</li>
<li><a href="https://github.com/fastlane/snapshot" target="_blank" rel="external">Screenshot</a>:生成屏幕截图</li>
<li><a href="https://github.com/fastlane/frameit" target="_blank" rel="external">Frameit</a>:将屏幕截图放置在设备的图片中。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: 学习Fastlane</p>
<h2 id="header_3A__u5B66_u4E60Fastlane"><a href="#header_3A__u5B66_u4E60Fastlane" class="headerlink" title="header:]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git]]></title>
    <link href="http://yoursite.com/2016/11/21/Git/"/>
    <id>http://yoursite.com/2016/11/21/Git/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>header: Git<br>title: Git</p>
<h2 id="data_3A2016-03-21_10_3A25"><a href="#data_3A2016-03-21_10_3A25" class="headerlink" title="data:2016.03.21 10:25"></a>data:2016.03.21 10:25</h2><h4 id="u6DFB_u52A0tag_u94FE_u63A5"><a href="#u6DFB_u52A0tag_u94FE_u63A5" class="headerlink" title="添加tag链接"></a>添加tag<a href="https://git-scm.com/book/zh/v1/Git-基础-打标签" target="_blank" rel="external">链接</a></h4><ol>
<li>列出tag: <code>git tag</code></li>
<li>列出tag(特定版本): <code>git tag -l &#39;v1.4.2.*&#39;</code></li>
<li>新建tag: <code>git tag -a v1.4 -m &#39;my version 1.4&#39;</code></li>
<li>显示tag: <code>git show v1.4</code></li>
<li>push本地的tag: <code>git push origin v1.5</code></li>
<li>push本地的所有tag: <code>git push origin --tags</code></li>
</ol>
<h4 id="u62C9_u53D6_u6240_u6709_u7684_u8D44_u6E90"><a href="#u62C9_u53D6_u6240_u6709_u7684_u8D44_u6E90" class="headerlink" title="拉取所有的资源"></a>拉取所有的资源</h4><ol>
<li>git fetch origin</li>
</ol>
<h4 id="u66F4_u65B0_u90E8_u5206_u6587_u4EF6"><a href="#u66F4_u65B0_u90E8_u5206_u6587_u4EF6" class="headerlink" title="更新部分文件"></a>更新部分文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">// 更新文件</span><br><span class="line">git checkout -p api Gemfile</span><br><span class="line">// 添加文件</span><br><span class="line">git checkout api newFile</span><br><span class="line">// 删除文件</span><br><span class="line">rm old_file</span><br><span class="line">// 合并指定文件</span><br><span class="line">git</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Git<br>title: Git</p>
<h2 id="data_3A2016-03-21_10_3A25"><a href="#data_3A2016-03-21_10_3A25" class="headerlink" title="data:2016]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ImageMagick]]></title>
    <link href="http://yoursite.com/2016/11/21/ImageMagick/"/>
    <id>http://yoursite.com/2016/11/21/ImageMagick/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>header: ImageMagick<br>title: ImageMagick</p>
<h2 id="date_3A_2016-03-21_14_3A04"><a href="#date_3A_2016-03-21_14_3A04" class="headerlink" title="date: 2016.03.21 14:04"></a>date: 2016.03.21 14:04</h2><h3 id="u88C1_u526A_u56FE_u7247"><a href="#u88C1_u526A_u56FE_u7247" class="headerlink" title="裁剪图片"></a>裁剪图片</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert src.jpg -crop <span class="number">100</span>x10<span class="number">0</span> dest.jpg</span><br></pre></td></tr></table></figure>
<p>假设src.jpg的大小是300x200,执行命令后将得到名为dest-0.jpg、dest-1.jpg…dest-5.jpg<br>的6张大小为100x100的小图片。注意如果尺寸不是目标图片的整数倍，那么右边缘和下边缘的一部分图片就用实际尺寸</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert src.jpg -crop <span class="number">100</span>x8<span class="number">0</span>+<span class="number">50</span>+<span class="number">30</span> dest.jpg</span><br></pre></td></tr></table></figure>
<p>在原始图片的上距离上部30像素左部50为起点的位置,分别向左向下截取一块大小为100x80的图片。如果x相对于坐标，宽度不够100，那就取实际值。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert src.jpg -gravity center -crop <span class="number">100</span>x8<span class="number">0</span>+<span class="number">0</span>+<span class="number">0</span> dest.jpg</span><br></pre></td></tr></table></figure>
<p>在原始图上截取中心部分一块100x80的图片</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert src.jpg -gravity southeast -crop <span class="number">100</span>x8<span class="number">0</span>+<span class="number">10</span>+<span class="number">5</span> dest.jpg</span><br></pre></td></tr></table></figure>
<p>在原始图上截取右下角距离下边缘10个像素，右边缘5个像素一块100x80的图片</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: ImageMagick<br>title: ImageMagick</p>
<h2 id="date_3A_2016-03-21_14_3A04"><a href="#date_3A_2016-03-21_14_3A04" class="headerlink]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wed Jan 06 2016 00:00:00 GMT+0800 (CST)]]></title>
    <link href="http://yoursite.com/2016/11/21/2016-01-06/"/>
    <id>http://yoursite.com/2016/11/21/2016-01-06/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>title: iOS 微信支付与支付宝的集成</p>
<h2 id="header_3A_iOS__u5FAE_u4FE1_u652F_u4ED8_u4E0E_u652F_u4ED8_u5B9D_u7684_u96C6_u6210"><a href="#header_3A_iOS__u5FAE_u4FE1_u652F_u4ED8_u4E0E_u652F_u4ED8_u5B9D_u7684_u96C6_u6210" class="headerlink" title="header: iOS 微信支付与支付宝的集成"></a>header: iOS 微信支付与支付宝的集成</h2><h2 id="u5FAE_u4FE1"><a href="#u5FAE_u4FE1" class="headerlink" title="微信"></a>微信</h2><p><strong>参考地址</strong></p>
<ul>
<li><a href="http://kf.qq.com/faq/120911VrYVrA150906F3qqY3.html" target="_blank" rel="external">开通准备</a></li>
<li><a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=8_1" target="_blank" rel="external">微信文档</a></li>
<li><a href="https://github.com/jasl/wx_pay" target="_blank" rel="external">wx_pay</a></li>
<li><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></li>
</ul>
<h3 id="u670D_u52A1_u5668_3A_Ruby_on_Rails"><a href="#u670D_u52A1_u5668_3A_Ruby_on_Rails" class="headerlink" title="服务器: Ruby on Rails"></a>服务器: Ruby on Rails</h3><hr>
<p><strong>配置</strong></p>
<p>使用了Gem: <a href="https://github.com/jasl/wx_pay" target="_blank" rel="external">wx_pay</a><br>在Gemfile中添加:<br><code>gem &#39;wx_pay&#39;</code><br>在config/initializers/下的ruby文件中添加配置<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"wx_pay"</span></span><br><span class="line"></span><br><span class="line"><span class="constant">WxPay</span>.appid = <span class="string">'微信应用id'</span></span><br><span class="line"><span class="constant">WxPay</span>.mch_id = <span class="string">'微信商户id'</span></span><br><span class="line"><span class="constant">WxPay</span>.key = <span class="string">"微信应用的key"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档地址: https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3</span></span><br><span class="line"><span class="comment"># 从微信平台上下载的p12证书的默认密码为你的商户id</span></span><br><span class="line"><span class="comment"># 重设密码: Mac上可以先用密钥工具打开p12证书 然后再导出 并且添加新的密码</span></span><br><span class="line"><span class="constant">WxPay</span>.set_apiclient_by_pkcs12(<span class="constant">File</span>.read(<span class="string">"<span class="subst">#&#123;<span class="constant">Rails</span>.root&#125;</span>/p12文件的路径"</span>), <span class="string">"p12文件的密码"</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>逻辑代码</strong></p>
<p>在controllers中添加生成订单的逻辑代码<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_wx_order</span></span></span><br><span class="line">	params = &#123;</span><br><span class="line">	  body             <span class="symbol">:</span> <span class="string">'订单详情'</span>,</span><br><span class="line">	  out_trade_no     <span class="symbol">:</span> <span class="string">'网站订单编号'</span>,</span><br><span class="line">	  spbill_create_ip <span class="symbol">:</span> <span class="string">'买家的ip'</span>,</span><br><span class="line">	  notify_url       <span class="symbol">:</span> <span class="string">'服务器接受微信订单通知的地址'</span>, <span class="comment"># 需要为POST请求地址</span></span><br><span class="line">	  trade_type       <span class="symbol">:</span> <span class="string">'APP'</span>,                          <span class="comment"># could be "JSAPI", "NATIVE" or "APP",</span></span><br><span class="line">	  total_fee        <span class="symbol">:</span> <span class="number">1</span>,                              <span class="comment"># 以分为单位1代表1分钱，即0.01元</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 请求微信的服务器，并且产生一个微信订单</span></span><br><span class="line">	r = <span class="constant">WxPay::Service</span>.invoke_unifiedorder params</span><br><span class="line">	<span class="comment">#=&gt; &#123;</span></span><br><span class="line">	<span class="comment">#     "return_code" =&gt; "SUCCESS",</span></span><br><span class="line">	<span class="comment">#     "return_msg"  =&gt; "OK",</span></span><br><span class="line">	<span class="comment">#     "appid"       =&gt; "YOUR APPID",</span></span><br><span class="line">	<span class="comment">#     "mch_id"      =&gt; "YOUR MCH_ID",</span></span><br><span class="line">	<span class="comment">#     "sign"        =&gt; "623AE90C9679729DDD7407DC7A1151B2",</span></span><br><span class="line">	<span class="comment">#     "result_code" =&gt; "SUCCESS",</span></span><br><span class="line">	<span class="comment">#     "prepay_id"   =&gt; "wx2014111104255143b7605afb0314593866", # #支付码，相当于该订单的标示Id</span></span><br><span class="line">	<span class="comment">#     "nonce_str"   =&gt; "8RN7YfTZ3OUgWX5e",                     # #机生成码，需要在客户端请求的时候带上</span></span><br><span class="line">	<span class="comment">#     "code_url"    =&gt; "weixin://"</span></span><br><span class="line">	<span class="comment">#     "trade_type"  =&gt; "NATIVE"</span></span><br><span class="line">	<span class="comment">#   &#125;</span></span><br><span class="line">	<span class="keyword">if</span> r.success?</span><br><span class="line">	    <span class="comment"># 生成手机客户端向微信服务器请求时需要的参数</span></span><br><span class="line">	    client_req = <span class="constant">WxPay::Service::</span>generate_app_pay_req(&#123;</span><br><span class="line">	        <span class="symbol">prepayid:</span> r[<span class="string">"prepay_id"</span>],</span><br><span class="line">	        <span class="symbol">noncestr:</span> r[<span class="string">"nonce_str"</span>]</span><br><span class="line">	        &#125;)</span><br><span class="line">	   <span class="comment">#=&gt;&#123;</span></span><br><span class="line">	   <span class="comment">#      appid     : '应用id',</span></span><br><span class="line">	   <span class="comment">#      partnerid : '商户id',</span></span><br><span class="line">	   <span class="comment">#      noncestr  : '1101000000140429eb40476f8896f4c9',</span></span><br><span class="line">	   <span class="comment">#      prepayid  : '1101000000140415649af9fc314aa427',</span></span><br><span class="line">	   <span class="comment">#      timestamp : '1398746574',</span></span><br><span class="line">	   <span class="comment">#      package   : 'Sign=WXPay',                       # 微信要求的固定参数</span></span><br><span class="line">	   <span class="comment">#      sign      : '根据参数生成的sign'                # 生成规则参考微信文档，wx_pay会自动生成, 不用手动生成</span></span><br><span class="line">	   <span class="comment">#&#125;</span></span><br><span class="line">	    render <span class="symbol">json:</span> client_req</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    render <span class="symbol">json:</span> &#123;<span class="symbol">message:</span> <span class="string">"error"</span>&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p><strong>处理微信的回调</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span></span></span><br><span class="line">	result = <span class="constant">Hash</span>.from_xml(request.body.read)[<span class="string">"xml"</span>]</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 验证签名是否是正确的</span></span><br><span class="line">	<span class="keyword">if</span> <span class="constant">WxPay::Sign</span>.verify?(result)</span><br><span class="line">	    <span class="comment"># 为了更安全的考虑 可以让服务器再向微信服务器查询订单的状态</span></span><br><span class="line">	    <span class="comment"># api地址: https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_2&amp;index=4</span></span><br><span class="line">	    orderStatus = <span class="constant">WxPay::Service</span>.order_query(&#123;</span><br><span class="line">	        <span class="symbol">out_trade_no:</span> <span class="string">"商户订单号"</span></span><br><span class="line">	        &#125;)</span><br><span class="line">	    <span class="keyword">if</span> orderStatus.success?</span><br><span class="line">	        render <span class="symbol">:xml</span> =&gt; &#123;<span class="symbol">return_code:</span> <span class="string">"SUCCESS"</span>&#125;.to_xml(<span class="symbol">root:</span> <span class="string">'xml'</span>, <span class="symbol">dasherize:</span> <span class="keyword">false</span>)</span><br><span class="line">	    <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    render <span class="symbol">:xml</span> =&gt; &#123;<span class="symbol">return_code:</span> <span class="string">"FAIL"</span>, <span class="symbol">return_msg:</span> <span class="string">"签名失败"</span>&#125;.to_xml(<span class="symbol">root:</span> <span class="string">'xml'</span>, <span class="symbol">dasherize:</span> <span class="keyword">false</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="u5BA2_u6237_u7AEF_3A_iOS_+_Swift_+_Alamofire"><a href="#u5BA2_u6237_u7AEF_3A_iOS_+_Swift_+_Alamofire" class="headerlink" title="客户端: iOS + Swift + Alamofire"></a>客户端: iOS + Swift + Alamofire</h3><hr>
<p>为了安全起见，将预订单生成的逻辑，全都放在了服务器，所以客户端整体上在发起支付的过程中没有做太多的工作，就是将服务器生成的支付信息，直接再转交给微信服务器就可以了。</p>
<p><strong>配置</strong></p>
<ol>
<li>将下载的Sdk文件中的所有头文件与源文件拖入到项目中</li>
<li>bridge文件中添加: <code>#import &quot;WXApi.h&quot;</code></li>
<li>AppDelegate.swift的载入方法中添加: <code>WXApi.registerApp(&quot;appid&quot;)</code></li>
<li>配置应用的scheme: wx+微信分配的Appid(没有+号)</li>
</ol>
<p><strong>逻辑代码</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">POST</span>, <span class="string">"create_wx_order"</span>, parameters: parameter!, headers: headers).responseJSON &#123; (response) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">let</span> result = response.result.value!</span><br><span class="line">	<span class="keyword">let</span> req = <span class="type">PayReq</span>()</span><br><span class="line">	req.partnerId = result[<span class="string">"partnerid"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">	req.prepayId = result[<span class="string">"prepayid"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">	req.package = result[<span class="string">"package"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">	req.nonceStr = result[<span class="string">"noncestr"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">	req.timeStamp = <span class="type">UInt32</span>(result[<span class="string">"timestamp"</span>] <span class="keyword">as</span>! <span class="type">String</span>)!</span><br><span class="line">	req.sign = result[<span class="string">"sign"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">	<span class="type">WXApi</span>.sendReq(req) <span class="comment">// 发起支付请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>处理微信的回调</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一个WXApiManager.swift 仿照微信提供的Demo</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> sharedInstance = <span class="type">WXApiManager</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WXApiManagerDelegate</span></span>&#123;</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">weixinPaySuccess</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="func"><span class="keyword">func</span> <span class="title">weixinPayFailed</span><span class="params">(errorCod: Int32, andErrorMessage msg: String!)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXApiManager</span> : <span class="title">NSObject</span>, <span class="title">WXApiDelegate</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 实现单例方法</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">sharedManager</span> : <span class="title">WXApiManager</span></span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> sharedInstance</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">internal</span> <span class="keyword">var</span> delegate : <span class="type">WXApiManagerDelegate</span>?</span><br><span class="line">	<span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">onResp</span><span class="params">(resp: BaseResp!)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">if</span> resp.isKindOfClass(<span class="type">PayResp</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">	        <span class="keyword">switch</span>(resp.errCode)&#123;</span><br><span class="line">	        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	            delegate?.weixinPaySuccess()</span><br><span class="line">	            <span class="keyword">break</span></span><br><span class="line">	        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">	            delegate?.weixinPayFailed(resp.errCode, andErrorMessage: resp.errStr)</span><br><span class="line">	            <span class="keyword">break</span></span><br><span class="line">	        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">	            delegate?.weixinPayFailed(resp.errCode, andErrorMessage: resp.errStr)</span><br><span class="line">	            <span class="keyword">break</span></span><br><span class="line">	        <span class="keyword">default</span>:</span><br><span class="line">	            delegate?.weixinPayFailed(resp.errCode, andErrorMessage: resp.errStr)</span><br><span class="line">	            <span class="keyword">break</span></span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在AppDelegate将微信的回调传给WXApiManager</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">application</span><span class="params">(app: UIApplication, openURL url: NSURL, options: [String : AnyObject])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">	<span class="type">WXApi</span>.handleOpenURL(url, delegate: <span class="type">WXApiManager</span>.sharedManager)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是客户端与服务器的支付工作，关于订单如何处理，订单与支付的状态这些，就得按照业务逻辑，单独做处理了。但是与微信的交互基本上就是这些，目前还没有发现比较难搞的坑。而且准备阶段的申请，也比较快，没有想象中的那么久，基本上四五个工作日下来，如果资料齐全就可以开通支付功能。</p>
<h2 id="u652F_u4ED8_u5B9D"><a href="#u652F_u4ED8_u5B9D" class="headerlink" title="支付宝"></a>支付宝</h2><p><strong>参考地址</strong></p>
<ul>
<li><a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.lAKmoy&amp;treeId=44&amp;articleId=103921&amp;docType=1" target="_blank" rel="external">开通准备</a></li>
<li><a href="https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103563&amp;docType=1" target="_blank" rel="external">支付宝文档</a></li>
<li><a href="https://github.com/chloerei/alipay" target="_blank" rel="external">alipay</a></li>
<li><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></li>
</ul>
<h3 id="u6211_u9760"><a href="#u6211_u9760" class="headerlink" title="我靠"></a>我靠</h3><p>不得不承认支付宝的服务确实开通的比较早，因为单单接入教程与应用的创建入口，就有两三个。基本上都是一路试过来才能知道，到底哪个才是正确入口。所以重点终于来了，</p>
<p><strong>进入支付宝的正确姿势:</strong></p>
<ol>
<li>生成公钥与密钥: <a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.O1c6AE&amp;treeId=44&amp;articleId=103242&amp;docType=1" target="_blank" rel="external">文档地址</a></li>
<li><strong>上传生成的公钥</strong>: <ol>
<li>上传的是上一步生成的自己的公钥。</li>
<li>去掉第一行与最后一行，并且上传的时候，需要把行尾的回车符也都删除。</li>
<li>上传的地址: <strong>合作伙伴密钥</strong>，这一步很关键，之间我只上传了<strong>应用详情</strong>下面的公钥，<strong>调试不通</strong>，后来上传了合作伙伴的密钥，才调试通过。</li>
</ol>
</li>
<li><strong>支付宝的公钥</strong>: <strong>不能</strong>使用应用详情下的支付宝公钥，需要用支付宝Demo中提供的公钥。</li>
</ol>
<p>如果这几点能搞对的话，剩下就是力气活了。</p>
<h3 id="u670D_u52A1_u5668_3A_Ruby_On_Rails"><a href="#u670D_u52A1_u5668_3A_Ruby_On_Rails" class="headerlink" title="服务器: Ruby On Rails"></a>服务器: Ruby On Rails</h3><hr>
<p><strong>配置</strong></p>
<p>使用了Gem: <a href="https://github.com/chloerei/alipay" target="_blank" rel="external">alipay</a><br>在Gemfile中添加:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'alipay'</span></span><br></pre></td></tr></table></figure></p>
<p>在config/initializers/下的ruby文件中添加配置<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Alipay</span>.pid = <span class="string">'商户创'</span></span><br><span class="line"><span class="constant">Alipay</span>.key = &lt;&lt;-<span class="constant">EOF</span></span><br><span class="line">直接将私钥的所有内容拷贝到这里 包括第一行与最后一行</span><br><span class="line"><span class="constant">EOF</span></span><br><span class="line"><span class="constant">Alipay</span>.sign_type = <span class="string">'RSA'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>逻辑代码</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alipay</span></span></span><br><span class="line">	<span class="comment"># 这个方法会生成客户端向支付宝发送请求时候的所有参数</span></span><br><span class="line">	<span class="comment"># 并且将这些参数用你的私钥生成sign</span></span><br><span class="line">	<span class="comment"># 最后把这些参数合起来组合成一个字符串</span></span><br><span class="line">	<span class="comment"># 客户端只需要把这个字符串直接提交至支付宝的SDK即可</span></span><br><span class="line">	str = <span class="constant">Alipay::Mobile::Service</span>.mobile_securitypay_pay_string(</span><br><span class="line">	  out_trade_no <span class="symbol">:</span> <span class="string">'本地的订单编号'</span>,</span><br><span class="line">	  notify_url   <span class="symbol">:</span> <span class="string">'回调地址'</span>,</span><br><span class="line">	  subject      <span class="symbol">:</span> <span class="string">'订单信息'</span>,</span><br><span class="line">	  total_fee    <span class="symbol">:</span> <span class="string">'0.01'</span>            <span class="comment"># 以元为单位，0.01为1分</span></span><br><span class="line">	)</span><br><span class="line">	render <span class="symbol">json:</span> &#123;<span class="symbol">message:</span> str&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>处理支付宝的回调</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notify_params = params.except(*request.path_parameters.keys)</span><br><span class="line"><span class="keyword">if</span> <span class="constant">Alipay::Notify</span>.verify?(notify_params)</span><br><span class="line">	<span class="keyword">return</span> render <span class="symbol">text:</span> <span class="string">"success"</span> <span class="comment">#  必须向支付宝发送纯文本的"success"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="constant">Rails</span>.logger.info <span class="string">"-------------- failure"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p><strong>可能会遇到的问题</strong></p>
<ul>
<li>Rails报错<code>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed</code>，这是因为<code>Alipay::Notify.verify</code>会向支付宝发送https请求来验证订单是否真的完成了，而ruby可能会找不到SSL的证书，解决的办法就是下载SSL证书，并且正确声明证书的地址。<a href="http://stackoverflow.com/questions/4528101/ssl-connect-returned-1-errno-0-state-sslv3-read-server-certificate-b-certificat" target="_blank" rel="external">参考链接</a><ul>
<li>重新安装rvm的openssl并且重新安装ruby</li>
<li>pkg install openssl</li>
<li>rvm reinstall 2.1.2</li>
</ul>
</li>
</ul>
<ul>
<li>向支付宝的验证必须在1分钟之内完成，超过一分钟，返回结果就会变成false，而且只能验证一次，只要成功验证一次返回了true，以后再去验证的时候也是只返回false。</li>
</ul>
<h3 id="u5BA2_u6237_u7AEF_3A_iOS_+_Swift_+_Alamofire-1"><a href="#u5BA2_u6237_u7AEF_3A_iOS_+_Swift_+_Alamofire-1" class="headerlink" title="客户端: iOS + Swift + Alamofire"></a>客户端: iOS + Swift + Alamofire</h3><hr>
<p>同微信的实现逻辑类似，也是客户端只是把服务器拼好的请求信息，直接请求出去，就可以了。</p>
<p><strong>配置</strong></p>
<ol>
<li>添加需要的库文件<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.5Q5ik4&amp;treeId=59&amp;articleId=103676&amp;docType=1" target="_blank" rel="external">参考链接</a></li>
<li>配置应用的scheme</li>
</ol>
<p><strong>逻辑代码</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">POST</span>, <span class="string">"create_alipay_order"</span>, parameters: parameter!, headers: headers).responseJSON &#123; (response) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">	<span class="type">AlipaySDK</span>.defaultService().payOrder(result[<span class="string">"message"</span>] <span class="keyword">as</span>! <span class="type">String</span>, fromScheme: <span class="string">"应用的scheme"</span>, callback: &#123; (payResult) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">	    <span class="comment">// 如果应用没有被kill掉，支付结果会回调到这里来</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>处理支付宝的回调</strong><a href="https://doc.open.alipay.com/doc2/detail.htm?spm=0.0.0.0.HpJm5b&amp;treeId=59&amp;articleId=103660&amp;docType=1" target="_blank" rel="external">参考链接</a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">application</span><span class="params">(app: UIApplication, openURL url: NSURL, options: [String : AnyObject])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">	<span class="type">AlipaySDK</span>.defaultService().processOrderWithPaymentResult(url) &#123; (payResult) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">	    <span class="comment">// 如果支付过程中被kill掉，就需要在这里进行提示处理</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是支付宝的接入过程，虽然代码没有多少，主要经历都是浪费在了支付宝网站上的配置，需要在正确的地方上传正确格式的公钥。</p>
<h3 id="Ping++"><a href="#Ping++" class="headerlink" title="Ping++"></a>Ping++</h3><hr>
<p>因为我只是尝试了Ping++的测试模式，具体的真是环境怎么样，我也不得而知，但就测试接入的流程，确实很简单，所以就只说一下我的看法:</p>
<ol>
<li><strong>难易程度</strong>: 真的很方便，几行代码就可以搞定，但我只是在<strong>测试模式</strong>模式下，正式环境会不会更复杂，我也不得而知。</li>
<li><strong>安全性</strong>: 需要把自己的密钥上传至Ping++的服务，但我并没有觉得这样会很危险，反而相信他们可以做的更专业。</li>
<li><strong>为什么放弃</strong>: 主要是不想让第三方看到自己的交易记录。</li>
</ol>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><hr>
<p>总体来说，如果配置都没有问题，使用Gem包，接入还是很方便的。<br>完。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: iOS 微信支付与支付宝的集成</p>
<h2 id="header_3A_iOS__u5FAE_u4FE1_u652F_u4ED8_u4E0E_u652F_u4ED8_u5B9D_u7684_u96C6_u6210"><a href="#header_3A_]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mon Feb 15 2016 00:00:00 GMT+0800 (CST)]]></title>
    <link href="http://yoursite.com/2016/11/21/2016-02-15/"/>
    <id>http://yoursite.com/2016/11/21/2016-02-15/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>header: Nokogiri<br>title: Nokogiri<br>date: 2016.02.15 10:58</p>
<h2 id="tags_3A__5Bruby_5D"><a href="#tags_3A__5Bruby_5D" class="headerlink" title="tags: [ruby]"></a>tags: [ruby]</h2><p><a href="http://rdoc.info/github/sparklemotion/nokogiri" target="_blank" rel="external">文档</a></p>
<h3 id="u8BFB_u53D6_u6587_u4EF6"><a href="#u8BFB_u53D6_u6587_u4EF6" class="headerlink" title="读取文件"></a>读取文件</h3><p><code>Nokogiri::XML(File.open(&quot;xmlfile&quot;))</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Nokogiri<br>title: Nokogiri<br>date: 2016.02.15 10:58</p>
<h2 id="tags_3A__5Bruby_5D"><a href="#tags_3A__5Bruby_5D" class="header]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fri Feb 19 2016 00:00:00 GMT+0800 (CST)]]></title>
    <link href="http://yoursite.com/2016/11/21/2016-02-19/"/>
    <id>http://yoursite.com/2016/11/21/2016-02-19/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>header: Rails权限<br>title: Rails权限</p>
<h2 id="date_3A_2016-02-19_16_3A20"><a href="#date_3A_2016-02-19_16_3A20" class="headerlink" title="date: 2016.02.19 16:20"></a>date: 2016.02.19 16:20</h2><h3 id="Role__u94FE_u63A5"><a href="#Role__u94FE_u63A5" class="headerlink" title="Role 链接"></a>Role <a href="https://github.com/RolifyCommunity/rolify" target="_blank" rel="external">链接</a></h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></span><br><span class="line">		has_and_belongs_to_many <span class="symbol">:admin_users</span>, <span class="symbol">:join_table</span> =&gt; <span class="symbol">:admin_users_roles</span></span><br><span class="line">		belongs_to <span class="symbol">:resource</span>, <span class="symbol">:polymorphic</span> =&gt; <span class="keyword">true</span></span><br><span class="line">		has_many <span class="symbol">:permissions</span></span><br><span class="line"></span><br><span class="line">		validates <span class="symbol">:resource_type</span>,</span><br><span class="line">		<span class="symbol">:inclusion</span> =&gt; &#123; <span class="symbol">:in</span> =&gt; <span class="constant">Rolify</span>.resource_types &#125;,</span><br><span class="line">		<span class="symbol">:allow_nil</span> =&gt; <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">		scopify</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加角色</span></span><br><span class="line">admin_user.add_role <span class="symbol">:admin</span> <span class="comment">#admin 为role中的name字段值</span></span><br><span class="line"><span class="comment"># 判断角色</span></span><br><span class="line">admin_user.has_role? <span class="symbol">:admin</span></span><br><span class="line"><span class="comment"># 删除角色</span></span><br><span class="line">admin_user.remove_role? <span class="symbol">:admin</span></span><br></pre></td></tr></table></figure>
<h3 id="Cancan__u94FE_u63A5"><a href="#Cancan__u94FE_u63A5" class="headerlink" title="Cancan 链接"></a>Cancan <a href="https://github.com/CanCanCommunity/cancancan" target="_blank" rel="external">链接</a></h3><p>cancan是在application中获取<strong>current_ability</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_ability</span></span></span><br><span class="line">	<span class="variable">@current_ability</span> = <span class="constant">Ability</span>.new(current_user)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>所以必须实现一个<strong>current_user</strong>方法</p>
<h4 id="u5B9A_u4E49_u6743_u9650"><a href="#u5B9A_u4E49_u6743_u9650" class="headerlink" title="定义权限"></a>定义权限</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ability</span></span></span><br><span class="line">	<span class="keyword">include</span> <span class="constant">Cancan::Ability</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(user)</span></span></span><br><span class="line">		can <span class="symbol">:read</span>, <span class="constant">Post</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断权限</span></span><br><span class="line">can? <span class="symbol">:read</span>, <span class="constant">Post</span></span><br><span class="line">cannot? <span class="symbol">:read</span>, <span class="constant">Post</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断并且发出异常 CanCan::AccessDenied</span></span><br><span class="line">authorize! <span class="symbol">:show</span>, <span class="variable">@project</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ApplicationController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> <span class="inheritance">&lt; <span class="parent">ActionController::Base</span></span></span></span><br><span class="line">  rescue_from <span class="constant">CanCan::AccessDenied</span> <span class="keyword">do</span> |exception|</span><br><span class="line">    render <span class="symbol">:file</span> =&gt; <span class="string">"<span class="subst">#&#123;<span class="constant">Rails</span>.root&#125;</span>/public/403.html"</span>, <span class="symbol">:status</span> =&gt; <span class="number">403</span>, <span class="symbol">:layout</span> =&gt; <span class="keyword">false</span></span><br><span class="line">    <span class="comment">## to avoid deprecation warnings with Rails 3.2.x (and incidentally using Ruby 1.9.3 hash syntax)</span></span><br><span class="line">    <span class="comment">## this render call should be:</span></span><br><span class="line">    <span class="comment"># render file: "#&#123;Rails.root&#125;/public/403", formats: [:html], status: 403, layout: false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Rails权限<br>title: Rails权限</p>
<h2 id="date_3A_2016-02-19_16_3A20"><a href="#date_3A_2016-02-19_16_3A20" class="headerlink" title=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker&Chef]]></title>
    <link href="http://yoursite.com/2016/11/21/Docker&Chef/"/>
    <id>http://yoursite.com/2016/11/21/Docker&Chef/</id>
    <published>2016-11-21T15:50:57.000Z</published>
    <updated>2016-11-21T15:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>header: Chef Vagrant Docker</p>
<h2 id="title_3A_Chef_Vagrant_Docker"><a href="#title_3A_Chef_Vagrant_Docker" class="headerlink" title="title: Chef Vagrant Docker"></a>title: Chef Vagrant Docker</h2><h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><ol>
<li>安装 <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">链接地址</a></li>
<li>安装VirtualBox</li>
<li>获取Ubuntu源，<a href="http://files.vagrantup.com/precise64.box" target="_blank" rel="external">链接地址</a></li>
<li>添加镜像<code>vagrant box add ubuntu12_04 ~/Download/precise64.box</code></li>
<li><code>vagrant init</code> 生成Vagrantfile</li>
<li>镜像地址: <a href="http://www.vagrantbox.es" target="_blank" rel="external">链接</a></li>
</ol>
<h4 id="u914D_u7F6E_u6587_u4EF6"><a href="#u914D_u7F6E_u6587_u4EF6" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Vagrant</span>.configure(<span class="number">2</span>) <span class="keyword">do</span> |config|</span><br><span class="line">	config.vm.box = <span class="string">"ubuntu_12_04"</span></span><br><span class="line">	config.vm.host_name = <span class="string">"webserver"</span></span><br><span class="line">	config.vm.network <span class="string">"forwarded_port"</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">	config.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.33.10"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># config.vm.synced_folder "../data", "/vagrant_data"</span></span><br><span class="line">	config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</span><br><span class="line">     <span class="comment"># Display the VirtualBox GUI when booting the machine</span></span><br><span class="line">     <span class="comment">#vb.gui = true</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># Customize the amount of memory on the VM:</span></span><br><span class="line">		vb.memory = <span class="string">"512"</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></span><br><span class="line">  <span class="comment"># information on available options.</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#   sudo apt-get update</span></span><br><span class="line">  <span class="comment">#   sudo apt-get install -y apache2</span></span><br><span class="line">  <span class="comment"># SHELL</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="u547D_u4EE4"><a href="#u547D_u4EE4" class="headerlink" title="命令"></a>命令</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vagrant up <span class="comment">#启动</span></span><br><span class="line">vagrant ssh <span class="comment">#链接</span></span><br><span class="line">vagrant halt <span class="comment">#挂起 把内存存到硬盘里，方便下次更快的启动</span></span><br><span class="line">vagrant halt <span class="comment">#关闭</span></span><br><span class="line">vagrant destroy <span class="comment">#删除，下次启动时候 会重新安装</span></span><br></pre></td></tr></table></figure>
<h2 id="Chef"><a href="#Chef" class="headerlink" title="Chef"></a>Chef</h2><p>使用chef-solo的方案</p>
<ol>
<li>在本地安装chef:<code>gem install chef</code>, chef-solo已经包含在chef中了。</li>
<li>安装knife: <code>gem install knife-solo</code></li>
<li>新建knife目录: <code>knife solo init project-solo</code></li>
<li>生成一个默认配置: <code>knife configure -r . --defaults</code></li>
<li>部署: <code>knife solo bootstrap vagrant@192.168.33.10</code>，这个命令其实等价于<ol>
<li><code>knife solo prepare</code>: 登陆机器，并且安装chef环境</li>
<li><code>knife solo cook</code>: 上传本地的cookbook 并且在vps上运行</li>
</ol>
</li>
<li>在下次使用的时候，<strong>只需要</strong><code>knife solo cook</code>就可以了</li>
<li>新建cookbook: <code>knife cookbook create nginx</code></li>
</ol>
<h4 id="u4F7F_u7528berkshelf__u94FE_u63A5_u5730_u5740"><a href="#u4F7F_u7528berkshelf__u94FE_u63A5_u5730_u5740" class="headerlink" title="使用berkshelf 链接地址"></a>使用berkshelf <a href="http://berkshelf.com" target="_blank" rel="external">链接地址</a></h4><ol>
<li>新建cookbook: <code>knife cookbook create berks &amp;&amp; cd cookboos/berks &amp;&amp; berks init</code></li>
<li>berkshelf会把cookbooks安装到<code>~/.berkshelf</code>这个目录中</li>
<li><code>berks install</code> 类似于<code>bundle install</code>安装cookbooks</li>
<li><code>berks verdor dir</code>会把cookbooks导出至dir</li>
<li><strong>疑问</strong>: berkshelf主要适用于一个library cookbook的依赖，不适用于管理application的cookbook， 所以就把vendor出来的cookbook拷贝至<code>repo/cookbook</code>中继续使用。</li>
</ol>
<h2 id="Chef_Cookbook"><a href="#Chef_Cookbook" class="headerlink" title="Chef Cookbook"></a>Chef Cookbook</h2><h4 id="user__u94FE_u63A5"><a href="#user__u94FE_u63A5" class="headerlink" title="user 链接"></a>user <a href="https://github.com/fnichol/chef-user" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// node文件</span><br><span class="line">"run_list":[</span><br><span class="line">	[recipe[user::data_bag]]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">//user的配置</span><br><span class="line">"user":&#123;</span><br><span class="line">   "user_array_node_attr":"new_users"</span><br><span class="line">&#125;,</span><br><span class="line">"new_users":[</span><br><span class="line">   "ubuntu"</span><br><span class="line">   ]</span><br><span class="line">// repo/data_bags/users/ubuntu.json</span><br><span class="line">&#123;</span><br><span class="line">	"id": "ubuntu",</span><br><span class="line">	"password": "password",</span><br><span class="line">	"ssh_keys": [</span><br><span class="line">		""//会被添加至authorikeys</span><br><span class="line">	],</span><br><span class="line">	"uid": 2001,</span><br><span class="line">	"shell": "\/bin\/bash",</span><br><span class="line">	"comment": "ubuntu",</span><br><span class="line">	"ssh_keygen": "false"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>坑</strong>:因为data_bag这个recipe会读取<code>node[&quot;users&quot;]</code>字段，需要是一个数组，但是chefmeta这个recipe需要<code>node[&quot;users&quot;]</code>为hash。<code>node[&#39;user&#39;][&#39;user_array_node_attr&#39;]</code>设置为<strong>users</strong>以外的值。</p>
<h4 id="sudo__u94FE_u63A5"><a href="#sudo__u94FE_u63A5" class="headerlink" title="sudo 链接"></a>sudo <a href="https://github.com/chef-cookbooks/sudo" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// node文件</span><br><span class="line">"run_list":[</span><br><span class="line">	["recipe[sudo]"]</span><br><span class="line">],</span><br><span class="line">// sudo配置</span><br><span class="line">"authorization": &#123;</span><br><span class="line"> "sudo": &#123;</span><br><span class="line">   "users": ["ubuntu"],</span><br><span class="line">   "passwordless": "true"</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="zsh__u94FE_u63A5"><a href="#zsh__u94FE_u63A5" class="headerlink" title="zsh 链接"></a>zsh <a href="https://github.com/chef-cookbooks/zsh" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[zsh]"]</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="oh_my_zsh__u94FE_u63A5"><a href="#oh_my_zsh__u94FE_u63A5" class="headerlink" title="oh_my_zsh 链接"></a>oh_my_zsh <a href="https://github.com/shingara/oh-my-zsh-chef" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[oh_my_zsh]"]</span><br><span class="line">],</span><br><span class="line">"oh_my_zsh":&#123;</span><br><span class="line">   "users":[</span><br><span class="line">       &#123;</span><br><span class="line">           "login": "ubuntu",</span><br><span class="line">           "plugins": ["gem", "git", "rails", "ruby"],</span><br><span class="line">           "home": "/home/ubuntu" //这个字段必须写，否则会出现写入.oh_my_zsh权限不足的问题</span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="memcached__u94FE_u63A5"><a href="#memcached__u94FE_u63A5" class="headerlink" title="memcached 链接"></a>memcached <a href="https://github.com/chef-cookbooks/memcached" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[memcached]"]</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="redis__u94FE_u63A5"><a href="#redis__u94FE_u63A5" class="headerlink" title="redis 链接"></a>redis <a href="https://supermarket.chef.io/cookbooks/redis" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[redis]"]</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="mysql__u94FE_u63A5"><a href="#mysql__u94FE_u63A5" class="headerlink" title="mysql 链接"></a>mysql <a href="https://github.com/chef-cookbooks/mysql" target="_blank" rel="external">链接</a></h4><p>mysql没有自己的recipe所以要自己新建recipe</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql_service <span class="string">'default'</span> <span class="keyword">do</span></span><br><span class="line">  port <span class="string">'3306'</span></span><br><span class="line">  initial_root_password <span class="string">'password'</span></span><br><span class="line">  action [<span class="symbol">:create</span>, <span class="symbol">:start</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="rvm__26amp_3B_26amp_3B_ruby_rvm_fw"><a href="#rvm__26amp_3B_26amp_3B_ruby_rvm_fw" class="headerlink" title="rvm &amp;&amp; ruby rvm_fw"></a>rvm &amp;&amp; ruby <a href="https://supermarket.chef.io/cookbooks/rvm_fw" target="_blank" rel="external">rvm_fw</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[rvm_fw]"]</span><br><span class="line">],</span><br><span class="line">"rvm_fw":&#123;</span><br><span class="line">   "global_ruby":"ruby-2.2.3",</span><br><span class="line">   "user":"ubuntu",</span><br><span class="line">   "url":"https://get.rvm.io",</span><br><span class="line">   "flags":"--disable-binary"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考虑到rvm安装的ruby可能会有ssl问题，所以在安装的时候需要添加--no-binray的标志</span></span><br><span class="line"><span class="comment"># line 111 : cookboos/rvm_fw/recipes/default.rb</span></span><br><span class="line">flags = <span class="string">"--verify-downloads 1 <span class="subst">#&#123;node[<span class="string">"rvm_fw"</span>][<span class="string">"flags"</span>]&#125;</span>"</span></span><br><span class="line"><span class="comment"># 如果之后需要安装mysql的话可以天前将mysql的依赖安装上</span></span><br><span class="line"><span class="comment"># line 32 : cookboos/rvm_fw/recipes/default.rb</span></span><br><span class="line">mysql-devel <span class="comment">#添加至rhel的依赖packages</span></span><br><span class="line">libmysqlclient-dev <span class="comment">#添加至debian的依赖packages</span></span><br></pre></td></tr></table></figure>
<h4 id="nginx__u94FE_u63A5"><a href="#nginx__u94FE_u63A5" class="headerlink" title="nginx 链接"></a>nginx <a href="https://supermarket.chef.io/cookbooks/nginx" target="_blank" rel="external">链接</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"run_list":[</span><br><span class="line">	["recipe[nginx]"]</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="yum-epel__u94FE_u63A5"><a href="#yum-epel__u94FE_u63A5" class="headerlink" title="yum-epel 链接"></a>yum-epel <a href="https://github.com/chef-cookbooks/yum-epel" target="_blank" rel="external">链接</a></h4><p>在centos下面，更新yum的时候，可能会遇到<strong>Please verify its path and try again</strong>这个问题，这是由于安装的时候无法访问https地址所导致的，只需要把yum的源改为http的即可。<br>将<code>cookbooks/yum-epel/attributes/epel.rb</code>这个文件中相应的<code>mirrorlist</code>与<code>gpgkey</code>修改为<strong>http</strong>地址即可。</p>
<h4 id="proxcyains"><a href="#proxcyains" class="headerlink" title="proxcyains"></a>proxcyains</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> node[<span class="string">"platform"</span>]</span><br><span class="line"><span class="keyword">when</span> <span class="string">"centos"</span></span><br><span class="line">	package <span class="string">"python-setuptools"</span></span><br><span class="line">	bash <span class="string">'pip'</span> <span class="keyword">do</span></span><br><span class="line">		code <span class="string">"easy_install pip"</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">"ubuntu"</span>, <span class="string">"debian"</span></span><br><span class="line">	package <span class="string">"python-pip"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="constant">SOCKET_STR</span> = <span class="string">"socks5 	127.0.0.1 1080"</span></span><br><span class="line">bash <span class="string">'install proxychains'</span> <span class="keyword">do</span></span><br><span class="line">  	cwd <span class="string">"/home/ubuntu"</span></span><br><span class="line">	code &lt;&lt;-<span class="constant">EOF</span></span><br><span class="line">		pip install shadowsocks</span><br><span class="line">		sudo sslocal -s 地址 -p 端口  -l 本地端口 -k 密码 -t <span class="number">600</span> -m 加密模式 -d start</span><br><span class="line">	    git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/rofl</span>0r/proxychains-ng.git</span><br><span class="line">        cd proxychains-ng</span><br><span class="line">        <span class="comment"># configure and install</span></span><br><span class="line">        ./configure --prefix=<span class="regexp">/usr --sysconfdir=/etc</span></span><br><span class="line">        make</span><br><span class="line">        sudo make install</span><br><span class="line">        sudo make install-config <span class="comment"># installs /etc/proxychains.conf</span></span><br><span class="line">        sudo echo <span class="comment">#&#123;SOCKET_STR&#125; &gt; /etc/proxychains.conf</span></span><br><span class="line">	<span class="constant">EOF</span></span><br><span class="line">	not_if &#123; <span class="constant">::File</span>.exists?(<span class="string">"/etc/proxychains.conf"</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="Chef_DSL__u94FE_u63A5"><a href="#Chef_DSL__u94FE_u63A5" class="headerlink" title="Chef DSL 链接"></a>Chef DSL <a href="https://docs.chef.io" target="_blank" rel="external">链接</a></h2><h4 id="data_bag__u94FE_u63A5"><a href="#data_bag__u94FE_u63A5" class="headerlink" title="data bag 链接"></a>data bag <a href="https://docs.chef.io/data_bags.html" target="_blank" rel="external">链接</a></h4><p>在data_bags中的json数据文件，可以用<code>data_bag_item</code>这个方法获取<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data_bags中有 users/ubuntu.json</span></span><br><span class="line">data_bag(<span class="string">"users"</span>) <span class="comment">#返回一个数组，["ubuntu"]</span></span><br><span class="line">data_bag_item(<span class="string">"users"</span>, <span class="string">"ubuntu"</span>) <span class="comment">#直接返回ubuntu中的hash</span></span><br></pre></td></tr></table></figure></p>
<h4 id="bash__u94FE_u63A5"><a href="#bash__u94FE_u63A5" class="headerlink" title="bash 链接"></a>bash <a href="https://docs.chef.io/resource_bash.html" target="_blank" rel="external">链接</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bash <span class="string">'extract_module'</span> <span class="keyword">do</span></span><br><span class="line">  cwd <span class="constant">::File</span>.dirname(src_filepath)</span><br><span class="line">  code &lt;&lt;-<span class="constant">EOH</span></span><br><span class="line">		bash代码 </span><br><span class="line">  <span class="constant">EOH</span></span><br><span class="line">  user <span class="string">'ubunut'</span> <span class="comment">#哪个用户来执行</span></span><br><span class="line">  not_if &#123; <span class="constant">::File</span>.exists?(extract_path) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="git__u94FE_u63A5"><a href="#git__u94FE_u63A5" class="headerlink" title="git 链接"></a>git <a href="https://docs.chef.io/resource_git.html" target="_blank" rel="external">链接</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="string">"<span class="subst">#&#123;home_directory&#125;</span>/.oh-my-zsh"</span> <span class="keyword">do</span></span><br><span class="line">	repository node[<span class="string">'oh_my_zsh'</span>][<span class="symbol">:repository</span>]</span><br><span class="line">	user user_hash[<span class="symbol">:login</span>]</span><br><span class="line">	reference <span class="string">"master"</span></span><br><span class="line">	action <span class="symbol">:sync</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="template__u94FE_u63A5"><a href="#template__u94FE_u63A5" class="headerlink" title="template 链接"></a>template <a href="https://docs.chef.io/resource_template.html" target="_blank" rel="external">链接</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template <span class="string">"<span class="subst">#&#123;home_directory&#125;</span>/.zshrc"</span> <span class="keyword">do</span></span><br><span class="line">	source <span class="string">"zshrc.erb"</span></span><br><span class="line">	owner user_hash[<span class="symbol">:login</span>]</span><br><span class="line">	mode <span class="string">"644"</span></span><br><span class="line">	action <span class="symbol">:create_if_missing</span></span><br><span class="line">	variables(&#123;</span><br><span class="line">		 <span class="symbol">:user</span> =&gt; user_hash[<span class="symbol">:login</span>],</span><br><span class="line">		 <span class="symbol">:theme</span> =&gt; user_hash[<span class="symbol">:theme</span>] || <span class="string">'robbyrussell'</span>,</span><br><span class="line">		 <span class="symbol">:case_sensitive</span> =&gt; user_hash[<span class="symbol">:case_sensitive</span>] || <span class="keyword">false</span>,</span><br><span class="line">		 <span class="symbol">:plugins</span> =&gt; user_hash[<span class="symbol">:plugins</span>] || <span class="string">%w(git)</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="role_and_environment_u94FE_u63A5_u5730_u5740"><a href="#role_and_environment_u94FE_u63A5_u5730_u5740" class="headerlink" title="role and environment链接地址"></a>role and environment<a href="https://www.digitalocean.com/community/tutorials/how-to-use-roles-and-environments-in-chef-to-control-server-configurations" target="_blank" rel="external">链接地址</a></h4><p>role中可以定义run_list与变量<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"run_list": [</span><br><span class="line">  "role[web_server]"</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>env中可以定义变量<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"chef_environment": "_default",</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>header: Chef Vagrant Docker</p>
<h2 id="title_3A_Chef_Vagrant_Docker"><a href="#title_3A_Chef_Vagrant_Docker" class="headerlink" title="t]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[经济学1]]></title>
    <link href="http://yoursite.com/2016/04/29/read/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    <id>http://yoursite.com/2016/04/29/read/经济学/</id>
    <published>2016-04-29T07:10:10.000Z</published>
    <updated>2016-04-29T07:10:10.000Z</updated>
    <content type="html"><![CDATA[<p>序言<br>在豪宅里对上流社会人士赞扬经济学家多有智慧，就像在街头宣扬政治人物有多忠诚可信——简直是天方夜谭。虽然有种种偏见，但我仍然强烈认为经济学有助于我们了解这个世界。我太太说经济学是我信仰的宗教，而我就是传道人，因此才会对其如此坚信不疑。<br>在研讨会上或各种社交场合，我多次被人要求推荐一本能把经济学讲清楚的书。他们并不想看赞美自由市场的书，或关于政府干预市场之必要的学术论文；他们对政治与政策自有看法，但也有自知之明：承认自己的某些观点或多或少是建立在不可靠或不存在的经济学认知上的。<br>我能够理解这种状况，市场上有太多关于经济学的书，各种稀奇古怪的书都有，但我很难找出一本轻松易读的非教科书，可以让人们完整了解经济学的重要原理。我希望你正在阅读的本书可以传授微观经济学和宏观经济学中有用的知识。本书虽然不足以让你从事经济预测的工作，但绝对能让你更有自信且更有说服力地与人聊起经济话题。<br>我知道你在想什么，你怀疑我在企图推销某种经济政策。如果是这样，那我的政治立场倾向哪一方呢？这种怀疑论是可以理解的，但真相是：如果你怀疑本书的内容会偏向自由派或保守派的经济政策，或是任何政党，那么我可以简短地回答你——不会。专业的经济学家，无论他们的政治立场是什么，都会使用我将在本书中讨论的工具和概念。经济学不是一套答案，而是追寻答案的架构。<br>举例来说，我们可以把经济学的研究分成两大类：微观经济学和宏观经济学。微观经济学是从个人、企业的观点展开研究，宏观经济学则是探讨经济的整体观点。有一个古老但贴切的比喻：宏观经济学就像在看森林，而微观经济学则像看个别的树木。学好经济学的诀窍，就是对森林和树木两者能有一个整体的理解。<br>本书前18章主要让读者对微观经济学有所认识。我会先讨论商品市场、劳动力市场、资本市场如何运作，然后扩大范围，讨论不受约束的市场可能会遇到的问题，例如垄断与缺乏竞争，污染与环境危害，新技术、创新和大型公共基础建设的缺乏，贫穷和收入不均持续或扩大，以及保险市场运作失衡。上述议题都提供了政府介入的潜在理由，但为了避免过于偏激，微观经济学篇的最后一章会提醒读者，在应对这些议题时，民主政府也可能会失败。</p>
<p>本书后半部分会探讨宏观经济学的议题，包括经济增长、失业、通货膨胀、国际贸易、货币政策与财政政策。<br>无论你对市场和政府各自扮演的角色有什么样的看法，我都希望本书能够挑战你的看法。我也希望本书能提供一种语言和一个架构，让你能更清晰地表达自己的信念，在这个时代的经济论战中成为一个更聪明、更成熟的参与者。</p>
<p>微观经济学篇</p>
<p>01　人们卖弄的经济学原理只有50%是正确的<br>经济学家如何思考：对公共政策做出建议的经济学，大多只用到大学入门课程的程度。<br>经济学家通常不是会令人愉快的伙伴。优秀的斯坦福大学医疗经济学 1家维克托·富克斯（Victor Fuchs）总爱说：“有些人在自己睡着时说话，经济学家却在别人睡着时说话。”<br>连经济学大师都有自知之明了，我们为什么还要研究经济学？经济议题是我们生活中很多重要事情的核心，不只包括工作与收入，也包括健康、教育、退休生活及国家未来在全球经济中的地位。如果你在日常沟通中涉及经济议题（随时都在你周遭发生），常需要具备“言之有物”的能力。也许你早已知道这可不容易：当你正客气地聊到最低工资、预算赤字或全民保健时，有人轻率地插话：“可是经济学原理说的是……”而且像跳针似的重复。根据我的经验，人们卖弄的经济学原理只有50%是正确的，但如果你不懂任何经济学常识或知识，就无法反驳，只能点头或耸肩。诚如英国女经济学家琼·罗宾逊（Joan Robinson）曾说的，研究经济学的理由就是“为了避免被经济学家欺骗”。<br>那么，需要懂多少经济学，你才敢参与社交或专业谈话？说出来包你吓一跳：赫伯特·斯汀（Herbert Stein）以美国政府经济学家的身份担任多种职务近50年，他曾说：“对公共政策做出建议的经济学，大多只用到大学入门课程的程度。”在这愤世嫉俗的时代，也许这种说法并不令人惊讶，但重点是，你不必具备哈佛或斯坦福大学经济学终身教授的资格，就可以在大部分的日常经济讨论中坚持看法，你只需要搞懂经济学家的思考模式就够了。<br>我们先从经济学的三个基础问题开始：<br>·社会应该生产什么？<br>·应该如何生产？<br>·谁来消费所生产的东西？</p>
<p>这三个问题是每种经济制度乃至每个社会的基础，无论是资本主义、社会主义还是共产主义社会，或是低收入、中等收入或高收入社会。寻找问题的可能答案时，沿着一条光谱来思考是有帮助的。光谱的一端是政府完全管制：政府机关决定生产什么、如何生产以及谁来消费。在光谱的另一端，你可以想象有一个社会，由个人决定这三个问题的所有答案。当然，在真实世界里，只有极少数的社会处于这两个极端。<br>让我们沿着这条光谱移动，这意味着什么？先不考虑无政府状态这种事，我们从另一端开始，政府在这里只提供市场经济的基础：追诉盗窃、履行合约、提供最低限度的公共基础建设（例如国防），这常被称为“守夜人国家”（night watchman state）。沿着光谱再往前，你可以想象一个社会稍微放宽政府的职责范围，将道路和教育等公共服务纳入。再接下来，有可能是所谓的社会保障网：国家养老金制度（比如社会救济）与医疗保险制度。若是治理范围更广的政府，可能会支持某些产业（如钢铁、农业），甚至拥有其部分股权；政府可能会控制食物或基本消费品（如住宅）的分配。在另一个极端，你可以想象有一个政府分配全部工作、全部住房及全部食物；政府决定了每个人该做什么以及每样东西的价格。<br>经济学不是水晶球<br>政府管制与个人自由之间的大辩论，长久以来是把光谱另一端的人当成傻瓜或怪物。但现代经济学承认每个市场各有优点，也承认在某些情况下市场运作会失灵，政府也许有能力福国利民。现代经济学也承认会有政府干预却仍然运作不畅的情况，换手让市场来试试可能成效会更好。为了像经济学家般思考，你必须务实，并跳出市场与政府之间的意识形态之争。有必要深入了解市场实际上是如何运作的，且在市场运作不佳的情况下改弦更张。<br>搞懂经济学的概念，有助于去除对经济学的一些误解。举例来说，经济学并不是预测未来的水晶球。常有人抱怨：经济学家无法指出经济衰退将何时开始或结束，或股市将何时上涨或下跌。的确，经济学家不是算命师，无法预测可能会影响经济体的消费或生产的每项因素。<br>经济学也与政治立场无关。很多人问我（通常是用客气而暗讽的方式）是不是共和党、民主党、自由党或绿党，但经济学入门课程与政治立场是不相干的。经济学和支持企业或劳工无关，也与民主党员或共和党员无关，经济学是一个思考问题的架构。<br>在进入经济学家的思考模式之前，让我们先来瞧瞧一些说法，大多数经济学家视其为理所当然，但多数非经济学家没想过这些事。</p>
<p>应该严肃看待“权衡取舍”（trade-offs）。思考下面这个问题：假如政府需要增加额外收入，应该向个人还是向企业征税？在公共论述里，这个问题容易被简化成：“你关心哪一方，企业还是人民？”经济学家看到的格局更大：若要向企业增税，企业要如何筹资？企业可以提高卖给消费者的产品价格，可以大砍高级主管的奖金，可以削减股东股利，而这些方法都意味着其实某些人口袋里的钱将变少。我要说的不是应否向企业增税，而是关于企业课税的任何敏感话题，都应该聚焦于实际上哪些人最后要来支付这笔税款。同样，当媒体报道经济议题时，大多用一个人来开始说故事。也许是乔最近被一家经营不善的公司解雇了，或是苏珊的社会补助金被削减了。这种手法称为“在新闻里放一张脸”，它是一种有效的新闻写作方式。但是，当我听乔或苏珊的故事时，我好奇的是有哪些人没有出现在新闻故事里，却以不同方式受到同一议题的影响。如同经济学家所说，“趣闻逸事”并不是“数据”。很多经济取舍都有一个特色：它能帮助某些人，却同时伤害了其他人。经济学家关心的是统计受到伤害或帮助的所有人，而不只是新闻报道里的几张脸孔。<br>自利（self-interest）是组成社会的有效方式。如果你问一些人：“假如这个社会上每个人的行为都十分自私，会发生什么事？”他们大多回答会造成混乱。但很多日常市场交易都仰赖自利，例如货比三家以觅寻最佳价钱、卖房前等待一个好价格等等。经济学始祖亚当·斯密 2（Adam Smith）曾说：“每个人……通常既不打算促进公共利益，也不知道他促进了多少公共利益……他只盘算自己的安全……只盘算自己的获利。而他在这么做的时候，如同很多其他情况，被一只看不见的手引导，去促成一个与他本意无关的目的。虽然与他本意无关，但也不会因此使社会更糟。借由追求自身的利益，他频繁地促进了社会利益，比他认真设想促进社会利益还有效。”<br>看清那只看不见的手<br>“看不见的手”（invisible hand）的概念，就是你在追求自己的利益时，可能也会给别人带来好处。举例来说，借由生产一个更好的商品，你同时改善了使用者的生活。亚当·斯密明白“看不见的手”并非经济体或社会中所有困难的灵丹妙药，但经济学家认为自利是一股强大的力量，当它被适当引导时，就可为社会带来各种好处。</p>
<p>举例来说，若要使人们节约能源，你会怎么做？你可能会举办一场大型公关活动，在电视或校园里宣传。但经济学家很可能会说：“想要人们少用汽油？那就课税吧，这样人们就会减少用量。想要厂商开发更省油的汽车？那就补贴这种技术，这样厂商就会研发，让它成真。想要人们在家使用更多的太阳能？那就租税抵减，这样人们就会投入额外的钱去安装设备。”如果有某个东西你想要少一点，就用租税抑制它；想要多一点，就用补贴鼓励它。基于各种理由，有些个案的抉择可能是聪明或不智的公共政策（本书稍后会详细讨论），但至少它们采用了诱导法，而非忽视问题。<br>所有成本都是机会成本（opportunity cost）。当你做一个选择时，你没有选择的东西就是经济学家所谓的“机会成本”。例如，你若想雇人打扫你的房子，假设每次打扫要花150美元，每个月打扫两次，你可以说打扫房子一年要花3600美元，或打扫房子所花的钱相当于在海边度假一周。真正的成本不是你已经花的钱，而是你放弃的东西。用机会成本来思考，将包含没有用钱来衡量的成本。若你是全职大学生，放弃了可以用来做其他事的时间（包括工作赚钱），这个机会成本就是你上大学的成本之一。<br>价格是由市场决定的，而非生产者。你可能听到过某人说“房东涨了我的租金”，或“石油公司调高了燃料价格”，或“银行调高了我的贷款利率”，但是当汽油价格下跌时，你不会听到任何人说：“噢，这些石油公司真慷慨、真好，让我们这些上班族喘了口气。”利率调低时，人们并不会说：“这些银行真慷慨、真贴心，少向我收利息。”对经济学家来说，这些褒贬都是基于错误的假设的。经济学家从不怀疑房东、石油公司、银行都是贪婪的，而且试图尽其所能赚取最多的钱，他们无时无刻不贪婪。他们提高房租、燃料价格与利率，不是因为想这么做（他们一直都这么做），而是因为市场的供需情况在某种程度上改变了，才促使他们做了这个决定。<br>没有哪个人可以得到想要的每样东西，也没有哪个社会可以得到想要的每样东西，因此，取舍是不可避免的。在人们有各种技能与欲望的现代经济社会中，问题在于如何协调决定生产什么、如何生产以及为谁生产。</p>
<p>02　做自己最适合做的事，就有更好的生产力<br>分工：经济学的一部分，即是了解并分析市场经济每天所协调完成的丰功伟绩。<br>我们现今的世界，即使是看起来简单的消费品，也经常通过一个涉及全球的复杂过程来生产，让我们以铅笔为例。1958年，经济学教育家伦纳德·里德 3（Leonard Read）写了一篇文章，叫作《我，铅笔》（I, Pencil），描述铅笔绝妙的生产过程。木材来自北加利福尼亚州，在那里砍伐、运送和加工。铅是斯里兰卡生产的石墨与密西西比州开采的黏土之混合物，两者的结合过程又是在另一个地点完成的。铅笔外观的黄色涂料是用蓖麻子做成的，需要三个步骤（种植、运送、制成涂料）。支撑橡皮擦的黄铜套管是用锌、铜和镍合成的，它们也必须被开采、运送与提炼。橡皮擦是印度尼西亚的蔬菜油、意大利的浮石与各种黏性化学制品的混合物。想象一下，光是做橡皮擦就需要多少步骤？在这篇文章中，里德宣称世界上没有人可以独自从头包办制作铅笔，而他很可能是对的。</p>
<p>铅笔是可能被随意抛弃的小物件，如果掉了一支在地上，你很可能会不假思索地让它滚到旁边。但是，制作一支铅笔所花费的功夫，仔细想想是令人惊叹的。更令人惊讶的是，社会上的每样东西，几乎都是这种近乎神奇的经济协调的成果。<br>分工为生产商品的厂商与国家经济创造了显著的经济利益。它是如何办到的？<br>分工使工人能聚焦于他们最适合做的事，又使企业能充分利用当地资源。如果你经营冰激凌生意，设计标签与照顾乳牛的人很可能不是同一个。同理，你可以在威斯康星州饲养乳牛，但你需要较温暖的气候来种植甘蔗。从不同地区取得合适的工人和合适的资源，就有更好的生产力。<br>随着不断练习，技术工人通常会变得更有生产力。在汽车制造业，组装线上的工人通常最能想出执行任务的新方法。当需要服务时，无论是找医生还是美发师，我们都想找有经验且专业的人。有些组织也朝专业化发展，聚焦于一个或数个所谓“核心能力”的企业，会比试图做所有事的企业做得更好。<br>分工使企业得以利用规模经济（economics of scale）。“规模经济”是个专有名词，用来说明大厂相对于小厂可以用较低的平均成本来生产。一年生产10，000辆汽车的工厂，可以利用专业化与生产线的优势；而一年只生产100辆汽车的小厂，每辆车的生产成本会高很多。规模经济的概念，有助于这个世界合理化地运作。如果没有规模经济，每个小城镇都将会有很小的工厂，生产非常少量的汽车、冰箱、衣服和其他产品。但是，在一个善用规模经济的世界，一个地区会大量生产一种东西，然后和生产别种东西的其他地区进行贸易。分工不只在一家厂商内部发生，也在一个社会甚至国与国之间发生。举例来说，汽车制造业并非在美国各地均匀分布，而是大部分群聚在从密歇根州到亚拉巴马州这条由北到南的纵贯线上。<br>高收入社会通常比低收入社会有较大规模的分工，富国的老百姓不需要知道电子学、纺织或制乳方面的任何事情，不需要知识或技能来生产消费者需要的每样东西，因为专业化与贸易提供了获得智能手机与切达干酪的管道。相反，你可以购买那些内含各种不同知识的商品，然后借由你自己高度专业的工作来支付这些消费。市场经济就是协调这种精密分工的社会机制。</p>
<p>就如经济学家罗伯特·海尔布罗纳（Robert Heilbroner）所说：“绝大多数美国人不曾种植农作物、捕捉猎物、饲养牲畜、把谷物磨成面粉，甚至把面粉制成面包。面对穿衣或建造自己住家的挑战，他们完全缺乏训练且毫无准备。即使只是修理身边的机器，也得打电话给小区的其他人，请人来修理汽车或水电。很矛盾的是，也许一个国家越富有，人们在独自、无助时的生存能力就越差。”<br>分工能增加企业、国家以及全球经济的产量。就跟工人或企业一样，国家也可以发展专业化的技能与专长。最近的全球贸易有一个重要趋势，有人称之为“价值链分解”（breaking up the value chain），意即更广泛分散地生产零件。所谓“美国车”或“日本车”，在过去曾是有意义的区别，因为当时一辆汽车上的所有零件，几乎都是在美国或日本制造的。时至今日，汽车座套可能是在某个国家做的，弹簧在另一个国家生产，而零件又是在第三个地方制造。这些零件如此频繁地跨国往返移动，以至于这辆车到底是在哪里制造的，可能并没有明确答案。关于国际贸易的利害得失当然是复杂的议题，稍后会深入探讨。但整体而言，每个国家专精于特定产品乃至于特定服务，这样的分工对所有参与者都更有利。<br>仓库管理经济学<br>有个比喻可帮助你了解高度分工的社会。想象一下，整个社会生产的所有商品，可以收纳在一个仓库里。当你生产出某个东西，就把它带到前门入库；当你想买某个东西，就绕到后门取货。分工意味着我们都在生产不同的东西，并把它们送进这个大仓库。结果出现了一个现象：进入仓库的东西跟离开仓库的东西必须是一样的。生产或储存一个没人要用或没有特别功能的商品，是没有意义的；还有一个要避免发生的情况是，很多人在仓库后门等待某个买不到的商品。<br>那么，该如何调节进出仓库的东西呢？很不幸，靠人们的自我管理和自我约束不是一个务实的解决方案。想一想学生宿舍里的冰箱：宿舍里有个共享冰箱，你会把东西放进去，并希望每个人都会把他用过的东西偿还回来，也希望自己在想喝咖啡时总有牛奶可加，但结果每个打开冰箱的人都发现，里面总是塞满酸掉的牛奶和腐坏的比萨。可见，这个方法在学生宿舍是行不通的。在一般社会，一样行不通。<br>社会需要一个制度，制定出人们送进仓库及从中取出的商品的价值，以及可以连接双方的某种方式。如果某人把一个没人要的产品送进仓库，那么它就不会有任何价值；如果某人把东西送进仓库，而仓库里已有很多类似的东西，但只有少数人需要它，那么它的价值就很低。相反，把某个东西送进仓库，若是很多人渴望拥有且几乎买不到它，那么这个产品就有较高的价值。</p>
<p>在市场经济里，送进仓库及从中取出的商品的价值，是由供给与需求决定的。在市场经济里，商品的价值就是它的价格——付一个价钱买商品，这种方式为人们提供了一种动机，使他们需谨慎选择从仓库里取出的东西，且不能取出超过需要的数量。市场经济里的劳动价值，则表现在支付的工资或薪水上，这又提供了动机，使人们愿意提供对别人有价值的商品或服务。价格机制与供需的力量（这是下一章的重点）是市场经济如何协调人们的分工，并且使进出市场经济这个大仓库的商品互相配合的方法。当然，用仓库做比喻有其局限性，它没有涉及公平、贫穷、污染、租税或法规的议题。我将在后面的章节讨论这些议题。<br>理论上，仓库要放进和取出什么东西，可以由市场上人们的互动来决定，或是由政府乃至双方的某种组合来决定。但无论如何，每个社会都必须回答经济学的这三个基本问题：生产什么？如何生产？谁来消费？<br>一个分散化的市场经济，通过分工而运作得如此美妙，提供广泛、实用的产品与服务，这使得生活在高收入国家的人民视其为理所当然。我们有时听闻，在某些没有市场经济的地区，当地政府限量供应大部分商品，店里能够买到的商品的种类和价格都很糟。如果那些人有一天站在富有国家的现代化超市里或大卖场的货架通道上时，他们一定会目瞪口呆。<br>经济学的一部分，即是了解并分析——同时也赞叹——市场经济每天所协调完成的丰功伟绩。</p>
<p>03　市场均衡点并不表示人们对结果感到满意<br>供给与需求：知道每样东西的价格，却不知其价值，这就是经济学家。<br>你应该开始了解一下经济学家是如何看这个世界的：分工导致商品与服务的交换，社会必须以某种方式协调所有的生产与消费。全球所有高收入社会，比如美国、加拿大、日本和西欧国家，主要是通过市场安排来调节它们的经济，且或多或少受到政府的影响。让我们更深入地观察各个市场在整体经济里是如何协调合作的。<br>我们将从一张循环流向图开始，根据家庭和厂商这两个群体之间所经过的三个市场——商品、劳动力与资本——中的商品、劳务与付款流程，来描绘整体经济。</p>
<p>商品市场包含家庭购买的所有商品：食物、衣服、家具、理发服务、计算机、电话服务等等。在商品市场中，产品从生产厂商流向家庭；家庭对这些产品的付款则是流回厂商。用经济学家的术语来说，厂商是产品的供给者，而家庭是产品的需求者。<br>在劳动力市场中，劳动力从家庭（也就是工作者）流向雇用这些人的厂商。举例来说，塔吉特百货公司（Target Corporation）约有35万名员工，公司以工资与员工福利的形式付费，流向工人及其家庭。在这个市场里，供需的角色与商品市场颠倒：厂商需要劳工，而家庭供给劳工。</p>
<p>循环流向图<br>在资本市场里，家庭将金钱作为投资，而成为资本，无论是直接购买股票还是间接把钱存在银行，这些钱又会投资或借给厂商；家庭则收到厂商支付的股利与利息。因此，家庭是资本的供应者，而厂商是需求者（应该注意的是，厂商也可能供应资金，但它们是代表业主或股东投资，也就是说，家庭仍是资本的供给者）。<br>交换价值与使用价值<br>循环流向图显示这三个循环如何通过家庭与厂商运行，以及这三个市场如何成为一个更大的、整合的宏观经济的一部分。稍后我们将研究政府和其他国家如何用这三个市场循环互动，但目前我们先来看家庭与厂商双方，以及它们彼此牵动的三个市场。</p>
<p>三个市场中的第一个是商品市场，其价格从何而来？很多非经济学家在谈到价格时，说价格“太高”或“太低”，其实是把目前的世界和他们心目中的理想世界相比，所以你会听到“护士薪资太低”或“汽油价格太高”这样的话。对经济学家来说，这就像说今天的天气太冷或太热。它只告诉你这个人的某种偏好，但没有说明事情为什么会这样。<br>对非经济学家来说，价格是关于个人价值取向的价值承载（value-laden）。经济学家试图避免这类价值判断，我们称之为“钻石与水的矛盾”（diamond-water paradox）。这个说法出自经济学家始祖亚当·斯密，他在《国富论》里区别了“交换价值”（value in exchange）与“使用价值”（value in use）。钻石有很高的交换价值，如果你有一颗钻石要交易，那么你可以换到很多钱；但钻石没有很高的使用价值，既不能吃，也不能修剪你的篱笆，当作镇纸也很难用，基本上就是无聊的奢侈品。相反，水是生活基本必需品之一，更不用说水的非基本用途，例如蒸汽动力。水有很高的使用价值，但非常便宜。在大部分地方，它免费供应。在正常情况下，它的交换价值相对较低。<br>显然，交换价值与使用价值不一致。当我们决定一个东西的价格时，谈的是哪一种价值呢？当经济学家谈到价格时，指的就是交换价值。一个商品的交换价值与其稀有性有关——商品值多少钱，和多少人想要拥有它有关。钻石价格高，是因为相对于钻石的数量，很多人想拥有它，因而得付出高价。水的价格低，是因为相对于可取得的水的数量，人们不愿为它付太多钱。你可以说某人快渴死了，愿意拿钻石换水，但这不是常态。<br>剧作家奥斯卡·王尔德 4（Oscar Wilde）曾把愤世嫉俗的人定义成“一个知道每样东西的价格，却不知道其价值的人”。这句话用来形容经济学家也很贴切——注重每样东西的价格，却不在乎其内在的使用价值。为了像经济学家般思考价格，关于商品的使用价值，你必须排除心中的预设立场。一旦习惯以后，你就能从容地区别价格和价值。你不必思考价格是否“正确”，或它是否准确反映了你的个人价值观。价格是视世界上的供需互动，即人们愿意且能够取得的状况而定的。<br>我在前面用到“供给”与“需求”这两个专有名词时，其实不是很严谨，但它们实际上有相当特定的意义。当经济学家谈到商品的需求时，指的是商品价格与需求量之间的关系。通常来说，当商品价格上涨时，需求量便有下滑的倾向。<br>替代效应与收入效应<br>这个概念可以很简单地用一张图来呈现。商品数量为横轴，价格为纵轴。代表需求的曲线是向下倾斜的，表示价格越低，需求量越多。</p>
<p>直觉上，这个模型是有意义的，但实际原因是什么？经济学家提出了两个具体理由。其一是“替代效应”（substitution effect），当商品价格越来越高时，人们可能会拿其他商品取而代之。例如，当橙汁价格上涨时，人们会用其他饮料或维生素C来取代；汽油价格上涨时，人们就会少开车，或可能共乘一部车，或买一部更省油的车。<br>另一个理由是“收入效应”（income effect）。当商品价格上涨时，你的收入的购买力降低，因此你不能像过去一样每样东西都买，你会买较少的东西或是同样的东西少买一点。举例来说，如果你每天早上在上班途中喜欢买一杯特调咖啡，当你最爱的这种饮料涨到一杯100美元时，你可能就无法每天都买，因为你的收入对咖啡的购买力降低了。即使价格只上涨一点，也会迫使你少买或以其他产品取代。<br>重要的是，当经济学家用到“需求”与“需求量”这两个专有名词时，别将这两个名词搞混了。“需求量”是指在某一特定价格下，人们想得到该商品的特定数量。例如：2009年，大约有1.2亿袋咖啡是以每磅1.15美元的价格售出的。“需求”则是价格与需求量之间的关系，指的是在任何可能的价格或每种价格下，人们想要该商品的数量是多少。例如：当咖啡价格上涨时，咖啡的需求数量将减少。从这张图来看，需求量是一个点，而需求是一条曲线。</p>
<p>商品或服务的数量<br>这里出现一个吊诡的问题：是什么因素造成了需求波动？答案不是价格，价格会影响的是需求量，但不会使需求关系本身发生变动。当经济学家谈到“需求”变动时，并不是在说一个点向上或向下移动，而是指在同样的总量下，整条需求曲线向上或向下移动。我们谈的是在纵轴的每种特定价格下，所对应的需求量变大或变小。什么因素可以造成这样的变动？</p>
<p>·假如社会整体的收入上升，会怎样？如果每个人都更有钱，那么市场上的大部分商品在每种价格下的需求量都会更多。<br>·假如社会人口激增，会怎样？如果有更多的人需要该商品，则在每种价格下的需求量都会变多。<br>·口味与潮流有什么影响？某些商品畅销与否，是由社会决定的，例如人们消费更多鸡肉、鱼肉，就会少吃牛肉。在这个例子中，在任一特定价格下，鸡肉和鱼肉的需求量上升，牛肉的需求量下降。也就是说，鸡肉和鱼肉的需求上升，牛肉的需求下降。<br>·替代品的价格变动又会有什么影响？在先前的情境中，如果大多数人认为鸡肉是牛肉的最佳替代品，那么当鸡肉价格上涨时，人们的反应会是少买鸡肉、多买牛肉。反之，如果鸡肉跌价，人们就会买更多鸡肉，以致牛肉的需求下降。<br>现在来讨论供给。供给是指商品的供给量与价格之间的关系。当商品价格上涨时，供给量也容易上升，这是因为当价格上涨时，厂商会变得更愿意供给商品。因此，需求曲线向下倾斜，而供给曲线向上倾斜。<br>也许这里头包含了某些直觉，但经济学家试图详述厂商背后的具体理由：首先，当价格上涨时，厂商就会想生产更多商品，以赚取更多利润；再来，若价格上涨幅度够大，就会有新厂商决定生产并加入这个市场。<br>美妙的均衡点<br>就如“需求”与“需求量”经常被搞混一样，人们对“供给”与“供给量”也有类似困惑。供给量是指在某个特定价格下所生产的特定数量，供给是指在每种价格下生产多少数量。供给量是一个点，而供给是一条曲线。<br>这里又有一个奇怪的问题，这次是从供给的角度提出的：什么因素会影响供给？答案和上次一样，不是价格。价格会使供给量改变，但它不会使整条供给曲线发生移动。供给增加时，整个供给关系必须移动，以便在每种特定价格下，供应更多的数量。反之，供给减少时，在每种特定价格下，必须供应更少的数量。能使得供给如此移动的因素，有哪些例子？<br>·假如技术改变，会怎样？更便宜的生产方式，可能意味着在每种特定价格下，可以供给更多数量的产品。</p>
<p>·假如生产受到天气影响，会怎样？这个因素对农业尤其重要。较佳的天气意味着较高的收获量，这表示在每种特定价格下，商品供给量较多；较差的天气意味着较低的收获量，这表示在每种特定价格下，商品供给量较少。<br>·要素价格（input price，或称投入价格）改变，会有什么影响？要素价格是制造商品所投入的成本。如果厂商使用很多油或很多钢来制造产品，当油或钢的价格上涨时，那么在每种特定价格下，商品供给量将会下降。<br>现在，我们准备探讨供给与需求如何互动。让我们思考一个基本商品，例如比萨，首先考虑的是低价的情况。在低价时，供给量相对少，因为没有人想生产该商品，但需求量可能是相当高的，因为很多人想以这个低价买很多比萨。当比萨价格上涨一些时，餐厅就会生产更多，供给量会增加；但一旦价格上涨，使得人们较不愿购买，需求量就会下降。当供给量上升且需求量下降时，在某个点上，比萨的需求量会等于供给量，这个点就称为“均衡点”。<br>均衡点在实务上是什么意思？如果商品的价格高于均衡点，那么该商品的供给量将超出需求量，东西将开始滞销；为了清除库存，卖家必须开始降价，直到人们愿意购买。于是，价格开始朝这个均衡点下跌，使供给量与需求量相等。均衡点这个位置有其特定的经济意义：价格与数量是有效率的，没有造成浪费。就如同一部有效率的机器，没有多余的动作或额外的零件，一个有效率的市场也没有多余的产品或未被满足的需求。<br>如果商品价格落在均衡点下方，那么需求量将超出供给量。此时，人们往往排队抢购该商品。供给者发现此现象，便会开始提高价格，结果导致需求量下降，供给量开始上升，直到这两种数量再次相等，且价格达到均衡点。<br>均衡点是市场经济的倾向，但这不是说市场总是处于均衡状态。市场达到均衡状态需要多长时间？市场通常多靠近均衡点？市场价格何时或是否会冲过均衡点而需要拉回？这些都是存在已久的争论。在21世纪最初10年中期，市场钟摆开始摆到另一端之前，美国房价明显转向，有好几年时间都在均衡点上方。但长期来看，市场通常会走向均衡。<br>需求或供给的任何改变（记住，是整条曲线的改变），都将使均衡点发生位移。以牛肉市场为例，如果消费者的收入上升，那么牛肉的需求也会上升，结果就变成市场上新的均衡点会落在较高的价格和销售量上。现在想象相反的情况，假如牛暴发疫情，导致牛肉供给下降，结果均衡点就会落在较低的销售量与较高的价格上。很多经济学入门课程都会探讨上述需求与供给发生位移的结果。</p>
<p>商品与案例或许不同，但基本模式是一样的：考虑需求，考虑供给；从均衡点出发，思考需求或供给位移时会发生什么，思考新的均衡点会出现什么样的新价格与数量。供给与需求是一个架构，用来讨论市场如何决定价格和数量，以及这些市场价格与数量为什么会改变。了解了这一点，你就有经济学的基础了。<br>在现实世界里，均衡点意味着只有这个需求量与供给量是平衡的，但并不表示人们对这个结果感到满意。买家总是会说：“我觉得我买贵了。”而卖家总会说：“居然卖得这么便宜。”有时，买家或卖家会向政府游说，改变某个商品的价格，即使该商品的市场处于或靠近均衡点。在下一章，我们将谈到这么做会产生的后果。<br>对于供需模型，常听到这样的抱怨：“人们才不会这么思考！”在某种程度上，这是真的，大部分人不会使用这些专有名词，或是在脑海里画曲线图。但只要买家以最低的可能价格寻找他们偏好的东西，把他们的欲望、财务状况以及可能的替代品纳入考虑范围，然后只要厂商调整生产以响应价格的变化，供需模型就会很合理地运作。<br>在深度的哲学意义上，供给与需求的真相也许不总是可爱的、在道德上吸引人的或令人向往的，但它是一个有用的工具、一种有力且准确的方式，以帮助我们描述和理解价格为什么处在那个水平，以及价格可能上升或下降的理由。供需模型可以用来描述世界各地、历史上各个不同时代以及从铅笔到比萨的各式各样商品的市场。</p>
<p>04　在任何情况下都必须有所取舍<br>价格下限与价格上限：价格管制的问题在于是否能达成目标，或适得其反？<br>如果你曾想在纽约或旧金山租房子，就会知道价格高得吓人。房地产的需求是如此强劲，哪怕再不起眼的房子也可以开出高价。当市场决定的价格对很多人来说似乎高得不合理时，会发生什么事？换个角度看，曾有几年气候非常好，农作物大丰收，以致卖价很低。当市场决定的价格对很多人来说似乎异常低时，会发生什么事？供给与需求是不可避免的力量，但不是供给与需求的所有结果都是人们想要的。即使是最狂热的自由市场经济学家，也不同意我们对供需的结果没有任何作为。毫无疑问，政府有可能干预并影响特定市场的商品价格。价格管制的问题在于所使用的方法是否能达成目标，或可能适得其反？</p>
<p>对市场价格与数量不满意是不可能避免的。供给者总是会说，如果钱多一点，他们可以创造新工作、建立新工厂、雇用更多人。需求者总抱怨，以他们的收入，不易维持生活水平。双方都要诉诸公平。企业会说自己想要一个“公平”的价格，其实想要的是更高的价格。人们说房租、电力或汽油的价格“不公平”，是认为价格应该更低。如果有一个团体在政治上足够强大，甚至可以促使政府改变法律以保障其优势。<br>价格上限造成供不应求<br>当政治人物被说服制定法律，将产品价格维持在低位时，他们就创造了价格上限（price ceiling）：产品价格的最大值。美国的房租管制法（Rent-control Laws）是价格上限的一个例子，房租管制的政治理论在于栖身之处是一种需要（need）而非想要（want），而没有管制的住房均衡点会太高，让很多民众无法负担。<br>但价格上限并无法阻止供给与需求的运作力量，事实上，这股力量使我们得以预测设定价格上限的结果。如果你设定的价格上限低于原本的均衡价，那么想购买的消费者的反应就会很热烈，但该商品的供给者则不然。需求量上升，供给量下降，结果就是供不应求。<br>再以租房为例。美国的房租管制在很多时期和很多地方都导致住房短缺，包括第二次世界大战以来，美国200多个采用房租管制法的城市。其中一个结果是，在房租管制法严格执行的城市，租房者可能无法以法定价格找到公寓，有太多想租房者在找寻供给非常少的公寓。当房东无法以提高租金来应付上涨的成本时，可能会吝于修缮房屋，因为他们知道需求很大，潜在客户群不会太挑剔，导致出租房屋的质量降低。或者房东可能会变更出租公寓为各户有独立产权的套房，转租为卖，完全退出租房市场。接着，新建的出租公寓可能会减少，房东也可能以各种费用的名义，向房客索取额外金钱，并想方设法扣住其刚搬进去时支付的“押金”。价格上限还造就了灰色地带，用便宜价格就得到商品的人，会把商品转售给愿意支付更多钱的人。在这种情况下，二房东可以把有房租管制的公寓，以较不受控制的价格分租出去。最后，消费者虽然住进了有价格管制的公寓，但也妨碍了其他人（其中某些人可能更需要低价公寓）找到可出租的公寓。<br>政府可以抑制价格，但是在一个自由社会中，无法迫使卖家进行大量生产，而且各种规避价格上限的方式也不易管理。<br>价格下限导致供过于求</p>
<p>再来考虑相反的情况。当供给商品的这些人有政治影响力时，有时可以使政府设定一个最低价格或价格下限（price floor）。例如在美国种植某种作物的农夫，法律对该农作物提供了最低保证价格（guaranteed minimum price）。主张设定农业价格下限的理由是，国家需要稳定且扩大食物供给来源，为此需确保农夫继续耕作。但均衡价格有时实在“太低”，所以需要法律来保障农夫享有“公平价格”（注意引号中的价值判断字眼）。无论政治意图为何，供给与需求的力量是不可避免的，设定价格下限会产生后续影响。<br>如果你设定的价格在均衡点上方，供给者会很乐见，供给量就会变多；然而，需求量会因此变少，结果造成供给过剩：供给量超出需求量。政府可能会采取行动，通过配额（限制生产者可销售的数量）避免生产过剩，或通过购买来储存过剩的产品。在美国历史上，生产过剩的农产品有时会被运送到低收入国家，作为食物援助。<br>最后，设定农产品价格下限所得到的反效果，其影响远比生产过剩更大。因为有价格下限，农田生产的农作物变得更值钱了，农田价格连带上升，地主会受益，但承租农田的农夫必须付出更高的租金，因而抵消了价格下限所得到的好处。农业价格下限也可能助长使用边际土地 5（marginal land），或施用有毒农药以增加作物产量，因此造成环境污染。将生产过剩的食物运送至他国作为援助，纾解饥荒固然是好事。然而，一旦受援助国当地的农产品无法与免费食物竞争时，食物援助最后也可能伤害受援助国的农业经济。<br>此外，价格管制会导致无法辨识出到底谁才是需要帮助的人。价格管制改变了每个人所面对的价格，某些需要帮助的人会接受这个价格，但更多不需要帮助的人也受到影响。<br>假如政府试图帮助每个人，让所有生产者都享有价格下限，所有消费者都享有价格上限，结果会怎样？实际上，这大致就是苏联政府尝试管理经济的方式。20世纪80年代，苏联中央政府约有1/4的预算用于补贴，因为同时要补助生产者和消费者，最后苏联为此付出的代价包括物资短缺、生产过剩、黑市等种种问题，就如同其书记尼基塔·赫鲁晓夫（Nikita Khrushchev）的名言：“经济学并不是挺尊重人们期望的一门科目。”<br>关于这一点，有些人不客气地指责经济学家别有居心：“你们说自己对各种经济政策抱持开放态度，实际上听起来就是你们制定了一项政策，这项政策就是不干预。而反复出现的价格下限、价格上限与均衡点，只是宿命论与无作为的借口。”<br>价格管制会掩盖成本</p>
<p>然而，批评一项政策不表示不接受其他政策。我们先从房租管制的一些替代方案来思考。方案之一是借由提高福利支出或提供住宅优惠券，直接把钱给穷人。这种需求面的帮助，比价格管制更精准。关于供给面，政府可以借由补助低成本住宅的建设或调整地方法规，鼓励兴建更多低成本住宅，两者都会使人们买得起的住宅出现更高的均衡量，而不会造成短缺或过剩。<br>至于农业补贴呢？想象一下，政策目标是保障中小型营运的农民有像样的生活水平。若不采取价格下限方式，政府还可以通过食物券、学校午餐计划等方式补助消费者食物。像这样刺激需求，能帮助农民卖掉更多产品。关于供给面，对于农地小于某个规模的农民，政府可以提供补助，有针对性地协助这些穷困的人。这两种方式可以避免农产品囤积在国内，或是把过剩产品倾销到其他发展中国家。<br>讽刺的是，价格下限与上限，在学理上并不是最好的政策工具，却是官方最倾向采取的方案。经济学家自认为在任何情况下都必须有所取舍，而政客常喜欢隐瞒政策的真实成本。价格下限与上限看起来像是零成本的政策，因为政府不需要增加支出或减税。事实上，价格管制会掩盖成本。<br>经济学家还信奉要把所有成本纳入考虑范围，不单是预算成本，也要考虑机会成本。举例来说，房租管制使某些房客受益，因为住房成本降低了，但其他人因为找不到房子住而受害，某些建筑商也会因为无法转手获利而蒙受损失。同理，当政府将农作物价格维持在高位时，生产这些作物的农民会受益，但贫穷与中产阶级家庭要用较高的价格，才能买到牛奶或面包等民生必需品。再者，低收入国家的农民可能极端穷困，因为高度补贴国的食物援助迫使他们离开粮食供应市场。在这些情况下，短缺或过剩所造成的浪费，在政府的资产负债表中虽然并没有明确的税收或补贴，但其实是真实的成本。<br>经济学这门学科并非对穷人有敌意，也不会宣誓绝不干预自由市场。经济学家的政治理念不同，因此会争论某些干预政策是否恰当。但不管政治理念如何，他们的共同点都是：绝对尊重任何政策的各种取舍。</p>
<p>05　增加的生产成本可以转嫁给消费者吗？<br>弹性：思考需求与供给有无“弹性”这个基本观念，就可对市场做出有凭有据的预测。</p>
<p>抽烟是一个很花钱的习惯。美国香烟税每包约1美元，还有各州香烟税平均每包1.45美元。课这些税的目的是抑制抽烟吗？还是增加政府收入？要回答这个问题，我们必须先思考香烟税如何影响香烟的需求量，也就是经济学家所说的“弹性”（elasticity）。许多公共政策以及价格策略的议题，都依赖于了解弹性这个概念。<br>举例来说，假如一包烟的价格涨了10%，需求量是下跌50%还是2%？因为需求弹性的定义是需求量变动的百分比除以价格变动的百分比，所以在这两个状况中，需求的价格弹性会是5或0.2（也就是50/10或2/10）。同样，我们可以假设，为了响应价格上涨的10%，市场上香烟的供给量会上升40%或仅5%。供给弹性的定义是供给量变动的百分比除以价格变动的百分比，所以在这里，供给的价格弹性会是4或0.5（也就是40/10或5/10）。<br>把弹性分成三大类来思考是有帮助的，这个方法适用于需求弹性与供给弹性。<br>需求无弹性的商品，弹性小于1。在需求无弹性的情况下，需求量变动的百分比会小于价格变动的百分比。例如，价格上涨10%可能会使需求量下跌5%。高度无弹性的商品，往往很难用较便宜的商品来取代。如果你感冒了，可以选择非知名品牌的感冒药，但糖尿病患者不能因胰岛素价格上涨而减少使用。胰岛素的需求是无弹性的。对瘾君子来说，香烟的需求也是无弹性的。<br>需求有弹性的商品，弹性大于1。根据公式，需求量变动的百分比会大于价格变动的百分比。在这里，价格上涨10%可能会使需求量下跌20%或30%。需求量有高度的伸展性，它可以大幅移动以对应价格的变动。典型的例子是橙汁，如果橙汁价格上涨，人们可以随便用其他饮料与维生素C取代，所以橙汁的需求是有弹性的。对没有真正烟瘾的青少年来说，香烟的需求也可能是有弹性的。<br>需求单一弹性的商品，弹性等于1。当商品需求量变动的百分比刚好等于价格变动的百分比时，我们说它是单一弹性（unitary elasticity）。这表示如果价格上升10%，需求量也会下降10%。<br>供给无弹性的商品，弹性小于1。在这里，供给量变动的百分比会小于价格变动的百分比，例如价格上涨10%可能会使供给量增加5%。完全无供给弹性的经典例子是毕加索的画作——无论价格涨多少，供给量都没办法更多。一般而言，厂商很难快速扩大原料供应与增加熟练劳工的任何产业，其所生产的商品往往是无供给弹性的。</p>
<p>供给有弹性的商品，弹性大于1。在这种情况下，供给量变动的百分比会大于价格变动的百分比，所以价格上涨10%可能会使供给量增加20%。也许是因为有剩余产能，厂商很容易快速增加产量。<br>供给单一弹性的商品，弹性等于1。在这种情况下，供给量变动的百分比会等于价格变动的百分比，所以价格上涨10%会使供给量增加10%。<br>谁的弹性比较大？<br>为什么弹性是用价格与数量变动的百分比来计算的？这个方法的主要优点是可以用来比较各种不同的市场，其商品可能是以不同度量衡单位计数，或可能是以不同货币计价。例如，想比较美国和日本汽油的需求弹性，借由百分比，就可以不必考虑汇率变动或英制与公制度量衡单位的复杂换算。我们可以比较汽油、牛肉制品以及美发服务的需求弹性，而不必考虑商品数量的度量衡单位。<br>知道需求或供给有无弹性或是否为单一弹性后，在实务上可以广泛应用于价格设定，以及市场如何应对需求与供给的位移。以下有些例子：<br>若需求无弹性，提高价格会带来更多的营收；若需求有弹性，则否。想象有一个乐团在巡演，预计在有15，000个座位的室内体育场演出。为了简化本例，假设该乐团的所有收入仅来自门票销售，且相关成本如旅费、住宿与设备等固定成本，无论观众多少都是相同的，同时假设所有门票都是同样的价格。乐团知道如果提高门票价格，卖出的门票就会变少。现在，乐团必须决定门票价格要高一点还是低一点，才能使营收（也就是门票价格乘以门票销售量）最大化。<br>假如这是一个普通流行乐团，不是乐迷被“秒杀”的乐团，乐迷对它的需求是有弹性的，只要价格下降某个百分比，就可能导致数量增加更大的百分比，因而提高整体营收，那么就该考虑降价。但是，对预期门票会销售一空的超级乐团来说，需求可能是无弹性的，有些粉丝会不计代价抢购门票。在这种情况下，乐团就可以有效地提高票价，其需求量与销售量顶多只会稍微减少。如果你是个乐迷，你可能已注意到过去10年或15年，最红的乐团就是这么做的。<br>当然，在现实世界中，这个问题更复杂。除了不同座位区有不同票价，促销、赠品、VIP入场证、T恤衫销售甚至是黄牛票都会使这个问题更复杂。关键是，任何乐团或厂商在设定价格时，都不应该只想着抬高价格，而应考虑其产品的需求弹性，可以用稍高或稍低的价格来试验，看看客户反应如何。</p>
<p>短期而言，需求与供给常常是无弹性的；长期而言，则是有弹性的。看看汽油的例子，若汽油涨价了，你该怎么办？短期而言，你会付钱，因为你的选择有限，你能做的就是把一些出差的行程合并成单趟旅程、多走一点路，或短距离就骑自行车等。多数情况下，你的需求在短期内是无弹性的。长期而言，如果汽油价格维持高位，你可能会考虑买更省油的车，或在办公室发起拼车，甚至改骑自行车上班；你可能会开始考虑搬到离上班地点近的地方，或是找一份离家近的工作。<br>在供给方面，商品与服务的供给者发现，花长一点时间比只花短短几个月更容易扩大生产规模。短期来看，供给量对价格可能相当没弹性，但随着时间的拉长，当厂商有机会调整时，供给的确可以变得相当有弹性。弹性解释了为什么一个经济体的价格短期内容易暴涨暴跌，因为需求与供给的弹性都不大，但长期来看，供需的数量都会调整，价格就会变得更稳定（尽管如此，价格并非固定不动）。<br>当需求无弹性时，增加的生产成本往往可以转嫁给消费者；当需求有弹性时，增加的成本就会由生产者承担。如果能源价格上涨，我们知道所有需要能源来生产的商品（基本上，差不多是每样东西），都将有较高的价格和较低的产量。但大部分结果都是涨价吗？换句话说，生产者可以把成本转嫁吗？或者大部分结果都是产量变少，生产者必须自己承担成本吗？让我们来看一些例子。<br>咖啡店使用咖啡豆，但无法控制咖啡的全球市场价格。如果咖啡的成本增加，它们可以涨价把成本转嫁给消费者吗？咖啡的需求有没有弹性？想想，顾客可以用较便宜的产品，例如茶，来解瘾吗？或者顾客可以省去咖啡师的成本，自己在家煮咖啡以节省开销吗？很不幸，对咖啡店来说，这两个问题的答案都是“yes”（是的）。因此，这些咖啡的需求是有弹性的，当咖啡价格上涨时，成本只能小幅转嫁给消费者。<br>弹性概念的延伸<br>回到本章开头的例子：提高香烟税，会有什么结果？税就像原料成本，是一项投入成本。税是当生产者制造商品时，政府向其索取的一个价格。在某种程度上，抽烟是一个选择，它与多加点奶泡的双份卡布奇诺一样，都不是必需品。但对很多人来说，抽烟会上瘾，而且替代品很少。我们预期这群人对香烟的需求是无弹性的，而证据显示，香烟价格增加10%，只会使消费的香烟数量减少3%。因此，如果向香烟业者增税，该公司可通过提高价格的方式，把大部分的税转嫁给消费者。</p>
<p>政府实施禁毒法，提供了另一个应用案例。禁止毒品的法律，提高了生产与销售毒品的成本。因此，主张毒品合法化的很多论点，基本上都是从弹性的角度来切入的。有人说严格执法会削减毒品用量，因为需求是有弹性的，所以较高的价格和较严厉的惩罚能抑制吸毒人数。也有人说严格执法只会使毒品商赚更多钱，因为毒瘾使得需求无弹性，严格执法会推升市场价格，但毒品商可以把成本转嫁给消费者。由于毒品市场是违法的，因此，要搜集足够的证据来支持上述任一论点都有难度。弹性的概念，可以延伸适用于很多情况。例如，削减退休给付是否会鼓励年长者继续上班，不退休？根据弹性的概念，这个问题是：退休给付变动达到某个百分比，会使工作时长变动多少百分比？另外，削减所得税会鼓励人们多工作吗？这些都是弹性的问题，关乎数量如何响应价格的变化。<br>有时美国政府会提议对储蓄提供减税优惠，让人们借由个人退休金账户、401（k） 6计划或其他方式来增加储蓄金额。这样会鼓励储蓄吗？根据弹性的观点，这个问题是：报酬率增加某个百分比，会使储蓄增加多少个百分比？资本的供给曲线在实证上是有争议的，但至少短期内而言，储蓄对于利率与报酬率是相当无弹性的。讲明白一点，对储蓄提供减税优惠，会使人们把既有的储蓄搬到免税账户，至少在最近几十年，似乎未见整体储蓄水平大幅提高。<br>许多关于政策或策略的声明，号称对价格变动会有很大反应，也许是某商品的需求量（如香烟税）、某商品的供给量（如替代能源补贴）、工作时长或储蓄金额会发生明显反应。无论是酒精的罪孽税（sin tax） 7还是购买油电混合动力车的动机，当你不觉得自己有办法翻遍旧经济期刊，搜寻有关弹性的统计值时，试图猜测任何特定政策的结果，都是自讨苦吃。但如果你去思考需求与供给在任何特定情况下有无弹性这个基本概念，那么你将可做出有凭有据的预测。</p>
<p>06　你的薪水最终由你的产出决定<br>劳动力市场与工资：在每个人才市场，工资的均衡点是由该市场的劳动力供给量相对于劳动力需求量而决定的。</p>
<p>经济行为通常指的是所生产的商品或服务，但也可以说是每个人早上起床上班后所发生的事情。供给与需求，一如它们在商品市场中扮演的角色，也是了解劳动力市场的关键。在劳动力市场中，我们不谈商品价格，谈的是每个工作者的工资或薪酬。就如同厂商生产的很多商品与服务有各自的市场一样，劳动力市场也有很多不同的市场，比如护士市场、消防员市场、计算机程序设计员市场等。两者有一个主要差异：在商品市场，企业是供给者，家庭和个人是需求者；在劳动力市场，家庭和个人是供给者，企业是需求者。<br>劳动力需求，是工资或薪酬与雇主所需工作数量之间的关系。高工资容易使企业减少对劳工数量的需求，就如同较高的价格容易使消费者需求减少。凭直觉，也能明白这一点。厂商想赚钱，如果劳动力成本增加，就会想裁员。你现在可能已经想到了，工资增加所减少的劳工需求量，取决于劳动力需求的弹性。<br>劳动力需求在短期内通常相当无弹性，但是长期来看，当厂商有机会整顿生产时，劳动力需求就会有更大的弹性。例如，厂商可能拥有新设备或新技术，如果有时间与动机去施行，就可以减少员工人数。<br>因此，回到我们的问题上：是什么因素使劳动力需求移动？答案不是“工资”。工资改变了劳动力需求量而非整条需求曲线。在每种可能支付的工资下，什么因素可以改变劳动力需求？<br>产出（也就是不同的商品与服务）的需求变动，会改变劳动力需求。如果没有人去听音乐会，而且交响乐团解散，一位受正统训练的音乐家就不容易找到工作。如果一个城市的大部分消费者都开美国车，一个专门修理德国车的技师的生意就会清淡。诸如此类的例子还有很多。<br>过去数个世纪，工人害怕新技术会减少对他们劳动力的需求且压低他们的工资。历史数据显示，虽然新技术已经使某些产业与工作被淘汰，但也创造了新的产业与工作。此外，运用这些新技术，能使劳工更有生产力，享有更高的工资。<br>厂商雇用工人的意愿，最终取决于生产力，即劳工生产多少东西。如果工人的生产力与工资有落差，厂商就不会雇用他们。如果工人的生产力高于工资甚多，那么在市场经济里，其他厂商就会用较高的工资挖墙脚。一般而言，工资将随着时间，由劳工生产的商品价值来决定。</p>
<p>现在，让我们来思考劳动力供给。再次重申，供给是一种关系，在这里是工资与劳动力供给量之间的关系。高工资通常意味着较高的劳动力供给量，因为较高的工资会使工作更有吸引力。工资增加会使劳动力供给量增加多少，同样取决于“弹性”。<br>对很多全职工作者（每周投入工作40小时）而言，劳动力供给是相当无弹性的。他们的工资增加10%，工作时长的增加却少于10%（很多全职工作者没有能力调整其工作时长，所以不容易估计他们如何看待工资上涨）。然而，对兼职者或是家里第二份薪水来源者而言，劳动力供给是较有弹性的，工资增加10%，通常会导致工作时长的增加超过10%。<br>是什么因素使劳动力供给曲线移动？劳动力供给曲线的移动，可能是人口增减等缘故——有了更多可以工作的人，在特定工资水平下即可供应更多劳工，反之亦然。人口结构变化也会改变劳动力供给，例如在一个人口老化的社会，离开劳动的人会多于加入的人，即劳动供给力下降。社会趋势也会影响劳动力供给，例如预期什么人应该去工作。20世纪70年代，很多原本是家庭主妇的美国妇女决定走出家庭，工作赚钱，改变了特定工资水平下的劳动力供给。<br>不同种类的劳动力市场需要不同的技能与特质，因而区分了护士市场、美发师市场、工程师市场等等。在每个人才市场，工资的均衡点是由该市场的劳动力供给量相对于劳动力需求量而决定的。懂得了这个劳动力供需架构，让我们仔细思考几个常见的劳动力市场议题：最低工资（minimum wage）、工会、歧视，以及员工福利。<br>最低工资是一刀两刃<br>20世纪30年代以来，当美国首次采用全国性最低工资时，就不断有是否提高最低工资以及提高多少的争论。最低工资是价格下限的一种形式，法律禁止雇主付给劳工的钱低于这个工资。懂得价格下限的原理后，我们预期全国的最低工资会导致劳动力需求减少。也就是说，由于较高的最低工资，会有较少的雇主愿意提供工作给无技能或低技能劳工；同时，会有更多人愿意供给这种劳动力。的确，有些证据显示，在美国，最低工资提高10%，会导致低技能工人的失业率增加1%或2%。但这种影响相当小，另有其他研究显示，较高的最低工资对就业的效果并没有显著影响。这个例子说明，美国的最低工资在最近几十年并没有比均衡工资高多少。<br>然而，有关最低工资的公共政策是复杂的，因为它牵涉到取舍，所以会使倡议提高最低工资的人与反对者都不满意。</p>
<p>反对提高最低工资的人，可以仔细思索这个说法：假设最低工资提高20%，会导致低技能工人的工作减少4%（一些证据显示），但这也暗示着提高最低工资会使96%的低技能工人加薪。很多低技能工人并非全职，一年到头都有事情可做，所以，或许这些工人的全年工作时长减少4%，但他们有工作的时长可加薪20%。在这个情境下，即使最低工资使得职缺数量或工作时长减少，提高工资也仍可能改善绝大多数低技能工人的收入，因为他们可以在较高的工资水平下，工作较短的时间。<br>但这个争论有另一面的看法。对失业者而言，短期成本是相当大的，微调工资的好处相对较小；比起加薪者得到的小惠，对由于提高最低工资而丢掉工作的少数人而言，损失更严重。失业率变高这种成本，不太可能平均分布于整个社会，反而可能集中在经济处于劣势的区域。此外，低技能工作通常是入门工作，一旦低技能工作变少，工人会变得更难踏上就业的阶梯。因此，对于大多数有工作的低技能工人来说，提高最低工资可能会为其提供不错的利益，但对找不到工作的人来说，会使其蒙受巨大的经济损失。<br>价格下限有其替代方案，因为它们是由供需力量运作的，所以经济学家经常倾向赞成这类替代方案。例如，如果政府想提高低技能工人的工资，可以投资于技能训练计划。这可让部分工人转移到更有技术性（薪资更高）的职位，且会减少低技能劳工的供给，从而提高他们的工资。政府也可以补贴雇用低技能工人的厂商，使厂商能给付较高的工资；或者通过提供减税优惠给收入低于基本门槛的人，直接补贴低技术工人的工资，这项政策可增加工人收入，而不会带给雇主任何财务负担。<br>工会的存在不是坏事<br>工会是劳动力市场中的另一个争议点，人们往往对工会带有强烈的情绪反应。这里，我们试图理性观察工会是如何在社会中运作的。工会提供两个基本功能。第一，找机会通过劳动契约的协商提高会员工资，并以罢工威胁为后盾。如果工会在谈判时态度非常强硬，雇主可能会慢慢找到削减工会势力的方法，包括使用节省劳力的机器、分包及外包给非工会成员等。因此，激进的工会的规模通常会随着时间而缩减，在某种程度上，这就是发生在美国钢铁业与汽车业工会的故事。<br>工会的第二个功能是培养一个更好的、更具生产力的劳动力，这可以通过一些显而易见的手段来达成，例如学徒制，以及一些更细腻的方式，例如给工人一种社群的感觉，并关心他们的工作状况。工会也充当工人的发声筒，向雇主传达其顾虑及需要。工会的这两个功能似乎是对立的，就像是乐意合作的杰基尔博士与激进好斗的海德 8，但大部分工会在不同时期都曾扮演过其中一个角色。</p>
<p>如果你问工会的存在对经济是“好”还是“坏”，那就过度简化了这个问题，工会显然是可以和高收入、市场导向的经济体共存的。举例来说，相较于美国，很多欧洲国家的工会化程度非常高。美国加入工会的劳动力百分比，从20世纪50年代的大约33%掉到21世纪最初10年的13%左右。然而，在英国与意大利，大约有40%的劳动力加入工会。在斯堪的纳维亚半岛的国家，工会化程度接近70%或80%。虽然这些国家有它们的经济问题，就像每个经济体一样，但不可否认的是，以世界标准而言，它们的生活水平相当高。当工会规模缩减时，我们必须质疑一个为劳工利益发言的重要管道是否被消音了。<br>歧视：差别待遇<br>劳动力市场有另一个问题，比工会更可能引发热烈讨论，那就是歧视。用经济术语来说，劳动力市场的歧视，发生在一个人找工作被拒绝或是比同样工作者薪资低的时候，理由是这个人的性别、种族、年龄、宗教或某些因素。在供需架构中，我们可能会说，由于受到歧视，在某些劳动力市场里，对于特定族群的需求是较低的。然而，经济学家经常表示，歧视的原因有各种可能性，而且在某些情况下，市场会跟歧视对抗。<br>为便于讨论，我们假设有一群工作者领较低的薪资，理由是实际的生产力较低。也许这群工作者没有接受适当的学校教育，或者社会抑制这群人在初期从事某种职业。付给这些不称职的工作者低薪有点像是歧视，但在这个案例中，歧视不是发生在劳动力市场，而是发生在年轻人刚进入社会的阶段。<br>现在，我们来考虑两组工作者，他们有同样的生产力，但一些雇主希望对其中一组采取差别待遇，给他们较低的薪资。另一方面，假如工作者的薪资低于其生产力，他们对无差别待遇的雇主来说就有吸引力，雇主可以提供更好的工资给这些有才干的员工。在这种情况下，市场倾向于对抗差别待遇，而工作者与新雇主都从雇主无差别待遇的惯例中受益。<br>然而，在某些情境下，市场可以强化差别待遇。如果客户是有偏见的，不想和某个种族的工作者打交道，或者不认为某个性别的工作者应该做这份工作，他们可能会把生意给认同其偏见的厂商。又或许某些工作者是有偏见的，如果他们被迫和一群不喜欢的人工作，士气与生产力就会降低。在上述情况中，即使管理阶层本身不带偏见，追求获利最大化的厂商也会有经济上的动机，在雇工时采取差别待遇，以使生产力与销售额都维持在高档位。</p>
<p>最后，我们来思考另一种歧视：工作者有同样的技能，但在任不同职务时会有不同薪资。这种性别歧视，有时候称作“粉领聚集区”。女人通常被安排做某种较没有机会升迁或领高薪的工作，而男人则被安排在需要类似技能，但有更多升迁机会和高薪潜力的工作。在这种思维下，我们在实习期与低阶职位时，就需要处理差别待遇的情况，以确保所有族群都有同样的机会，发展适合他们才能的职业生涯。<br>总之，劳动歧视不是单一现象。它可以发生在不同时间点，在不同市场由不同角色造成，它可以反映不同诱因。歧视显然一直存在于美国社会，但现阶段把大部分责任归于雇主，并不准确也无济于事。你必须在歧视可能发生的任何地方，找到它们的源头。<br>最后，我们已经就工资方面谈过劳动力价格（意即金钱），但在现代的劳动力市场，劳动报酬通常是工资与福利的组合。员工喜欢福利，他们把部分的财务责任（例如医疗照护、退休储蓄）推到雇主身上，但雇主其实不在意员工的工资是现金还是保险津贴的形式，从雇主的观点来看，所谓的均衡工资就是雇主支付报酬的总成本。这就是为什么当工会与雇主谈判劳动契约时，工会经常被要求在较高的薪资与较好的福利之间做选择。对雇主来说，这都是同样的成本。<br>私人企业的员工平均约有70%的总报酬来自工资，其余则是福利。例如，总薪资的10%左右是退休福利，包含退休金、医疗保险、退休储蓄账户，另外6%左右是特别休假，6%～7%是健康保险。但是，对任何员工来说，当雇主提供这些“慷慨的”福利时，员工仍然是支付这些福利的人，代价就是实际薪资变低。<br>对很多人来说，工作感觉像是我们和雇主之间的一种社会关系。当然，雇佣关系只是社会关系的一部分，社会互动在每个地方都会发生。你的薪资与福利不是因为你的老板慷慨或喜不喜欢你而决定的，也不是由某个公平的标准来决定的。追根究底，劳动力是一个市场，你的薪资及福利，是根据你的产出定出的价格。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>序言<br>在豪宅里对上流社会人士赞扬经济学家多有智慧，就像在街头宣扬政治人物有多忠诚可信——简直是天方夜谭。虽然有种种偏见，但我仍然强烈认为经济学有助于我们了解这个世界。我太太说经济学是我信仰的宗教，而我就是传道人，因此才会对其如此坚信不疑。<br>在研讨会上或各种社交场]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[经济学2]]></title>
    <link href="http://yoursite.com/2016/04/29/read/%E7%BB%8F%E6%B5%8E%E5%AD%A62/"/>
    <id>http://yoursite.com/2016/04/29/read/经济学2/</id>
    <published>2016-04-29T07:10:09.000Z</published>
    <updated>2016-04-29T07:10:09.000Z</updated>
    <content type="html"><![CDATA[<p>07　折现值是个很重要的观念<br>金融市场与报酬率：就像商品市场或劳动力市场一样，资本市场也可以用同样的供需架构来解释。</p>
<p>人们对资本市场有根深蒂固的偏见。在中世纪，罗马天主教认为索取贷款利息是一种“放高利贷罪”。目前，一些伊斯兰教国家仍然禁止收取利息，你可以想象，这使得经营银行变成一门复杂的生意。人们可能会觉得商品市场的价格或劳动力市场的工资不公平，但很少会觉得支付利息不合法。然而，很多人对利息（就是资本市场的价格）有很多批评，甚至觉得是错的。为什么会这样？<br>可能的理由是，商品与服务是有形且看得见的，而资本市场所交易的东西很难让人理解。大约30年前，苏联旧式的经济规划人员，手上握有和该国经济相关的2000万种商品名单。工作是我们每天生活经历的一部分，但资本市场的利息与报酬是抽象的，而且资本市场的运作似乎是看不见的。“投资”这个专有名词也使人容易混淆，因为它有不同的用法。有时，“投资”是指购买股票与债券等金融工具，有时则指企业购买实物资本（physical capital），例如机器或厂房。前者指的是投资人，他们是在最小风险下追求最大报酬的资金供给者。后者其实指的是厂商，他们是把资金转换成有形资产的资金需求者。因此，“投资”可以指供给或需求，难怪令人困惑！为了避免混淆，当我的意思是资本供给时，我会用“金融投资”（financial investment），而当我的意思是用来建立资产的资本需求时，我会用“实物资本投资”（physical capital investment）。<br>储蓄好？投资好？<br>就像商品市场或劳动力市场一样，资本市场也可以用同样的供需架构来解释。资本的供给，来自那些储蓄资金的人，我们通常想到这些资本供给是来自家庭，其实企业也会存钱，但由于企业是由股东持有（因此最终是由家庭拥有），因此你可以把企业想成代表家庭而储蓄。<br>经济学家认为，资本供给是家庭的资金供给量（也就是家庭储蓄）与它们提供资金所得到的价钱（也就是报酬率）之间的关系。我会经常用利率作为资本报酬率的具体例子，其实购买公司股票或小企业股份的投资报酬也属于资本报酬。你可能预期资金供给量应该随着报酬率的上升而上升，也就是当价格上升时，供给量会上升。然而，在实务上，人们储蓄的资金量似乎没有随着报酬率的上升而大幅增加。相反，人们储蓄的金额似乎更取决于习惯、文化形态以及雇主因素。<br>从经济学家的观点来看，资本需求也是借款人的资金需求量与他们需要支付的报酬率之间的关系。金融资本需求是来自现在需要资金并且愿意支付利息的人。利率低时，资本需求量较高。例如，如果某人想买汽车，当车贷利率较低时，他们更有可能买车。同样，当厂商可以用较低的利率借钱时，他们就更可能进行厂房与设备的实物资本投资。</p>
<p>如果你把资金供需组合起来，在某个均衡报酬率下，你会得到储蓄与投资金额的均衡点。资金有很多不同的市场，就像劳动与商品有很多不同的市场，主要差异在于被投资的对象，是大厂、小厂、个人还是政府？资金接受者的财务史是一个相关因素——它有良好的还款记录吗？这笔金融投资只是最终要收回的一笔贷款，或是想买该企业的股份？这些因素都很重要，会决定每个金融市场的供给、需求与报酬率。<br>思考资本市场如何运作时，它的关键交易是跨时间发生的。当你正在买卖商品时，交易是在一个时间点发生，劳动也是在一个时间点履行。但当你借钱时，意即当你取得资金时，你是在当下获准使用这笔钱，并在以后还款。助学贷款、抵押贷款或是厂商的设备采购贷款，都是这种情形。在供给面，当你去银行存钱时，就是同意现在把钱给某人，而在以后得到报偿。你交付这笔钱，即预期未来将收到还款及某个报酬率。<br>因此，相较于未来还款所付出的代价，你该如何计算这笔贷款目前的价值？经济学家利用折现值（present discounted value）的概念来计算，它是把不同时间点发生的成本或效益拿来直接比较的一种方式，指的是未来所要得到的款项，如果现在就回收，会值多少钱。<br>以实务为例，一年后可收到100美元，现在值多少钱？为便于讨论，假设你的银行账户利率是10%。你拿出计算器，算出假如你现在收到90.91美元且用10%的报酬率投资一年，那么一年后你会有100美元。因此，一年后的100美元，现值就是90.91美元。<br>两年后的100美元，现在值多少钱？如果利率是10%，你会发现目前投资82.64美元，两年后你会有100美元。因此，两年后的100美元，其现值就是82.64美元。这个计算方法是，折现值（PDV）等于未来值（FV）除以“1+利率（r）”的t次方，t为年期。或者把它写成公式：PDV=FV/（1+r）t。如果在未来的不同时期有一连串付款时，折现值的算法可套用于每笔未来款项，然后加总起来成为总现值。<br>折现值的概念大量用于商业与金融。企业必须思考目前建立新厂房与设备的投资费用，把它和未来用这个设备生产东西可获得的报酬做比较。举例来说，我们假设某公司盖新工厂要花200万美元，并计算5年后可赚300万美元。5年后的300万美元需要折为现值，来和厂商目前正考虑支出的200万美元直接比较。</p>
<p>如果你有房屋贷款，那么折现值也是很重要的概念。如果贷款年限是30年，你看看总付款额，会发现这段时间自己其实在支付一笔庞大的利息。现值的概念可以解释为什么会这样：你所有的分期付款（包含利息）的总价值，恰好等于房子的折现值，也就是购买价。毕竟，你可以付现金买房子，现在就支付购买价；或者你可以借钱，然后分期还款。这些付款方式有相同的经济价值。对我来说，慢慢还房贷比立刻付清更容易，但这两者的折现值是相同的。<br>谈到社会政策时，政府的很多计划都涉及现在购买或建设某样东西，以便将来能得到回报。很多环境政策是在当下有成本，在未来有效益。为了交通建设，可能需要现在建高速公路，以便未来能保护生命安全。现在教育小孩，回报就是他们在未来可以成为更有技能的劳动力。政府制定政策时，也需要运用折现值这个概念，来分析成本与效益。<br>折现值有一个奇特的应用。当大部分乐透彩宣称头奖累积彩金时，它们是把未来30年你会得到的所有款项加总。它们从没有告诉你这些款项的现值，只是把你在未来30年会收到的支票加起来。几年前，美国新泽西州议会提出一项法案，建议如果有一个老年人中了乐透彩票，他可以要求一次付清，而非分配在未来30年。因此，乐透彩票委员会必须解释其宣称在未来30年支付的积累彩金并非折现值，其现值只有这笔钱的2/3，它仍是一笔庞大的金额，只不过不像广告中所说的那么大。乐透彩票不使用折现值，而是把未来支付的款项加总，让它们的彩金看起来比实际上更多。<br>企业筹资的管道<br>现在，你已经有了金融市场运作的基本概念，我们将把重点放在需要资金的企业。想做资本投资的厂商，可以找到好几个资金来源，其中一个是留存收益（retained earnings），较常听到的说法是利润。“留存”的意思是企业决定持有这笔钱，将它再投资于企业而非以股利付给股东。你可以把它想象为厂商自己储蓄，然后代表外部投资人再投资于厂商本身。对于历史悠久的企业而言，留存收益是用于实际投资的主要资金来源。<br>企业还可以用两种方式筹钱——向银行借钱或是发行债券。向银行借钱对大多数人来说是熟悉的，但债券则较陌生。债券有面额、利率与期限三项要素。举例来说，面额1000美元、利率8%且期限十年的基本债券，在未来十年中，每年会支付8%的利息，且在十年期满后会偿还面额1000美元。债券只是厂商借钱的一种方式，但不是向银行借，而是向买家借，这些人可能是个人或组织，例如退休基金或投资公司。如果厂商不还钱，其可能会被依法宣告破产且被接管。当然，公司只有在相信投资报酬够高，付得起利息且仍有利润时，才会向资本市场借钱。</p>
<p>债券所付的利率是根据风险而变动的。高获利的企业，像沃尔玛，可以用相当低的利率发行债券，因为人们知道它很可能会还钱。同样，政府至少是稳定的机构，也可以用较低的报酬率来发行债券。相反，较不稳定的企业可能会发行高利率、高风险的债券，或称“垃圾债券”（junk bond）。<br>企业筹资的最后一种方式是通过有价证券，较常听到的是公司股票。公司股票基本上是把公司的一部分所有权卖给股票持有人。因此，如果一家公司总共有100股的股票，而你拥有其中20股，那么你就拥有这家公司20%的股权。如果该公司把利润变成股利支付，那么你就能根据自己拥有该公司股票的比例获得股利。如果该公司被出售，那么该公司卖价的20%应该归你。然而，股票不像债券有预先决定的利率，也根本无法保证股票持有人会获得固定利息或任何报酬。买卖股票可能比债券的报酬率更高或更低，甚至会出现负数。<br>卖股票通常是初创、小型公司募资的一种方式。小公司通常会卖一些股票给专业投资人，例如创投公司或是想把钱投入的“天使投资人”。小公司在成长过程中，通常需要大笔资金以维持成长动能，这时就是公司上市在公开市场卖股票的时候。公司只有完全站稳了，才较可能利用本身的利润、债券或举债（在某些情况下）来做资本投资。为了大幅扩张，公司可能会发行更多股票，例如并购另一家厂商，但不能无限制发行股票，因为股票是公司的部分所有权，发行越多股票，表示这家公司的所有权被分割得越细。如果一家公司有100股股票，在来年发行另100股，那么原始股东的所有权比重就会被稀释，这家公司就很可能被视为差劲的投资标的。<br>募资与投资是特别重要的，因为实物资本与创新来自投资，投资对扩大生产力及提高生活水平有重大贡献。美国社会的储蓄与投资比例一向落后于很多工业化国家，而一个经济体取得资本投资效益的能力，是建立在家庭储蓄及投资意愿上的。</p>
<p>08　人一生积累财富的关键是什么？<br>个人投资：评估投资标的时，要衡量四个要项：报酬率、风险、流动性、税负。<br>家庭所面临的重要的经济决策之一，就是如何为退休生活而储蓄。退休前需要存的钱多得吓人，没人有机会过几十次人生，每次都来试验不同的退休策略，你只有一次机会。从供需观点来看，退休储蓄的决策牵涉到资本市场的供给面。人们储蓄与投资，提供资金给资本市场，就是希望在没有太多风险的情况下累积财富。</p>
<p>复利的力量<br>人一生累积财富的关键，在于复利（compound interest）的力量。它是这样运作的：假设你从100美元、利率10%开始，在第1年的年底，你的账户会有110美元（原始存款加上利息）。在第2年，你会赚到110美元的10%，合计为121美元。在第3年，你会赚到121美元的10%。在第4年，你会赚到133.1美元的10%，依此类推。注意，利息金额每年都增加一些（称为复利），这是因为计算时的本金每年都在增长。随着时间的拉长，复利的力量可以使储蓄带来令人满意的可观报酬。<br>以下是经过一段时期的金融投资，在某个报酬率下会有多少获利的计算公式。以起始金额（现值）乘以“1+利率”的t次方，t是这笔钱储蓄的年期，就会得到未来值。拿一台计算器，试着输入不同的现值与利率，看看这笔钱在储蓄10年、25年与40年后会增加到多少，结果可能会令你瞠目结舌。</p>
<p>原始储蓄1000美元，在10年、25年与40年后的累积总金额<br>当我们考虑退休储蓄时，还有很长时间可准备，这就能让复利发挥作用。如果某人在25岁时拿出1000美元，以每年5%的利率来投资，当他到了65岁，这1000美元会增加到7000多美元。如果是更积极的投资，报酬率为10%（大致上是美国股票市场过去几十年的平均报酬率），10年后这笔钱会增加到将近2600美元。在25年后，是将近11，000美元。最后我们来看，1000美元、年报酬率10%，经过40年会变成45，000多美元。想拥有更积极的投资规划吗？根据15%的年报酬率（这会需要一些运气），在10年后，这原始的1000美元会变成4000美元。在25年后，原始的1000美元会增长为33，000美元。接下来是更庞大的数字：1000美元、年报酬率15%，经过40年会变成267，863美元，这是令人难以置信的倍数。<br>老实说，15%的报酬率是过高了，但40年的时间规划是有意义的，因为它大致是工作生涯的长度（25～65岁）。这并非全然不可行，如果你能从25岁或30岁左右开始，每年存5000美元，等你退休时，将拥有超过100万美元的储蓄。这不是一个快速致富的计划，但结果令人赞叹，更重要的是它切合实际。</p>
<p>你能冒多大风险？<br>总之，当你考虑一项金融投资时，你要思考的不只是报酬率，不只是期望每年5%、10%或15%的报酬率，也要考虑另外三个因素：风险、流动性与税负。在选择对你最重要的某些因素时，你将会面临这些因素与报酬率之间的取舍。<br>投资风险的定义是，报酬率相对于该投资的平均期望值有多高或多低，资本市场就是用这种方式来说明“实际情况因人而异”的。美国国债是风险很低的投资，几乎可以保证你获得的报酬率。投资一家生产新技术的公司，风险则高得多，你不知道这家公司是否会成功，但它可能出人意料地成功。在其他条件不变的情况下，风险是不受欢迎的。也就是说，如果两项投资都承诺同样的平均报酬率，你应该会偏好同期报酬率波动较小的那项投资，这表示它的风险较低。因此，风险较高的投资，例如购买初创小公司的股票，必须提供较高的报酬率来吸引投资人，同时也是对他们经受波动的补偿。<br>投资特定公司或特定债券的风险，可以借由“多样化”分散投资而减少。多样化（diversification）的意思是购买许多不同投资标的，以降低整体风险。多样化是有效的，因为某些无法预期的差劲投资，会被其他出人意料的良好投资所抵消。因此，就像俗话说的，不要把鸡蛋放在同一个篮子里。对单个投资人来说，也许最容易的多样化做法就是投资共同基金，把一组股票或一组债券结合在单项投资里。稍后，我们将谈到更多共同基金的内容。<br>“流动性”，是把投资转换为现金的意思。银行账户相当有流动性，很容易把钱取出来；房子不是很有流动性，因为要花一些时间和精力才能卖掉；金融投资，比如股票与债券，则介于这两个极端之间。一般而言，在其他条件（例如报酬与风险）不变的情况下，你会偏好流动性好的投资。<br>最后要考虑的因素是，税法是否有利于该投资。某些投资可免除所得税，例如政府债券的利息收入；而有些投资所得是要课税的，在你卖掉该投资时才付税金，投资股票与房子的资本利得也是。<br>税收减免固然造福了投资人，但是，在凡事有得必有失的世界里，税收减免越多，意味着别的东西越少。例如政府发行的免税债券，就会比有课税的债券报酬率要低。你不必缴税，但你的报酬率就不会那么好。照理说，收入高且税负重的有钱人应该更关心减税事宜，并据此慎选投资项目。收入低、税负轻的人，就不用那么关心投资所得税的问题了。</p>
<p>你的年龄——或许更明确的说法是你离退休还有多久——也应纳入金融投资考虑。退休后，大部分人没有很多收入，因此不需要付很多税金，减税不是那么重要。但是，在主要的工作赚钱期间，假设是30～55岁，大多数人会有较高的收入与税负，因此减税就比较重要。<br>各种个人投资工具<br>现在我们来思考各种潜在的金融投资，如何用四个因素（报酬率、风险、流动性、税负）来衡量，以及如何在这些因素中做取舍。尤其是报酬率和风险之间的取舍，借用伯顿·马尔基尔 9（Burton Malkiel）所说，以睡眠安稳量表来反映风险程度：如果把钱投入这项金融投资，你晚上睡得安稳吗？<br>先说银行账户。银行提供很低的报酬率，而且利息要课税，但非常安全且流动性很好。在美国，政府还会提供存款保险，通过联邦存款保险公司（Federal Deposit Insurance Corporation, FDIC）保障存款在银行账户的安全性。根据马尔基尔的睡眠安稳量表，如果你把全部的钱存在银行账户里，那么你大可以昏睡不醒，因为它的风险程度接近零。<br>银行账户往上升一级，可能是货币基金。货币基金投资于很多风险很低的债券，可能是政府或大公司发行的债券。你在货币市场会得到比银行账户稍好一点的报酬。货币基金仍然相当有流动性，也相当安全，但不如银行账户。根据马尔基尔的睡眠安稳量表，把钱投入货币基金，你可以在下午小睡，然后晚上也能安然入眠。<br>下一个投资类别是定期存单（简称定存或称CD）。定存是在一定时期内，把资金存放在银行或金融机构的合约。可能是六个月、一年或数年，不论时间多久，你在这段时间不能碰这笔资金。这么做的好处是，你会得到比一般银行账户更高的报酬率。定存的资金很显然不是很有流动性，遇到紧急情况时，虽然可以取回这笔钱，但得付点罚金。然而，它的报酬率优于银行账户，而且多少有些保障。根据马尔基尔的睡眠安稳量表，你仍然可以安然入眠。<br>至于多样化的公司债投资组合，或投资于这类债券的共同基金，又如何呢？记住，债券是在一段固定时间内，可以预先决定报酬率的一种投资工具。通常，一个多样化的公司债投资组合，会给你优于定存的报酬率。如果你通过基金买债券，当有需要时，通常相当容易将你的投资转换为现金。然而，它的风险会稍微高一些，在大部分情况下，债券的报酬率是一个固定利率，这表示如果通货膨胀与市场利率 10上升，你就会被锁在这个较低的固定利率上，因而吃了亏。因此，若把钱投入债券基金，风险会高一些。睡眠安稳程度可能是：你仍然可以整晚都睡着，但偶尔会做噩梦。</p>
<p>接下来的选项是多样化的蓝筹股投资组合。蓝筹股（blue chip stocks）指的是大型、知名公司的股票，例如通用电气、沃尔玛、美孚等公司。共同基金持有很多这些信誉卓著、长期获利的公司的股票，它提供优于债券投资组合的报酬率，因为股票的风险比债券高，即使是蓝筹股，亦然。然而，股票有节税优点，因为在卖出之前，你不必对资本利得缴税。因此，如果你长期持有股票，在获得资本利得前，都可以暂时不必缴税。此外，投资组合多样化也能降低风险，任何一家公司的股价下跌，也不致让你损失太多。如果是买股票基金，流动性也足够。<br>然而，你的股票投资组合很可能不但没有保障，而且还可能亏损。例如1987年的股灾，股市在一天内就蒸发了20%的市值。而2000～2001年是缓步崩跌，从2000年8月到2001年9月这倒霉的13个月里，在纽约证交所挂牌的股票平均跌了18%。2007～2009年经济衰退时期，从2007年10月到2009年3月，纽约证交所股价平均而言都被腰斩了。因此，如果你投资的是持有多种股票的基金，根据睡眠安稳量表，你在入睡前可能会辗转反侧，而且睡醒之前会经历一些恍若真实的梦。<br>想要多冒点险吗？不妨试试多样化的高成长股票投资组合。成长股是较不成熟的公司的股票，这种投资一般会比蓝筹股提供更高的报酬率。幸运的话，你可能会有好几年得到比市场长期平均10%还高的报酬率。同样，如果是买股票基金，流动性也足够。尽管多样化投资这些股票可分散一点风险，但毕竟这些公司本身是风险较高的。例如，从2000年8月到2001年9月，当纽约证交所蓝筹股市值跌了18%时，纳斯达克证交所小型成长股的市值，跌了约60%。这钱不只是损失了，而是融化了。因此，按照睡眠安稳量表，如果你把钱投入成长型股票基金，你将噩梦连连；但如果你可以长期持有，经历一波又一波的涨跌洗礼，最终你在晚上还是可以得到充分的休息。<br>如果你买了一套房子，它不只是一个住的地方，也是一项房地产投资。对多数人而言，房子是他们至今做过的最大的单笔投资。历史上，拥有房产的平均报酬率都是正数，但对于处在萧条市场的每位房主来说，等待房屋价值攀升可能要花一段很长的时间。换句话说，长期（以十年为单位）风险相当低，但短期（以月或年为单位）风险高了很多。房屋的流动性差，但好处是购房可能有税负抵减。我们很难用睡眠安稳量表来衡量住房投资，因为从个人角度来看，住家的意义远大于投资，至少房子给了你一个生活和睡觉的地方。但房子也可能让你失眠，就像自2006年起美国房价下跌后，数以百万计的美国家庭所经历的情况。</p>
<p>个人可从事的最后一种投资是贵金属，例如黄金、白金，这些贵金属是个人可从事的风险最高的投资之一。贵金属市场价格波动剧烈，如果你买卖时机正确，的确可能大赚一笔；但若时机错误，损失也很大。根据睡眠安稳量表，你肯定会失眠！就我本人而言，我还是把这些投资交给专家吧。<br>你能用多少时间投资？<br>脑海里有了这些选项后，个人投资的最佳策略是什么呢？真相其实是：没有一体适用的方法。考虑你的投资时间规划，会是一个有用的出发点。短期而言，股市的风险很高，但如果视为长期储蓄（例如几十年后的退休生活），那么行情的起伏很容易互相抵消，长期下来，很有可能因耐心而得到回报。然而，如果你这笔钱是要用来采买本周的食品杂货，或是为下个月的贷款、下学期的学费着想，那么你可能就无法忍受太多风险。你若要确保钱的安全、流动性，就别奢望高报酬率。如果你的时间规划介于上述两者之间，例如计划几年后买新车或较大的房子，那么你可能无法承受股市风险，但可以忍受比存银行高一些的风险。债券与定期存款可能是你的最佳选择。时间范围，是你对风险承受度的一大关键因素。<br>也许多数人对其退休金所犯的最大错误，是没有承担足够的风险，尤其是在早期阶段，因为太在意财务安全，所以把太多钱投入债券、银行及货币基金。人们即使到了五六十岁，一般预期也可以再活20年或30年甚至更久，那可是一段很长的时间，可利用复利来累积财富。<br>那么，何不只挑选报酬率最高的股票，然后把全部的钱投入那只股票？为什么要瞎扯这些风险、流动性与多样化的概念？当然了，问题在于没有人知道哪只股票未来会提供最高的报酬率。股价是基于市场对这家公司未来获利的预期的。股价上涨的原因是，新信息显示该公司会比以前更赚钱，但这些新信息就本质而言是不可预测的。正因为你不能预测会出现什么样的新信息，所以股价涨跌是不可预测的，这就是统计学家或经济学家所说的“随机漫步” 11（random walk）。</p>
<p>你真正想买的股票，是别人认为前景不好（需求量低，因此价格低），但未来每个人都将认为是只金母鸡（需求量高，因此价格高）的股票。或许，我是说或许，每周工作60小时或80小时的资深专业投资人可以定期挑出这类股票。但如果你是坐在家里读《华尔街日报》里昨天写的更早以前发生的新闻，那么你应该明白，股市专家在几周前就知道大部分消息了。你不可能用这种方式看透市场行情。《华尔街日报》或《福布斯》杂志的财经记者有时会组织“标靶基金”，从字面来看，就是某人在房里对着钉在墙上的报纸证券版投飞镖，然后买进他投中的任何一只股票。之后，他们把标靶基金和专业投资人的投资绩效拿来比较，结果如何？标靶基金的绩效差强人意，而那些专业投资人也半斤八两。<br>所有的投资忠告最终都基于一个事实：你需要存些钱，越早开始越好。无论你是二十几岁、三十几岁、四十几岁还是五十几岁，总是有上百万个理由让你无法存钱，但如果你不稳定储蓄，到了60岁或65岁才想求得锦囊妙计，让你在退休后享有高水平的收入，那根本是缘木求鱼。</p>
<p>09　垄断的本质是对勤劳者课税<br>从完全竞争到垄断：经济学家约翰·希克斯爵士曾说，垄断的最大好处，就是平静的生活。<br>我们已经讨论了经济学家如何从微观经济的观点来看经济。也许可以把这个观点总结一下，即：微观经济牵涉到市场上（商品、劳动力与资本市场）供给与需求互动的力量。从本章起，我们要讨论这些市场力量走偏的状况。例如，厂商追求获利对整个社会来说是一刀双刃。获利的欲望，促使厂商生产高质量、低成本的创新产品，造福了消费者。但是，追求获利也会鼓励厂商哄抬价格、对质量不够用心、不诚实、制造污染等不受欢迎的行为。政府在经济上所扮演的角色之一是制定法规架构，鼓励追求获利的正面结果，并抑制上述黑暗的经济力量。本章将讨论独占或垄断和其他不完全竞争的市场是如何运作的，下一章将讨论政府消除竞争行为的政策。更后面的章节则研究在没有规范的市场中可能发生的种种问题，包括污染、贫穷、收入不均、功能失调的保险市场等。</p>
<p>在谈企业如何竞争之前，我们应该花点时间探讨“企业”的含义。在美国，企业规模从一人公司到超大型公司都有。企业所有权可分三类：独资（proprietorship）是由单个人所有；合伙（partnership）是由一群人所有；公司（corporation）则是有法律实体的组织，独立于其持有者，可能由一人或一群股东所有。21世纪最初10年初期，美国大约有1800万家独资企业、200万家合伙企业以及500万家公司企业。虽然公司在数量上不是最大类别，但在规模上占主要地位。这500万家公司的营业额约为20万亿美元，而200万家合伙企业的总营业额只有约2.5万亿美元，1800万家独资企业的营业额则约为1万亿美元。<br>美国经济涵盖的产业类别非常广泛。如果翻阅政府的统计数据，你会发现主要的产业门类包括：农业、采矿、公用事业、建筑、制造（当然，这里面包括了很多不同的产品）、零售（这里也有很多不同的产品）、交通、电信、广播、金融、房地产、专业与技术咨询、废物管理、教育、医疗、艺术、娱乐、餐饮、食品、汽车维修、清洗……这个名录会很长。你可能会认为，几乎每个人都在大公司工作，但实际上不是这样的。500人以上规模的企业只雇用了约全国职工总数的一半，另一半职工是由500人及500人以下规模的企业雇用的。其中，20人及20人以下规模企业雇用了大约1/5的职工。在美国，每个经济年度差不多新增50万家企业，同时会有近50万家企业倒闭关停。你可能会认为这些新增的企业都是些小企业，实际上，这些新成立的企业中，有好几百家是500人以上规模的企业。<br>四种竞争类型<br>任何类型的企业，在任何规模、任何产业下，都可能会涉及四种不同的竞争类型。想象这四种类型分布在一条光谱上：一端是“完全竞争”（perfect competition），有很多小企业在制造几乎一样的产品；另一端是“垄断”（monopoly），单一生产者在特定市场几乎拥有全部的营收；介于两者之间的是“垄断竞争”（monopolistic competition），是指很多企业争相销售稍微不同的产品，例如每家餐厅都卖食物，但所提供的东西各有不同的风格与质量；最后是“寡头垄断”（oligopoly），它有点接近垄断，只是并非由一家企业囊括全部的市场营收，而是少数企业在特定市场拥有大部分或全部营收。以下仔细讨论每种类型。</p>
<p>完全竞争产业的主要特征是价格接受（price taking），也就是说，完全竞争的企业必须接受市场给定的价格。这些产业的厂商别无选择，原因是消费者很容易找到替代品。如果完全竞争的企业把产品价格提高一块钱，那么消费者就会去其他厂商那里购买同样且更便宜的产品。企业可以很容易进出一个完全竞争的产业，这是因为产品简单易做，通常是众所周知的物品，如袜子、木螺丝之类。在这种竞争环境中，价格会密切反映生产成本，因为竞争迫使价格降到最低，仅高于生产成本。因此，完全竞争市场中的企业，大都只能赚取同样低的利润。<br>根据教科书里的定义，真正的完全竞争就像是实验室里的纯气体：它是理论上的极端情况，而产品也很少是一模一样的。人们可能偏好某种风格和颜色的袜子，或偏好某种螺丝起子与木制螺帽完全贴合的感觉。还有很多要考虑的，例如供给的可靠度或产品质量。但完全竞争的概念（产品一模一样而以价格竞争）可以作为有用的比较基准，一些日常生活用品，例如汽油、电视机和农产品，在市场上的运作很接近完全竞争，许多产品几乎一模一样，而且价格竞争激烈。<br>光谱的另一端是垄断，单一卖家在特定市场拥有全部或大部分的营收。例如，微软在20世纪90年代晚期与21世纪最初10年早期，主宰了计算机操作系统的市场；大约20～30年前，IBM主宰了大型计算机市场；施乐曾经主宰复印机市场；美国邮政服务公司至今仍主宰邮件投递市场。大部分人无法选择由谁来收集垃圾或提供电力，这些通常也是垄断，只不过是属于当地或区域性的垄断。<br>要如何才能达到垄断状态？通常是用一些障碍，阻止其他厂商进入市场。例如，假设进入障碍是某项技术专利，比如药厂发明了新药，拥有这项专利的药厂就成为唯一能制造这种药物的厂商（至少在某一段期间内），因此它可能是同业中唯一卖这种药的公司，进而垄断了市场。事实上，赞成专利的经济论点是：允许专利在一段期间内的独占地位，可以促进创新。这种有限制期的垄断，其权衡取舍的是公共的利益。<br>有些垄断是由法律创造出来的。例如，美国邮政服务公司在邮件市场有独占地位，而在美国大部分城市，当地政府在垃圾收集市场有独占地位。另外一个进入障碍是所谓的“自然垄断”。当这个产业出现规模经济现象，提供大型、稳定的企业胜过新进企业的优势时，就会发生自然垄断。例如，相对于小型太阳能发电厂，一座大型水力发电水坝可用较低的平均成本生产电力。一旦有了水力发电，小型电力生产者就很难进入市场，即使它们可能在成本上有竞争力（如果它们也可以用较大的规模来生产）。若产业中所有大厂都合并，或至少同意一起行动，理论上也会发生垄断，但以反托拉斯法而言，这是违法的行为。</p>
<p>和完全竞争市场不同的是，独占企业在市场有设定价格的能力，可让价格高于生产成本，因此可赚取较高利润。独占企业会根据该产品的需求弹性来定价，如果产品的需求很没有弹性，那么独占企业就可以提高价格，而需求量只会小幅下降。我们再回头来看垄断某种药品的药厂，如果那是唯一有效的药品，病患势必会为它付出大笔金钱。<br>然而，垄断者不一定只是从金钱上得到利益。经济学家约翰·希克斯爵士 12（Sir John Hicks）曾说：“垄断的最大好处，就是平静的生活。”没有竞争者，厂商就可以放松；而在一个完全竞争的市场中，你一刻也不能放松。19世纪的英国经济学家、哲学家约翰·斯图尔特·密尔 13（John Stuart Mill）说过：“没有竞争的地方，就有垄断。垄断的本质就是对勤劳者课税（如果不是掠夺），它之所以能这么做，是因为懒惰者的支持。”在最坏的情况下，独占企业有两个选择，不是变得懒散、无效率，就是有能力通过较高的价格榨干消费者。<br>垄断竞争的本质，较接近完全竞争而非独占。当很多厂商借由销售“差异化”的产品（意即产品相似，但不是一模一样）来竞争时，就会出现垄断竞争。例如，你去商店买裤子，你可以买牛仔裤或卡其裤，也可以买羊毛裤，然后你可能去不同店家选购这些商品。这些商店竞相销售裤子，但它们不是一模一样的产品。另一个差异化的例子是地点，你可能每周会在下班开车回家的路上加油，却不曾光顾离你回家路线不远的加油站。或者厂商可能会为买家提供不同的激励：我应该在打八折的A网络商店买这本书呢？或是在提供免费运送的B书店呢？<br>和独占企业一样，垄断竞争的厂商也有一些设定价格的能力，可根据需求弹性来定价，但它提高价格的能力不像独占企业那么大，它仍需考虑竞争者的价格。此外，垄断竞争市场没有进入障碍，可以开更多餐厅，可以有更多服饰店，也可以设更多加油站。因此，如果卖烧烤的餐厅在你家附近流行起来，那么就会有更多烧烤餐厅陆续开张。由于这种进入与退出市场的过程，垄断竞争的厂商在短期可以赚到比平常高的利润，但长期则不然。厂商们的利润越高，对想进入的竞争者而言就越有吸引力，然后更多的竞争就会把价格与利润越压越低。<br>从消费者的观点来看，垄断竞争的好处是它为企业提供了强大的动力，去发现趋势、产生创新以及提供多样化产品。经济学家没回答的问题是，自由市场是否能提供适量的多样性。我们大多喜欢丰富多样的世界，不会愿意生活在全穿蓝色牛仔裤和白色T恤、每天吃白面包和奶酪三明治的世界，即使这个社会只生产一种牛仔裤、T恤、奶酪与面包会更有效率。相反，就算我们有数百款篮球鞋或香皂可选择，我们实际上会生活得更好吗？答案还是不一定。</p>
<p>最后，寡头垄断的本质较接近独占而非完全竞争，是指一些厂商在一个特定市场拥有大部分或全部的营业额。例如，可口可乐与百事可乐主宰了软饮料市场的营业额。对于任何寡头垄断市场而言，关键是厂商是否彼此激烈竞争，如同完全竞争一般使得利润下降，或者它们是否（也许是不公开的）共谋使价格维持在高位，就像独占一样。<br>企业领导人通常不太赞成竞争。毕竟，你是想经营一家完全竞争的企业（为了蝇头小利和很多竞争者厮杀）还是一家独占企业（公司有很大的定价自由，可改变生产方法以及获取高利润）？竞争让商人过得非常辛苦。相反，消费者应该赞成竞争，因为竞争可以提供更低成本的创新产品，市场竞争是对消费者最有利的方式。</p>
<p>10　是大池塘里的小鱼，还是小池塘里的大鱼<br>反托拉斯与竞争政策：独家交易、掠夺性定价等名词的定义，看起来模糊且不确定，但的确就是如此。<br>经济学家看似终生歌颂竞争市场，但几个世纪以来，他们已充分意识到，企业通常试图避免竞争。如同经济学始祖亚当·斯密在《国富论》中的名言：“即使只是为了欢笑作乐，同业也很少聚在一起；倘一旦有了对话，往往不是密谋对大众有所不利，就是共谋涨价手段。”如何避免企业密谋，鼓励它们竞争呢？<br>美国执行反托拉斯（antitrust）与竞争政策的主要联邦机构，是联邦贸易委员会（FTC）与美国司法部。FTC是直接向国会报告的独立机构，由五位委员领导，这五人由总统提名，参议院表决同意，任期七年，其中不得有三位以上的委员属同一政党。美国司法部有专门负责反托拉斯的部门，调查并起诉违法竞争的案件。<br>这些管理机构的主要任务之一，是确保企业不会合并为独占企业。根据法律，联邦政府在企业合并案成立前有权审查。美国政府对企业合并案不太有敌意，FTC官网甚至说：“大部分企业合并案使企业得以更有效率地营运，实际上有利于竞争与消费者。”但它也警告：“有些企业合并案可能削弱竞争，导致价格提高、可获得的商品或服务减少、产品质量降低，以及创新减少。”基本的哲学是在两者间取得平衡：美国基本上是一个自由市场，允许企业自己做选择，但如果企业的选择会限制竞争，且会转嫁成本给消费者，消费者就会要求政府介入。</p>
<p>在美国，企业合并案中，若有任何一方年营业额超过1亿美元，当事人在合并案成立前就必须通报政府。21世纪最初10年中期，美国每年约有2000件合并案被核准，其中约有一半是成交金额2亿美元以下的案子，大约有10%的案子金额超过10亿美元。这些合并案中每年约有200件会引起政府注意，要求提供更详细的信息。这可能导致三种结果：政府可能阻止合并案；可能有条件核准（通常会要求一部分有垄断市场疑虑的业务，在合并时要分售，不能纳入并购标的内）；或者让合并案如期通过。<br>竞争与规避竞争的戏法<br>但是，企业避免竞争的问题，并不是这样就结束了。企业不必真的合并，也可以规避竞争，例如协议同时进行涨价。当企业公然共同涨价明显违法且有违常理时，FTC就应该判断业界是否是以不成文的默契哄抬价格。<br>企业反托拉斯的其中一项任务，是定义市场上的竞争程度，然后判定是否为充分竞争。衡量竞争程度最简单的方式是四大企业集中度（four-firm concentration ratio），做法是将该产业前四大企业的市场占有率（简称市占率）加总起来。最极端的例子是市场上只有四家企业，这四家企业的市占率加总起来是100%，所以四大企业集中度是100。四大企业集中度较高，表示竞争是有限的。虽然四大企业集中度是一个可堪使用的竞争衡量指标，但它有时不够精细。想想看，某个有八家企业的产业，假设其中四家各有20%市占率，另外四家各有5%。此时，四大企业集中度是80%。假如一个产业有八家企业，第一家有65%的市占率，其余每家都是5%呢？你仍然会得出四大企业集中度为80%的结论，但实际情况是，这个市场很接近独占。<br>赫芬达尔-赫希指数（Herfindahl-Hirschman Index, HHI，或称赫氏指数）是一个更精确的竞争程度衡量指标。这个公式考虑每家企业的市占率，先算出每家企业的营收占市场总营收的百分比，然后把每家企业市占率的平方加总起来。例如，独占企业的市场占有率为100%，它的HHI就是100的平方，也就是10，000。如果市场有1000家小企业，每家的市占率为0.1%，那么它的HHI就是10。因此，指数低表示市场竞争程度高，反之亦然。<br>20年前，如果市场的HHI在提议合并案之后低于1000，FTC通常会赞成该项合并案。如果HHI介于1000～1800之间，FTC会详细审查这个案子，视个案决定。当HHI高于1800时，FTC倾向于挑战该项合并案，或者完全封杀。然而，过去20年来，FTC与美国司法部已经不采用机械式衡量的市场占有率，部分原因是很难界定个别市场的范围。</p>
<p>定义“市场”规模的问题，在1956年有一个经典的法律案例。杜邦公司当时被指控垄断玻璃纸的生产。杜邦也很快承认，它生产了市场上70%左右的玻璃纸。然而，该公司认为，定义市场的正确方式要看所有的“弹性包装材料”，里面包含蜡纸等其他产品。以这种方式定义市场，它拥有的市占率还不到20%。最后，美国最高法院同意杜邦的论点，因此裁决虽然它制造了大部分的玻璃纸，但它在弹性包装纸相关市场并不算垄断。<br>类似问题也曾发生在20世纪90年代。微软占有计算机操作系统80%以上的市场，但“操作系统”是这个市场的正确类别吗？应该包括整个软件市场吗？举例来说，如果包括计算机游戏，微软在整个软件市场的占有率会小得多。微软辩驳它只是软件大池塘里的一条小鱼，政府则认为微软是操作系统小池塘里的一条大鱼。在这个案例中，法院同意起诉，把“操作系统”定义为较狭义的市场。政府对微软的诉讼案最后庭外和解，微软同意让外部竞争者把它们的软件和微软的操作系统整合，使竞争者得以更有效地与微软的其他软件产品竞争。<br>当你判断全球市场的竞争状况时，想象一下你会遇到的复杂情况。在写本书时，美国的三大汽车制造商（通用、福特、克莱斯勒），各自有着不同的财务状况。它看起来像是一个高度集中的市场，但这三家公司在美国市场必须和来自世界各地的汽车制造商竞争。如果说这三家美国公司形成寡头垄断，主宰了美国汽车市场，这个说法就未免有些荒谬可笑。<br>以全球观点来看，就可以明确解释为什么在1998年年底埃克森公司与美孚石油获准合并。当时埃克森有80，000名员工，年营收大约是1370亿美元，美孚有42，000名员工，年营收660亿美元。事实上，埃克森是美国的第四大公司，而美孚是第十三大。FTC与司法部为什么允许这项超大型公司合并案走下去？原因是这两家公司是在全球能源市场上竞争，把合并后的埃克森美孚和其他国家例如沙特阿拉伯、尼日利亚和委内瑞拉的国营石油公司相比，它还达不到掌控这个市场的程度。<br>反托拉斯大战</p>
<p>在判断市场竞争程度时，除了观察市占率，另一个方法是观察市场价格的模式。经典案例发生在1997年，当时史泰博（Staples）和欧迪办公（Office Depot）宣布要合并。它们的市场范围大致包含大型商场、杂货店与药店，基本上就是你可以买到铅笔的任何地方。这两家公司解释它们在办公用品市场的合并占有率只有6%，不能算独占。FTC与司法部没有争论该市场的适当规模，而是采取另一个方法。根据两家公司各店的销售资料，它们发现史泰博的价格在没有欧迪的城镇会高于两家公司都存在的城镇，这个证据显示两家公司是竞争者，而提议的这个合并案会导致消费者的购买价格变高，因此予以驳回。<br>美国政府不仅有权力阻止或限制企业合并，还可以分拆垄断者的大公司，20世纪早期的标准石油（Standard Oil）即是有名的瓦解案例 14。20世纪80年代，AT&amp;T被拆解成所谓“小贝尔”的七家地区电话公司、贝尔实验室以及一家长途电话公司；美国政府曾多次试图拆解IBM，但没有成功，直到它自愿出售某些业务；近来则有人建议拆解微软。但最近几年，法院认为把一家运作良好的公司分拆，其经济成本可能会超过效益，所以对分拆公司变得相当犹豫。<br>企业也可能密谋用各种方式消弭市场竞争。价格垄断（price fixing）的卡特尔（cartel）组织，是由同一市场的一群企业组成的，彼此协议共同设定产出水平和价格，这种做法明显违反美国与欧洲的法律。在20世纪90年代晚期与21世纪初期，维生素制造商的国际卡特尔组织，包括瑞士罗氏（Hoffman-La Roche）、德国巴斯夫（BASF）与法国罗纳-普朗克（Rh ne-Poulenc），因密谋哄抬全球维生素价格而遭到调查。结果这些企业被罚款数亿美元，一位高层主管被判监禁四个月。<br>21世纪早期，美国政府积极调查大约30个可能成为卡特尔的不同组织。你可能没听过赖氨酸（lysine），它是由全球约五家大企业生产的一种食品添加剂，对反托拉斯经济学家而言，这是一个恶名昭彰的案例。这五家企业的高层领导人在旅馆房间密会，协议赖氨酸的销售数量及价格。在司法部取得的监听录音中，ADM公司总裁称该公司的口号是：“竞争者是我们的朋友，顾客是我们的敌人。”这句话可以说正是各地卡特尔组织的座右铭。<br>如同跨国犯罪一样，很难说谁有权起诉卡特尔组织。例如，石油输出国组织（OPEC）成员开会议定石油价格，要依据谁的法律来判定它们的行为违法？又有谁可以起诉它们？<br>除了形成卡特尔组织外，潜在竞争者也可能形成种种限制性的商业惯例。</p>
<p>·在一份价格维持（price maintenance）合约里，制造商把东西卖给一群经销商，坚持某个最低转售价格，以防止经销商彼此竞争过头。根据法律，制造商可合法“建议”最低价格，且停止销售产品给经常暗中破坏建议价格的经销商，但制造商不能“要求”最低价格，这两种情况有微妙的差异。<br>·当制造商要求经销商只能卖自己的产品，而不能卖竞争者的产品时，称作独家交易（exclusive dealing）。如果其目的是鼓励竞争，例如福特汽车经销商与通用汽车经销商竞争，那么这种交易是合法的。但如果制造商太强势，这类独家交易可能会遏制其他制造商的竞争，而且可能会被判违法。<br>·搭售（tie-in sale）或捆绑销售（bundling），是指顾客只有在买了某个产品时，才能买另一个产品。这可能是合法的，例如球队的季赛联票或是绑售的软件包，但如果类似产品不能单独购买，那就可能违法了。<br>·掠夺性定价（predatory pricing），是指既有厂商大幅削减价格，幅度够低且时间够长，把新的竞争者赶出市场后，再提高价格以达到独占水平。在实务上，通常很难定义掠夺性定价与传统的激烈价格竞争之间的界限。<br>独家交易、掠夺性定价等名词的定义，也许看起来模糊且不确定，但的确就是如此。关于违反竞争行为的规定，总有一些灰色地带。政府干预可鼓励更多竞争，但政府干预的范围不断引发争论。怀疑论者通常不赞同政府的反托拉斯行为，他们认为卡特尔组织会瓦解，而独占厂商很快就会面临竞争压力。他们认为，政府管理者可能会受到政治压力的影响，而没有采取对消费者最有利的行为。<br>然而，大多数人赞成强力执行反托拉斯法，并且相信政府会监督妨碍竞争的大企业。但是，在某些情况下，人们对市场竞争的支持度则不明确，例如美国对国家邮政服务公司作为独占企业的态度。全球其他高收入国家已纷纷消除邮政独占，允许竞争。如果你赞成消灭垄断，却又怕给国家邮政服务公司带来竞争，那么你可能需要再深思。</p>
<p>11　最佳的管制法或许就是解除管制<br>管制与解除管制：若能尊重激励因素与市场力量，管制手段也可以运作得很好。<br>在某些产业中，市场竞争不可能正常运作，反而会导致所有厂商蒙受巨大损失而无以为继。19世纪后期，美国铁路产业蓬勃发展，建设铁路的最大支出是铺设铁轨的成本，一旦铺好，沿着铁路运送商品的成本是很低的。如果一家公司在某地区拥有当地唯一一条铁路，就可以索取高额运费，并拿高额利润支付高股利，以吸引更多投资人出资铺设更多铁路，依此循环下去。到了1882年，彼此竞争的铁路公司已经铺设大约9万英里的铁路，但竞争使得运价下跌，公司再也无力支付兴建铁路的成本。到了1900年，由私人企业铺设的铁路，有一半已经改由破产法院</p>
<p> 15营运。因此，在20世纪，美国政府管制铁路业，之后也基于相同理由管制航空业。<br>市场竞争在公用事业中不易运作，为什么？试着想象一个城市有四家自来水公司，城里每栋建筑物地底下有四组水管，因为每家公司各有一组。这是行不通的！再想象一下，有四倍的电线铺设在街上，或是有四倍的电车轨道交织在城里。很多水力、电力公司依法是民营的，但由政府密切管制着。<br>为何管制？怎么管？<br>这些被管制的产业都有一个共同特征：必须依赖某种网络建设。兴建整体网络的成本是较高的，而经营的成本通常是较低的。如果放任这些大企业不管，结果往往会变成垄断。但另一方面，让两家或三家同类公司竞争，一旦它们的基础设施到位，就可能彼此竞争而走向灭亡或是合并，结果仍然导致独占。这种情况即是“自然垄断”，因为产出的模式是兴建网络的固定成本高，日后提供服务的成本低，所以很容易形成垄断。<br>管制这类产业，没有一套完美的方法，但某些方法会比较好。历史上，公用事业定价最常见的方法是成本加成管制法（cost-plus regulation）：精算过公司的生产成本后，允许一个较低的获利水平（通常以一般企业在竞争市场可赚到的报酬为依据），且锁定价格以便能获取该水平的利润。这也是20世纪大部分时候，美国设定航空业和铁路业价格的方法。成本加成管制法听起来合理，但所提供的激励并不吸引人。在成本加成管制法下的厂商，不需想办法削减成本或变得更有效率，而且没什么动力去创新。更确切地说，在成本加成管制法下的厂商，甚至有动力去拉高生产成本、兴建庞大的新厂或雇用更多员工，因为其价格设定是以足以支付成本为前提的。<br>成本加成管制法的替代方案，是价格上限管制法（price-cap regulation）。在这个制度下，管制者（也就是政府）设定一个价格，让被管制的厂商在未来几年可以依此收费。例如，管制者设定电力公司在未来三年可以对消费者收取某费率，因为电力公司在未来几年不需降价，如果能自行降低成本，其利润就能提高。当价格上限到期时，管制者会根据新的成本重新设定费率，以适用于新一轮期限。如此，厂商与消费者均可受益。<br>但是，当管制者开始以为他们的使命是保护产业利润及其员工，而非保护市场竞争与消费者时，任何的管制法都会面临经济学家所说的“管制俘虏”（regulatory capture）的危险。管制者似乎经常会发展出一种斯德哥尔摩症候群</p>
<p> 16（Stockholm Syndrome）——同情受管制的厂商，以致其判断力受到蒙蔽，无法保护消费者。<br>因此，在某些情况下，最佳的管制法就是解除管制（deregulation）。20世纪70年代后期与80年代初期，美国的某些产业经历了一波解除管制，包括航空、银行、货运、石油、长途巴士、电话设备、长途电话服务，以及铁路。当这些产业解除管制后，它们不再是美好、整齐、有条理、每年都有可预见高水平获利的市场。虽然如此，美国20世纪70年代解除管制的大型试验，让消费者的选择如雨后春笋般多了起来，到了90年代末期，每年因降价让消费者省下的钱高达500亿美元。航空业重整为枢纽网络系统，在城市间开出更多航班；货运也建立了类似的枢纽网络运输系统，改善了运送效能；银行业解除管制后，引进了自动柜员机与弹性的金融服务；电信业则带来了新技术的跃升。<br>你也许会说，这些改变，有的迟早会发生。毕竟科学在不断发展，就算没有市场竞争，智能手机与自动柜员机这类新产品在技术上不是必然会出现吗？可别急忙下定论。例如，自从电话发明之后，直到电信业解除管制的几十年间，虽然技术上有巨大发展，但改变相当小。而今天的婴儿在未来变成青少年时，甚至可能都不会认得什么是有线电话。这些改变在一个管制市场都必然会发生吗？我想这不是可预料的结果，至少不会这么快就发生。<br>当然，解除管制也是一种权衡取舍。当产业开放竞争时，原本受到人为保护的劳动力市场也会面临竞争压力，某些人的薪资会下降，因为货运与电信产业在解除管制后，企业开始急速扩张，就业机会就增加了。有些员工在解除管制后被遣散或减薪，因为他们从前的工资是基于政府限制竞争的管制，才让消费者付出较高的价格。<br>即使是在需要某种程度管制的情况下，被管制的产业也可以切割成几部分，留给市场竞争力量来运作，美国以前的电信独占商AT&amp;T的瓦解正是一例。AT&amp;T的长途电话、设备与研究部门，在竞争者加入后，的确变得更重视创新；而各地区的电话公司，对竞争则表现得有点迟钝，直到随着新型手机与网络技术的普及，竞争态势才升级。还有一些产业，若加入某种程度的竞争，可能会对其有帮助，例如垃圾清运业，各家厂商可以竞标附近地区的合约；或是支持县市政府的服务业，比如清洁服务、维修服务、自助餐馆与物业管理。</p>
<p>电力业一直被视为自然垄断，且被当作公用事业来管制，这得归因于需铺设电线网络。但是，对电网的争论重点不在于如何生产电力。电网可能是由政府拥有且受管制，但厂商可以在供应能源方面竞争，包括太阳能和风力等替代能源。英国从1989年开始对能源市场进行试验，而美国在20世纪90年代试图解除电力管制，有些成功了（如宾夕法尼亚州），有些则彻底失败了（如加利福尼亚州）。<br>宽带网络产业具有自然垄断的特性，厂商也需要建立一个高固定成本的网络（铺设缆线到每一户），才能提供服务。因此，有人主张该产业应该借由独占管制来提供服务。但是过去10年，通过各种可行的传输方法（有线电视缆线、光纤，甚至是无线），宽带网络产业也具备了市场竞争的潜力。随着技术的快速演变，鼓励多样化技术会比政府选定一项技术然后加以管制来得更好。<br>市场竞争的力量可以鼓励创新与提高效率，并惠及消费者。但是，在某些泾渭分明的情况下，当市场竞争无法良好运作时，政府可以扮演有用的角色，作为经济竞争的仲裁者。政府也是安全标准、财务报告正确性与信息揭露的合理仲裁者。当市场力量的结果似乎不受欢迎时，真正的挑战是发掘根本问题，并据此设计对策。判断该问题是有关垄断、卡特尔、限制性的商业成规、自然垄断、再也不需要管制的产业，还是需要某种服务的低收入民众。与其采取极端赞成或反对管制的封闭态度，更明智的做法应是见招拆招。如果政府单单施以管制手段，市场通常会运作得很差；当管制手段也能尊重激励因素与市场力量时，它反而可能运作得很好。</p>
<p>12　主张绝对的零污染是不可行的<br>负外部性与环境：解决环境污染的方法，已经从命令与控制转变为市场导向的激励设计。<br>环保人士有时会把自由市场视为环境的敌人，其实自由市场并不是环境的最大敌人。相较于高收入、市场导向的国家，低收入、市场机制差的国家通常环境问题更严重。例如中国与苏联，便遭遇了严重的污染问题。同时，最近几十年，即使是在经济增长的情况下，美国的空气和水的平均质量也有所改善。或许政府除了促成自由市场之外，也很适合提供法规背景，以确保干净的空气和水。本章我们来研究污染经济学，观察它是如何运作的。</p>
<p>在这里，核心的经济学概念是“外部性”（externality），指在直接的买家与卖家之外，有第三方直接受到这笔交易的影响。自由市场的概念，在某种程度上是基于买家与卖家会根据自身的最佳利益而行动。但是当市场交易对第三方（没有选择涉入该交易）不利时，主张自由市场会使所有人都受益的论点就不成立。<br>外部性可以是正面的或负面的。例如，你的邻居正在举办宴会，找来一个很吵的乐团，邻居快乐地享受音乐，乐团也开心地表演。至于你，身为局外人，可能会有两种反应：如果你喜欢这种音乐，那很棒，你可以享受一场免费的音乐会；如果你不喜欢，那就不妙了，你只好忍受（或是报警）。无论是哪种情况，你的邻居和乐团之间的交易，都没有考虑到你。<br>污染是负外部性（negative externality）最重要的例子。在不受约束的市场交易中，厂商只注意生产商品的私人成本，至于社会成本，是不用支付的生产成本，因此厂商不会将其纳入考虑范围。如果倒垃圾不必花一毛钱，厂商可能会制造很多垃圾；但如果必须付钱处理垃圾，那厂商自然会想办法减少垃圾。同样，与污染有关的公共政策会让那些制造污染的人正视问题，把污染成本纳入考虑范围。<br>用激励取代控制<br>“命令与控制”（command and control）是经济学家专指这类管制政策的用词，它规定了可合法排放污染的最大量。20世纪70年代，美国早期的环保规章即是采用这个方法，当时通过了《清洁空气法案》与《清洁水法案》，而且的确有效。根据美国环保局的统计资料，1970～2001年间，空气微粒含量减少了76%，二氧化硫减少了44%，挥发性有机化合物减少了38%，而一氧化碳减少了19%。空气里的铅含量（对发育中的小孩特别有害）下降了98%，主要是因为使用了无铅汽油。至于水的问题，检测水质是比较难的，过去40年已普遍建立了更好的污水处理厂，采取了更好的废水处理措施，所以水质已经有大幅改善。<br>虽然有这些好消息，但命令与控制的环保规章仍有一些显著缺点。其中之一就是，管制者可能会开始考虑产业利益，这是任何管制制度都可能出现的问题，例如先前讨论的管制俘虏的情境。此外，命令与控制的管制标准通常是无弹性的，甚至明确规定必须使用什么技术来减少何种污染，也不会奖励一开始就避免污染或把污染减少至法定标准以下的创新做法。</p>
<p>命令与控制管制法的替代方案，遵循了市场导向的环保政策大方向。这些政策试图以市场激励来运作，而非命令厂商采取某种行动。这些政策有几种方式，其一是对生产者每单位的污染课征污染税或污染费。这种费用对减少污染创造了明显的激励作用；而且不像命令与控制系统，它能鼓励厂商持续寻找减少污染的方法，而非把污染量减少到低于法定范围一点点就好。这个方法还有很高的弹性，允许生产者自行决定进行污染减排的最佳方法。<br>另一个市场导向的环保政策，是“可交易的许可”（marketable permit）制度。可交易的许可给污染者排放某个污染额度的法律权利，且通常获许可的污染量会随着时间递减。如果污染者排放的污染量未超过许可额度，那么剩下的额度就可以卖给别人，也就是“可交易”这个词的意思。如果新的生产者想进入市场，它必须从某家现有厂商那里购买污染额度。关于可交易的许可，美国已有一些成功案例，例如减少汽油中的铅含量。许可额度就像污染税一样，提供动力让厂商减少污染并创造更环保的技术，只是它的激励方式不是减税，而是让厂商通过污染减排行动而有机会卖出额度赚到钱。最近几年，欧盟就试图利用可交易的许可制度来减少大气中的碳排放量。<br>市场导向环保政策的另一个选择方案，就是以财产权（property right）做激励。想想非洲大象或犀牛的保护问题，如果这些动物不属于任何人所有，那么它们对盗猎者和逐渐萎缩的栖息地都将毫无招架之力。如果你宣布它们的栖息地为保护区，让住在保护区附近的每个人都有来自观光旅游的经济激励去保护这个公园，那么动物周遭的人们就有充分的经济理由来保护它们。<br>过去的20～30年，环保政策已经从单纯的命令与控制转变成市场导向机制。一般而言，经济学家偏好这些机制。<br>当今最大的环境议题之一，是二氧化碳与其他气体排放造成的全球变暖的威胁。从经济与政治立场来看，它是一个有争议的话题。作为一个没有任何气候科学专业知识的经济学家，以下是我的看法。<br>一些知名的气候科学家相信，我们目前的碳排放水平提高了全球环境被严重破坏的风险。这个风险的概率与规模很难衡量，但是，当我们面临巨大风险时，通常值得采取一些保险措施。在这种情况下，“保险”的一种形式是找到方法来限制大气中碳的含量。举例来说，我们可以用命令与控制来规范所有汽车的碳排放最大值，以及每公升燃料行车里程数最小值。我们可以设定工厂与其他污染源的碳排放规则。此外，我们可以制定碳排放税。我们可以对工厂、精炼厂、汽车制造商等单位发行可交易的许可证。我们可以投资研发技术以消除空气中的碳，或鼓励发展不会排碳的替代能源。</p>
<p>然而，想出减少碳排放的方法不难，真正的困难是：用市场导向、弹性的方法来执行，用最低的经济成本来限制碳排放。<br>对很多环保人士而言，这些处理污染的方法都没有抓住重点，因为它们都不能达到零污染。从我务实的经济学家角度来看，必须声明零污染不是一个实际或有用的政策目标，零污染意味着关闭大部分产业和停止大多数经济活动。我们所有的政策选择，无论是命令与控制还是市场导向的环保政策，都需要允许存在一些污染。主张绝对的零污染是不可行的，也不够理性。合理的政策目标是平衡生产效益与污染成本，换言之，让生产的社会成本与社会效益彼此平衡</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>07　折现值是个很重要的观念<br>金融市场与报酬率：就像商品市场或劳动力市场一样，资本市场也可以用同样的供需架构来解释。</p>
<p>人们对资本市场有根深蒂固的偏见。在中世纪，罗马天主教认为索取贷款利息是一种“放高利贷罪”。目前，一些伊斯兰教国家仍然禁止收取利息，你可以]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业维艰8]]></title>
    <link href="http://yoursite.com/2016/03/03/read/%E5%88%9B%E4%B8%9A%E7%BB%B4%E8%89%B08/"/>
    <id>http://yoursite.com/2016/03/03/read/创业维艰8/</id>
    <published>2016-03-03T11:28:23.000Z</published>
    <updated>2016-03-03T11:28:23.000Z</updated>
    <content type="html"><![CDATA[<p>第八章　创业头条法则：没有法则</p>
<p>这些事都打不倒我，<br>只会让我更坚强。<br>我想让你快些来，<br>因为我不能再等待。<br>我知道现在要做出正确选择，<br>因为我不能再错下去。<br>我已等待一整夜，<br>为你等待一整夜。<br>——美国饶舌歌手、唱片制作人坎耶·维斯特《更强大》<br>我们在与惠普协商Opsware公司转让一事时，他们的最初收购价是每股14美元。BMC（美国一家企业管理软件提供商）以14.05美元的价格做出回应，参与收购。紧接着，惠普又将报价提高至14.25美元。我和约翰·奥法雷尔对这一轮招标自有打算。按照估计，如果我们能顺利实施计划，那么最终的成交价应该能达到每股15美元，甚至更高。大家对这样的预期无不喜出望外。</p>
<p>然而，灾难降临了。说得更具体一点，我们聘请的审计公司——安永国际会计公司——几乎毁掉了这笔买卖。</p>
<p>BMC在审计过程中发现，我们有三笔账户交易和他们的审计结果不符。这三笔交易都包含CA条款。CA条款为业内人士所熟知，得名于一家声名狼藉的公司——团结电脑公司，简称CA。该公司曾经在与客户签订的维修合同中耍手段，承诺对方可永久对“X”产品进行免费更新。之后，CA公司把“X”产品改头换面，替换成“Y”产品，再向顾客收取他们以为可以不再付费的软件更新费用。这种把戏相当精明，也相当龌龊。为了捍卫自身的权益，聪明的消费者要求所有的软件供应商今后都将CA条款写进合约中。合约明确规定，如果供应商发行的新版软件中包含了所有旧版软件的功能，只是在此基础上添加了新的卖点，换了新的名称，那么该产品（虽然换了名字）仍然受现有合约的保护，不再向顾客收取额外的更新费用。</p>
<p>对CA条款的解释存在两种可能性。一种是按照它的本意去解释，将其看作是对CA公司不端商业行为的回应；而另一种则是把它看作对产品功能的一种预期。如果你选前者，那就有必要提前确认营业收益；如果你选后者，那就应该明确合同期内营业收益的按比例分摊。无论你选哪一种，现金支付的情况都是一样的。</p>
<p>我们当初签下这三笔含有CA条款的合约时，对它模棱两可的特性是清楚的。因此，我们要求戴夫·普赖斯——我们在安永国际会计公司的合作伙伴——审计所有细节并告知我们该如何解释这项条款。戴夫明白我们的意图，建议我们在这三笔交易中全部选择提前确认营业收益。然而，BMC在安永的合作伙伴得出的审计结果却截然相反，他们认为应该按比例分摊。震惊之余，BMC的这位合作伙伴将该问题提交到了安永国际会计公司的总部。</p>
<p>总部的审计师通过电话告知我，他不同意上述审计结果，责令我们在48小时之内重新申明收益预期。我当时简直不敢相信自己的耳朵。重申收益不仅会压低股价，而且还会毁掉我们正在进行的交易。财务核算没有对现金流产生实际影响，并且我们所做的一切都是基于安永国际会计公司当初的审计结果。假如一开始他们能给出相反的结论，股价就不会下跌。重申收益无疑会让我们走投无路。</p>
<p>这究竟是怎么回事？</p>
<p>我尽量平静下来，小心翼翼地在电话中答道：</p>
<p>“财务核算的初衷是反映合约中我们与客户双方的意图，对吗？”</p>
<p>“对。”</p>
<p>“既然如此，为什么不能通过电话问问这三家客户的意图？如果他们的意图与戴夫·普赖斯得出的结论一致，那就保持原样。如果不一致，我们再重申收益。”</p>
<p>“不，那还不够。你必须让三家客户使用安永国际会计公司的解释条款去修改他们手中的合约。”</p>
<p>“但这三家客户都是大银行，本身就设有风险管理部，不可能在短时间内修改合约。而且，我们目前正在洽谈一笔价值16亿美元的交易，你们这样做会毁了这笔交易的。”</p>
<p>“我们管不着，这是你们的事。”</p>
<p>“可是，我们公司与你们合作已经8年了，付给你们的费用也有几百万美元，而且这一切都是你们的合伙人造成的。假如我们和客户就现有合约的解释能达成口头一致，为什么你还要害我们丢掉这笔买卖？”</p>
<p>“给你们48小时，要么修改合约，要么重申收益。”</p>
<p>戴夫·普赖斯快要哭出来了。</p>
<p>安永国际会计公司总部只关心书面文字，丝毫没有法律精神。他们拒绝做从审计角度和生意角度来讲完全正确的事，一心只想着自己的便利。</p>
<p>我的财务总监戴夫·康特已经面无血色。几百人奋斗8年走到今天，可所有的努力和付出眼看着就要被戴夫亲自挑选的审计公司像抽水马桶一样冲刷一空。在加入Opsware公司之前，戴夫曾在安永国际会计公司供职15年。平时能言善辩的他，此刻几乎说不出话来。我冲所有人大发雷霆，但心里很清楚，无论我说什么都于事无补，只会让戴夫更自责。我转向我的总顾问乔丹·布雷斯洛，问道：“我们需要立刻向收购方说明这个问题吗？”他惴惴不安地答道：</p>
<p>“是的。”</p>
<p>我们向惠普和BMC说明了情况，并告诉它们，我们打算在24小时内通过修改合约的途径来解决这个麻烦。没有一方相信我们。就连我自己都半信半疑。怎么可能说服三家大型银行在一天内修改完手头的合约呢？惠普和BMC这两个买家作壁上观，准备根据事态的发展随时调整其收购计划和报价。</p>
<p>与此同时，我和戴夫、马克·克兰尼开始投入紧张的工作。在财务会议室里，我们开始勾勒关系图，在所有认识的人之间寻找关联，试图找到合适的人选来挽救这笔交易。我给每一位董事会成员打电话，了解他们是否在这三家银行里有存款，是否能和关键人物说得上话。克兰尼与销售部和财务部的人员一直守候在电话机旁。乔丹和戴夫则草拟出了10种修正合约的措辞。我们熬了一个通宵，戴夫自始至终都是一副心脏病即将发作的样子。第二天上午11点，奇迹出现了。三家银行都为我们修改了合约，所花时间还不足24小时。我们不用重申收益了。</p>
<p>意料之中的是，BMC因为这次事件受了点惊吓，余悸未平，放弃了收购。惠普没有打退堂鼓，却因为这个“污点”把报价降到了每股13.75美元。</p>
<p>那天晚上，我们在公司办公室召开了董事会，讨论惠普的收购条件，并宣布BMC退出收购。大家一致认为应该接受惠普的收购价，只有我一个人反对。我坚持以他们先前提出的14.25美元出售Opsware公司，少一分钱都不行。比尔·坎贝尔看着我，那样子就像在看一个久经沙场的将军。我一天一夜没睡觉，不知道自己的意识是否清晰，决定是否正确，我只知道，我辛苦等待一整晚是为了到达正确的彼岸，而不是在岔路上越走越远。</p>
<p>我整理了一下思路，重申了我的立场：“惠普曾经提出了14.25美元的收购价，原因只有一个：我们是最棒的，我们代表着业界的最高标准。这才是整件事情最重要的前提。一旦我们接受现在这个打了折扣的报价，就等于承认我们不代表最高标准，那买卖还是做不成。”约翰·奥法雷尔赞许地点点头。最后，董事会忐忑不安地接受了我的意见。</p>
<p>我告诉惠普公司，必须以14.25美元收购Opsware公司，否则免谈。两个小时后，对方答应了。这期间，戴夫·康特的脸色一直都没有缓过来。我们做成了这笔交易，如果不是安永国际会计公司背后拆台的行为，我们本可以多赚一个亿。直至今日，我都对安永国际会计公司耿耿于怀。</p>
<p>讲述这段经历是想提醒大家，当你以为在生意场上可以信赖别人时，结局往往令你大失所望。出现这种情况时，一味地计较谁是谁非毫无意义。你需要做的，就是打起精神去应对那些危机。</p>
<p>解决问责与创意之间的矛盾</p>
<p>一位软件工程师在现有产品架构中发现了会严重削弱产品功能的漏洞。他说，自己可以在三个月内完成对这一漏洞的修复。每个人都认为，用三个月的时间来完成一次漏洞修复完全可以接受。可结果是，虽然他的建议是正确的，但整个过程持续了9个月。这时，你会奖励他的大胆创新呢，还是追究他未能按期完工的责任？</p>
<p>如果你像控方律师一样，严格按照合同条款的规定对他提起诉讼，那肯定会打击他和所有人的积极性，使大家以后不敢再做任何担风险的事情。假如你立场坚定地要处罚他，那就别怪以后有人拿“忙不过来”这样的借口来搪塞你，不帮你解决棘手的问题。</p>
<p>换一种做法，如果你不追究他未能按期完工的责任，那些能保质保量按时交付任务的员工就会觉得自己像个傻瓜。既然总裁可以奖励那个延期6个月才完工的家伙，我为什么还要加班加点地赶在最后期限前完工？如果你手下那些最勤勉、最具生产力的员工觉得自己被愚弄了，罪魁祸首就是你，因为你没能让别人对自己的行为负责。这就是所谓的问责与创意之间的矛盾。</p>
<p>想要解决这个矛盾，让我们先来做一个最基本的推论。你是否觉得自己的员工总体上具备智慧、创造力以及工作热情？还是觉得他们既懒惰又奸猾，天天无所事事？如果你的推论是后者，那不妨放弃在你的公司搞创新的想法，因为你根本无法做到。如果你持前一种看法，相信自己的员工有能力、有活力，并且事实证明的确如此，那自然再好不过。可是，你必须问责到位，否则就会背上愚弄他人的嫌疑。对此，你怎么看？</p>
<p>我们从以下几个方面来分析一下问责制：努力程度，承诺，结果。</p>
<p>努力程度</p>
<p>这是比较容易考量的一个因素。要成为世界一流的大公司，一流的工作态度必不可少。假如有人在工作中敷衍了事，不尽最大努力，那就必须要受到处罚。</p>
<p>承诺</p>
<p>许多经营得当的公司都会有这样一些管理宗旨：勇于承诺，兑现承诺。诚然，如果你参与了某项任务但又没有按要求完成，你会让每个人都大失所望，而这种失望情绪是极具传染性的。要求人们对承诺负责任，这是确保工作顺利完成的一个重要因素。兑现承诺的难度系数有高有低，因此问责的程度也会有相应变化。写一份市场宣传资料或是发一封电子邮件与完成一个软件项目绝不是一码事。如果谁完不成前面这项任务，你必须严肃处理。而后者则可能涉及计算机科学中的根本性问题，情况要复杂得多，因此你必须审慎对待。</p>
<p>结果</p>
<p>根据结果确定问责程度是一个比较复杂的问题。如果有人像开篇故事里那样没有按期交工，你是否应该追究他的责任？答案是，不一定。你得根据以下几条标准来做决定：</p>
<p>•员工的资历。和年轻员工比起来，老员工能更准确地预测未来的工作结果。</p>
<p>•任务的难度。有些任务确实难度很大。当你的产品在竞争中技不如人时，当经济衰退无孔不入时，你会发现，想把产品销量提升上去简直比登天还难。当你想搭建一个平台，使其能自动高效地执行串行程序和并行程序，以便最终实现扩展程序时，你也会发现这其实很难。我们很难对未来做出准确的预期，并且很难达到这个预期。所以，在判断结果是否达到预期时，你务必要考虑任务难度这个因素。</p>
<p>•是否存在不必要的风险。尽管你不想因为人们甘冒风险、大胆创新而去责罚他们，但也要记住，并非所有的风险都是必要的。虽说不入虎穴焉得虎子，但有时深入虎穴也不一定能捉到虎子。喝下一整瓶杰克·丹尼酒然后跟在汽车后面跑，这算得上是勇气可嘉，但就算你追上了汽车，也得不到什么奖励。当你的员工没能实现承诺时，想想看，他是只有匹夫之勇而不考虑后果呢，还是想法一流而只是没能成功？</p>
<p>回过头来看问题</p>
<p>现在，我们回过头来看看开篇提到的那个问题，考虑下面这几个因素：</p>
<p>1.他是资深员工吗？如果他是你公司的总设计师，那你就得让他好好提高一下自己规划工作的能力，以免拖累公司。如果他入行时间不久，那就该借此机会好好点拨点拨他，而不是一味地指责他。</p>
<p>2.任务的难度如何？如果是一次足以改天换地、创造奇迹的任务，你就不能大发雷霆，相反，你得感谢他。如果仅仅是一个拖沓了太长时间的小项目，你就得认真解决。</p>
<p>3.这是一次正确的大胆尝试吗？新产品是否能在中短期占领市场？如果是，无论他是用了3个月还是9个月，这都是一次正确的尝试。今后再遇到类似情况时，你也应该持这个态度，而不必绞尽脑汁苦苦思索。</p>
<p>小结</p>
<p>在高科技产业中，你很难未卜先知。平庸与杰出之间的差距往往就源于你的态度，源于你是否放手让员工大胆创新，不折不扣地实行问责制。责任固然重要，但也并不是唯一的重点。</p>
<p>“怪诞星期五”管理策略</p>
<p>多年前，我曾陷入一次棘手的管理困境。公司里两个非常优秀的团队——客户支持部与销售技术部——针尖对麦芒地掐起架来。技术部提出了一系列措辞犀利的指控，谴责客户部人员不及时配合他们的工作，还拒绝修复产品存在的问题，已经严重阻碍了销售，影响到了客户满意度。与此同时，客户部也抱怨说，技术部未经授权就安装木马程序，不听从他们的有效修改建议，还大惊小怪地把每件事都当成头等大事去对待。除了这些具体矛盾外，这两个部门本来就积怨甚深。最糟糕的是，这两个部门得经常合作完成公司的任务。两支队伍都配有最出色的工作人员和最有能力的负责人，所以不可能解雇任何人或者降任何人的职。我实在是没辙了。</p>
<p>就在那时，我碰巧看到了一部经典影片《怪诞星期五》，现在想想，那好似上天的安排。这部影片的主演是演技出众的巴巴拉·哈里斯和无人能比的朱迪·福斯特（还有一部翻拍版，主演是杰米·李·柯蒂斯和问题才女林赛·洛汉）。影片中，母亲和女儿由于缺乏沟通而关系紧张，因此，她们希望能通过互换身份来增进对彼此的了解。在电影的奇幻世界中，她们实现了这个愿望。</p>
<p>随着故事情节的发展，她们交换了身体，体验到了对方所看到的世界。最后，母女二人换回各自的原形，自此变成了知心朋友。在看过这部影片的两个版本之后，我觉得自己已经找到了对策，那就是，“怪诞星期五”管理策略。</p>
<p>次日，我通知技术部和客户部的主管，要给他们二人调换工作岗位。我对他们解释说，你们可以像影片中的朱迪·福斯特和巴巴拉·哈里斯一样，调换身体，但是要永久保留原有的思想。二人最初的反应不亚于翻拍版中林赛·洛汉和杰米·李·柯蒂斯一起尖叫时的惊恐模样。</p>
<p>然而，在对调的岗位上仅仅工作了一周，这两位主管就发现了矛盾的症结所在。接着，他们快速行动了起来，采取简单的工作流程，消除了冲突，彼此和谐共事。自那天起，一直到公司被转让，销售技术部与客户支持部始终都是公司里合作最好的一组搭档，这多亏了《怪诞星期五》——这部也许是有史以来最有寓意的管理学经典电影。</p>
<p>如何打造一流的管理团队？</p>
<p>作为CEO，你应该清楚一点：没有一流的团队，就无法创建一流的公司。但怎样才能知道你手下的管理人员是不是达到了这个标准呢？另外，即使他在被你雇用的那一刻达到了世界一流的标准，他是否能继续保持这个标准？如果不能，他有没有可能重新达到这个标准？</p>
<p>这些复杂的问题会让招贤纳士的过程变得更加麻烦。每一位CEO的初衷都是寻觅到最优秀的人才，然后不遗余力地积极争取他们的加入。如果对方同意了，CEO会如获至宝。</p>
<p>所以说，我们很容易先入为主地判断一个人，哪怕他连一天的班都没有上，我们还是会觉得他是最棒的，就因为他是我们精挑细选招聘到的人。可惜的是，那些被当作宝贝一样吸纳进公司的管理人员，会离你的期望值渐行渐远。假如你是个体育迷，你一定清楚，没有永远的世界冠军。今天你是球星特雷尔·欧文斯，明天你就是普通人特雷尔·欧文斯。尽管管理人员的职业生涯不像运动员的职业生涯那么短暂，但是公司、市场还有高科技的发展变化之快是体育运动所无法比拟的。因此，本年度在初创业的公司里春风得意的管理人才，很可能在下一年度就面临被淘汰的危险，因为最初的小公司已经成长为拥有400名员工、年收益达到1亿美元的大型公司。</p>
<p>标准</p>
<p>你需要明确的第一个问题是，某些人精彩的履历和出色的面试表现并不意味着他能在你的公司做出极佳的业绩。这个世界奉行两种评价标准，一是根据你的表现，二是根据你的身份。你可以选择前者，也可以选择后者。</p>
<p>你必须以高标准要求员工，但是何谓高标准？我在前文已谈过这个问题，在此不再赘述。此外，请谨记以下几点：</p>
<p>•在雇用某个人时，你并不了解他的全部。虽然这会让你觉得有些尴尬，但是为适应市场需求和激烈竞争，调整并提高你对他的要求是完全合乎情理的。</p>
<p>•学会平衡。在一开始花费大量的时间来指导一个副手很正常。但是，如果你发现自己还和聘请或提拔这个副手之前一样忙碌，那就说明他的工作不称职。</p>
<p>•你是CEO，不负责培养人才。我从CEO生涯中总结出的最令我沮丧的教训就是，我不可以做副手们的辅导员。他们所在的工作岗位要求他们基本上能独当一面。和我以前做总经理时不一样的是，我现在没有时间去从头培养一个副手。对于公司中的其他岗位来说，手把手地传授经验是可行且必要的，但对于管理层人员却并非如此。如果你的副手总是需要太多的指导和培养，他就是不合格的。</p>
<p>当然，有时CEO们的衡量标准会过分苛刻。正如我在前文中提到的，你不能也不必拿某个管理人员两年后的工作要求来衡量他现在的能力。如果你有这种倾向，那务必要回避。一定要以当下的情况来衡量他的表现。</p>
<p>关于期望值和忠诚度</p>
<p>假如你的管理人员表现出众而且对公司忠心耿耿，你该怎么和他沟通这些问题？如何告诉他虽然他现在干得不错，但如果明年跟不上公司的发展变化，你就有可能解雇他？</p>
<p>过去，我在点评管理人员的工作时，总是会说：“你在目前这个岗位上干得很好，但是根据公司的发展规划，我们的员工数量到明年会增加一倍。因此，到时你的工作会有所不同，而我也会根据新的标准来重新评估你的表现。如果你觉得这办法不错，那就推广至每一个团队成员，也包括我。”</p>
<p>在提出这样的思路导向时，务必要向管理人员说明一点，公司在扩大规模之后，他将接手的是一份全新的工作。这意味着，在旧岗位上实现的辉煌不一定能直接转换为新岗位上的成就。事实上，人们往往难以胜任新工作，原因就是他们延续了过去的工作方式，没能及时调整到新的状态中来。</p>
<p>但是，忠诚度的问题怎么解决？如果你是在现有管理团队的协助下让公司的规模扩大了10倍，你又怎么能因为他们跟不上这个大型团队的发展速度而开除他们？答案是，你得把你的员工放在第一位——那些管理人员手下的普通员工，那些从事基本工作的工程师、营销人员、销售人员、财务人员，以及人力资源部员工。你应该为他们搭建一支世界一流的管理团队，这才是头等大事。</p>
<p>该不该转让公司？</p>
<p>该不该转让公司，这无疑是CEO所做的最艰难的决定之一。从常理上来看，转让公司还是继续独立经营公司涉及诸多因素，而大部分都是些无法预知的因素。假如你是公司创始人，基于理性做出决断并不难。</p>
<p>没错，只要不涉及感情，这个问题就简单得多。只可惜，转让公司往往是一项掺杂了太多情感和个人因素的行为。</p>
<p>转让类型</p>
<p>为便于讨论，我在此先介绍一下转让技术型公司的三种方式：</p>
<p>1.人才和/或技术。这是指单纯转让某一公司的技术和/或人才。这种类型的转让价格为500~5 000美元。</p>
<p>2.产品。只转让某公司的产品，不转让业务。收购方会结合自身的营销能力销售现有产品。这种类型的转让价格为2 500万~2 5亿美元。</p>
<p>3.业务。转让公司的主营业务。收购方会全方位衡量对方公司的价值，包括产品、销量和营销，而不仅仅看人员和技术。这种类型的转让通常以财务指标为主要依据，成交价有可能令人咂舌（比如微软出价300亿美元收购雅虎）。</p>
<p>我在这里要讨论的主要是第三类：业务转让。此外，也涉及一些产品转让的问题。</p>
<p>理智</p>
<p>在分析是否该转让公司这个问题时，你最好先问问自己：</p>
<p>1.我是否在一个很大的市场中抢占了先机？</p>
<p>2.我是否有把握成为这个市场中的头号种子选手？</p>
<p>如果你抢占了先机，那就继续独自经营。没人有实力买下你的公司，因为没人能预支给你如此庞大的一笔数额。以谷歌公司为例，据说在创业初期，谷歌就收到过多家公司的收购邀请，出价超过10亿美元。这在当时是非常优厚的条件。然而，鉴于最终的市场规模，转让公司对谷歌来说毫无意义。事实上，谷歌无论以任何价格转让给任何有意收购的公司，都没有什么意义。为什么？因为谷歌拓展的市场远远大于所有潜在收购方所占有的市场总额，它开创的业务无人能及，因此也就使它稳稳地占据了业内的龙头地位。</p>
<p>再想想与此相反的一个例子，Pointcast。Pointcast公司是第一波引发互联网应用程序风潮的公司之一。在硅谷和高科技行业，它算得上是一家热门公司。Pointcast曾经拒绝过10亿美元的收购条件，后来，由于其产品架构中的缺陷，客户停用了产品。公司在一夜之间元气大伤，再也没能崛起。最后，Pointcast以低价被转让。</p>
<p>因此，你务必要弄清：1.如今占领的市场是否比以往任何时候都要大得多？2.我们能做第一吗？如果有一个问题的答案是否定的，那你就得考虑转让公司了。假如两个问题的答案都是肯定的，那么转让公司就等于是把你和你的员工给低价出售了。</p>
<p>可惜的是，这两个问题并不容易回答。想要给出正确的答案，你还得考虑以下这些问题：市场是什么？竞争对手会发展成什么样？谷歌占领的是搜索引擎市场还是门户网站市场？现在回想起来，谷歌主要是占领了搜索引擎市场，但是大部分人觉得它是一个门户网站。雅虎当时是它在门户网站市场的一个劲敌，但在搜索引擎领域，雅虎对其并不构成威胁。如果谷歌当时真的主营门户网站，那么转让出去也不失为上策。Pointcast的陨落就是因为高估了自己的市场占有率。有趣的是，导致Pointcast走下坡路的恰恰是它自己在产品执行中出现的纰漏。</p>
<p>下面来说说Opsware公司。为什么我要卖掉它？为什么我拖到那个时候才卖掉它？</p>
<p>经营Opsware公司时，我们最初涉足的是服务器自动化领域。在接到第一轮询价和发盘时，我们的客户数量不足50名。当时，我坚信至少能发展10 000名目标客户，相信我们完全有能力做到最好。此外，虽然我知道市场格局日新月异，但依然认为我们可以赶在别人前面进军网络和存储（数据中心自动化）市场，然后将其一举拿下。因此，按照30%的市场占有率来估计，如果有人想要买下我的公司，那就必须以我们当时市值60倍的价格来收购。果然，没人愿意出这个高价。</p>
<p>当我们逐渐拥有数百名客户，并且也成功地进军到服务器自动化领域时，我们依然是业内的老大，身价比先前的收购成交价还要高。那时，Opsware公司与主要竞争对手BladeLogic公司都已经羽翼渐丰（具有遍布全球的销售网络、外包式的专业服务等）。这一点很重要，它意味着某家大型公司可以从我们当中挑选一家进行收购，并且有可能顺利地使之运转起来。（大型企业不一定能操纵得了小公司，因为小公司知识产权中的重头戏就是销售方法，而这是大型企业所缺乏的。）</p>
<p>随着态势的明朗，BMC成为这个要做“二选一”选择题的企业。因此，Opsware公司是否能在未来继续担当业内老大这道题就得重新做一遍了，方法如下：</p>
<p>1.我们的优势将体现在系统和网络管理领域，而不是服务器自动化领域。因为后者和文字处理软件一样，最终也将被一个更大的市场所兼容。</p>
<p>2.要想成为最好的，我们就得将BMC和BladeLogic一起打败，因为BMC是比我们这两家小公司都要强劲得多的对手。</p>
<p>最终，由于出现了根本性的技术变革——虚拟化，市场也发生了改变。虚拟化意味着整个市场要重新进行调整，于是我们又投入到新一轮的研发竞争中，以期能建构最优秀的管理模式，适应虚拟化环境。这就使得转让公司的计划被搁置了很长一段时间。</p>
<p>综合以上因素，我们认为，至少可以考虑一下转让公司的可能性，并且启动一个短期计划，以掌握并购市场中的各方利益。</p>
<p>在此过程中，有11家公司提出了各自的收购意向。这让我意识到，就Opsware公司的市场价格而言，我们已经达到了局部最大值。也就是说，这些潜在的买家们对Opsware公司的市场价值深信不疑，而我们也认定，公司在未来不可能再有更大的收益。在进行了大量的深入分析和自我反思之后，我的最终结论是，目前的这个最大值高于我们公司在未来3~5年有望实现的收益，因此，我以16.5亿美元的价格将公司转让给了惠普。我认为并且也希望这是一个正确的决定。</p>
<p>情感</p>
<p>在做这样的决定时，情感因素是相当可笑的一个部分，因为它会让你陷入人格分裂的窘境。</p>
<p>在亲自招募到每一位员工，让每一位员工甘愿为你创办兴旺发达、独立自主的企业这一宏伟目标努力奋斗时，你怎么能将公司转让出去？怎么能将自己的梦想转让出去？</p>
<p>你怎么能让自己和无论亲疏远近的家人结束这种财政上完全独立的生活？做生意难道不就是为了赚钱吗？赚多少钱才算够？</p>
<p>你怎样才能调和这两种声音：留下？转让？很显然，你没法调和这二者，唯一的办法就是给这两种声音都装上消音器，要领如下：</p>
<p>•给CEO付工资。大部分风投资本家都喜欢那些把全部身家都投在公司的老板，一旦公司倒闭，他就输得分文不剩。因此，他们认为，CEO应该只拿极低的薪水。总的说来，这是个不错的想法，因为当公司不景气时，CEO们很容易想丢掉包袱，投入的全部家产会迫使他们继续坚持。然而，在现实情况中，公司一旦成立，给CEO支付工资就是比较合理的做法。具体地说，一旦公司有了自己的业务，并且成为具备吸引力的收购对象，那就应该给CEO支付工资，这可以保证“留下或转让”这个决定不会直接受CEO个人财务状况的影响，就好比是：“我不认为应该转让公司，但是我现在和丈夫孩子住在850平米的公寓里，不转让，就只有离婚了。”</p>
<p>•对公司前景思路清晰，态度明朗。每一位CEO都会从员工那里听到这样的问题：你会转让公司吗？这是一个很难回答的问题。如果CEO说“会”，那么员工会理解为他要卖掉公司。如果CEO说“如果价格合适”，那么员工就会揣测这个价格，并且会问个没完。假如公司价值真的达到了这个价格，员工就会认为公司即将被转让。如果CEO闪烁其词，拿“不会转让公司”这样的话搪塞员工，一旦真的转让公司，员工就会觉得自己被愚弄了。更重要的是，CEO也会觉得他在糊弄员工，这种自责的感觉会在他的决策过程中挥之不去。为了避免这样的困境，你可以参照前一章中提到的分析原则：如果公司在一个很大的市场中占领了先机，并且极有可能成为同行业中的顶尖者，那么就让公司继续独立运作。若不是，就不妨转让。这条原则考虑的是投资人和员工双方面的利益。</p>
<p>小结</p>
<p>你很难轻而易举地在“留下”和“转让”这二者中做出选择。因此，让自己在理智和情感上做好准备是有必要的。</p>
<p>第九章　是结束，也是开始</p>
<p>我们走在同一条路上，穿的却是各自的鞋。<br>我们住在同一栋楼里，看到的却是不同的风景。<br>——德里克《云端之上》<br>转让Opsware公司之后的一年，我在惠普负责软件业务。之后，我对自己的未来有了进一步的思考：我该另起炉灶重新办一家公司吗？还是去其他公司任CEO？我该退休吗？还是该做些完全不同的事？</p>
<p>越是畅想未来，就越会回忆起自己的过去。假如我当初没有遇到比尔·坎贝尔，一切会怎样？我该如何化解一次又一次的危机？为什么企业家艺术如此深奥？是不是每个CEO都会遇到相同的问题？如果是，为什么没有人把这些问题记录下来？为什么新兴公司的顾问和风投资本家很少有亲自办公司的经验？</p>
<p>当这些问题一再萦绕于我的脑海时，我给马克·安德森发了一条信息：“我们应该创办一家风险投资公司。选择合伙人的宗旨就定为‘有经验者优先’，给那些打算创办公司的人提供咨询，你本身就得有经营公司的经验。”他的回答让我意外：“我也有同感。”</p>
<p>一些必要的经验</p>
<p>在深入思考这个问题时，我回想起自己当年拿到的第一笔真正意义上的风险投资。</p>
<p>那是在1999年，在筹集到Loudcloud公司的第一轮资金后，我和我的联合创始人去拜访这家新的风投公司并会见他们的全体成员。我还记得，当时作为创始人兼CEO的我对于面见自己的大财神、共商大业兴奋不已。然而，对话气氛一度急转直下，他们的一位资深合伙人戴维·贝尔尼当着所有人的面问我：“你打算什么时候聘请一位真正的CEO？”</p>
<p>这就像迎头泼来的一盆冷水。公司最大的投资人当着我搭档的面质疑我是个冒牌CEO。我反问道：“您的意思是？”——希望他能修正自己的说法，好让我挽回一点儿面子。没想到他变本加厉：“我的意思是，你该找一位曾经为大公司做过组织设计、人脉强大且有现成客户资源的人来做CEO。”</p>
<p>我羞愧难当，觉得快要喘不过气来了。他无视我的CEO身份就已经够糟的了，更糟的是，在某种程度上，我认同他的观点。他说的那些能力我都没有。在那之前，我从来都没有做过那些事，也不认识多少高管。我是白手起家打天下的CEO，不是职业CEO。我管理公司的时间短得可怜。我能足够快地掌握当CEO的技巧并且构建起自己的人际关系网络和客户网络吗？还是说我会把公司搞砸？这个疑问折磨了我好几个月。</p>
<p>第二年，不论干得好与不好，我依然在CEO的位子上坐着。我用常人难以想象的努力争取成为让大家都满意的CEO。多亏了这番努力以及朋友和顾问们的帮助，尤其是比尔·坎贝尔，公司终于坚持了下来，并且日益蓬勃地发展着。</p>
<p>这段经历已经过去很久，但是，我没有一天不去想那次和戴维·贝尔尼的对话。我总是扪心自问，究竟要怎样做才算进步？究竟怎样才能获得帮助以提高自己的能力、拓展自己的资源？</p>
<p>我与马克经常讨论这个问题。我们一直心有不甘，作为创始人兼CEO，为什么我们必须在投资人质疑的目光中向他们证明我们的实力，而不是让投资人相信我们有能力经营好自己一手创办的公司？实际上，这样的讨论最终促成了日后安德森·霍洛维茨风投公司的成立。</p>
<p>首先，我们在对风险投资这个行业进行研究时，偶然发现了一个潜在的问题。一直以来，赢利的风险投资都集中在极少数公司手中，而且始终是这几家公司。在有着800多家风投公司市场中，大约只有6家可以给他们的投资人带来高额的回报。随着调查的深入，我们发现了一个很有意思的原因：最好的企业家只选择最好的风投公司进行合作。由于风投公司不重视经营手段和经营理念（大部分公司几乎都不做公关宣传，也极少谈论其业务），所以只能让人根据其投资记录去进行选择。因此，有着最佳投资记录的公司就会良性循环，业绩越来越出色，没有业绩的新公司则逐渐被埋没。</p>
<p>我们必须得想出对策来打破这块坚冰，成为那些优秀企业家青睐的风投公司。但是，究竟该怎么做呢？</p>
<p>我们需要改变企业家选择风投公司时的衡量标准。时移世易，我们解决这个问题的机会来了。我和马克在20世纪90年代中期初涉企业时，并不认识太多的企业家。当时，我们没有真的把自己看成是一个行业或是社区中的一分子，仅仅是忙于干好自己的事。我们公司成立于互联网时代初期，比Facebook、Twitter，还有其他一些社交网站平台都要早。由于那时没有专供企业家交流的平台，所以我们也很少和其他企业家互通有无，基本都是埋头苦干。而这种局面在过去10年发生了变化，企业家们如今会相互结识、往来、聚会，进行各种各样的社交活动，已经形成了一个真正的社区。鉴于这一点，如果我们能提出更优厚的条件，那么在社交活动中实施的口头宣传策略就会发挥出它不曾具备的优势。</p>
<p>我们需要更上一层楼，也需要与众不同。在考虑如何才能具备更多的优点和特点时，我们的核心思想主要基于以下两点：第一，技术型创始人是经营技术型公司的最佳人选。那些令我们钦佩的历史悠久的技术型公司——惠普、英特尔、亚马逊、苹果、谷歌、Facebook——都曾由它们的创始人经营。更准确地说，公司是由开天辟地的那个人在经营。第二，技术性创始人创办公司后成为CEO的过程异常艰难，我就是个明证。但是，大多数风投公司往往都是以更换CEO来解决问题，而不是为其提供扶持，帮助创始人成长。</p>
<p>我和马克想，如果我们的风投公司专门以帮助技术型创始人经营公司为宗旨，那就可以树立品牌，创下口碑，即便没有以往的投资业绩，我们借此也有望一跃成为名列前茅的风投公司。根据研究，我们发现，创始人CEO与职业CEO相比主要存在两方面的不足：</p>
<p>1.管理能力。员工管理、组织设计、销售安排等方面的能力都是创始人CEO所缺乏的。</p>
<p>2.关系网络。职业CEO认识大批企业高管、潜在客户、合作伙伴、媒体人士、投资人士，还建立了其他一些重要的生意联系。而技术性创始人却只认识优秀的工程师，只知道如何编写程序。</p>
<p>我们考虑的下一个问题是，风投公司如何才能帮助创始人CEO弥补这些不足？</p>
<p>事实证明，弥补CEO管理能力的不足是一件相当困难的事。因为，要想当好CEO，唯一的办法就是亲身一试。诚然，我们可以纸上谈兵似的传授一些管理技巧，但是，关起门来学习如何做CEO就好比关起门来学习如何当好橄榄球比赛中的四分位球员一样。就算给你授课的人是佩顿·曼宁或者汤姆·布拉迪，如果没有实践经验，你一上场就会被淘汰。</p>
<p>虽然我们不可能给创始人兼CEO传授他所需要的所有技能，但我们完全可以为其提供指导，以加速他的学习过程。因此，我们选择投资合伙人的标准就是他们能够为那些艰难起步的创始人兼CEO提供有效的指导。（当然，并非所有的创始人都想做CEO。对于有些公司而言，聘请职业CEO来统领大局才是正确的选择。在这种情况下，我们的工作重点是帮助创始人来寻找合适的CEO，然后扶持他顺利接管公司，与创始人共谋大计。）正因如此，我们挑选的合伙人必须要有创办公司或者担当CEO的经验，他们的工作重心就是帮助创始人成长为优秀的CEO。我们认为，这个想法简单明了，肯定能行得通。</p>
<p>接下来，我们要考虑的就是如何使CEO关系网络系统化和专业化。为此，我们借鉴了我的朋友，同时也是Opsware董事会成员迈克尔·奥维兹的经验和意见。35年前，迈克尔创办了创新艺人经纪公司，一家重量级的好莱坞精英人才代理公司。创业之初，迈克尔的想法并不明朗。这个行业始于20世纪初期歌舞剧盛行的年代，在之后的70多年间未曾有过大的变化。当时的迈克尔还是威廉·莫里斯经纪公司——当时的行业巨头——一个初出茅庐的新人。在别人看来，放弃这样一份前程似锦的工作而去追逐遥不可及的梦想太不可理喻，但是迈克尔心里很清楚，如果他能够创办一家优秀的经纪公司，将全世界最出色的人才悉数揽来，他就有可能将行业的经营模式从以集团为核心转向以人才为核心，这才是他心目中正确的运作模式。</p>
<p>当年，经纪公司基本上是由隶属于公司的各个经纪人合并而成的松散机构。这些经纪人效力于同一家公司，但在很大程度上却各行其是，每个人都只负责与他们单线联系的部分艺人。比如说，经纪人A可能将达斯汀·霍夫曼介绍给华纳兄弟影业，经纪公司要想和达斯汀·霍夫曼或者华纳兄弟影业取得联系，都只能通过经纪人A。其他经纪人和客户之间也不可能自动建立联系。这种传统的运作模式听起来和以往的风投行业很相似，风投资本家服务于同一家公司，却掌握着各自的关系网络和客户资料。</p>
<p>迈克尔希望能打破这种格局，将经纪人各自独立的业务整合在一起，以使大家在这张纵横交错的关系网上尽可能多地为客户寻找机遇。这样一来，公司的业务能力将是单个经纪人业务能力的100倍。为了将这一想法付诸实践，迈克尔和他的联合创始人约定，他们在几年内将不拿薪水，把所有的佣金都用于打造迈克尔所谓的“特许经营权”上。特许经营权是指由专人负责每一个相关领域的关系网络和客户资料，包括出版业、国际交流领域和音乐领域等。他的想法奏效了。在不到15年的时间里，创新艺人经纪公司就代理了好莱坞90%的顶尖明星，并且成功地改写了行业规则，那就是：让艺人在寻找发展机遇时获得更多的选择权和更大的经济利益。</p>
<p>我们决定仿照创新艺人经纪公司的经营理念，事实上，安德森·霍洛维茨公司的员工与创新艺人经纪公司最初的员工一样，都被称作“合伙人”。迈克尔觉得这样的头衔恰如其分，但是别人可不这么想。他们都认为应该做出相应的改变：“这是硅谷，不是好莱坞。你们太不懂规矩了。”然而，在迈克尔的认可和热情支持下，我们坚持了自己的做法。考虑到风险投资的特点，我们决定构建如下这些网络：</p>
<p>•大型公司。每一家刚起步的公司都必须和大公司有业务往来，要么是买卖关系，要么是合作关系。</p>
<p>•管理人员。要想成功，管理人才必不可少。</p>
<p>•技术人员。在高科技行业，优秀的技术人才越多越好。</p>
<p>•媒体人员和分析师。我们公司有一句口头禅：会推销，有钱赚；羞答答，没饭吃。</p>
<p>•投资人和收购方。风投资本家的本职工作就是投资和融资。</p>
<p>一旦规划好公司的发展模式，下一步就该考虑如何让企业家们知道我们的与众不同之处。这似乎有些棘手，因为此前还从未有哪家大型风投公司做过这类市场宣传。我们觉得这背后一定有一个很重要的原因，只是百思不得其解。最后，还是迈克尔揭晓了答案。他发现，成立于20世纪四五十年代的那些最早的风投公司，都是参照早期投资银行的运作模式来经营的。这些银行不设公关部，因为它们都曾为战争时期的交战双方提供过资金援助，所以不适合做公开宣传。这个发现，加上我们想要与行业寡头对着干的本能，促成了安德森·霍洛维茨公司的成立。在给公司命名时，我们面临的最大难题就是，作为一家公司，我们一无所有。没有投资业绩，没有客户档案，什么都没有。好在人们还认识我们俩，尤其是熟悉马克。因此我建议，“与其凭空想一个名字，不如就利用你的名字怎么样？”马克觉得这个提议挺有道理，但是在输入网址时，人们不可能键入“Andreessen Horowitz”这些字母。过去，在能够实现国际化的编程语言问世之前，我们会借助老式计算机编程来对编码进行“国际化”加工。我们将国际化（即internationalization）简称为“I18N”，即英文单词的首尾字符加中间18个字符。因此，我们决定将公司的网址定名为“a16z”，即Andreessen Horowitz的首尾字符a和z，中间加16个字符。</p>
<p>我们聘请了由玛吉特·温玛切斯带领的Outcast营销公司，希望借助它来为公司造势。我们之所以打破了风投行业不做公关策划的惯例，是希望让大家多多了解我们公司的经营宗旨。玛吉特是个德国人，其父务农养猪，而她的才能却大大超出了一个养猪户的期望。头脑灵活、心思缜密的玛吉特算得上是公关业界的贝比鲁斯（美国棒球巨星）。她调动自己的关系网，帮助马克以山姆大叔般的形象登上了2009年《财富》杂志的封面。安德森·霍洛维茨公司就这样一炮打响，而在那时，公司还只有我和马克两个光杆司令。</p>
<p>经营Loudcloud公司和Opsware公司长达8年，我已经积累了很多难能可贵的经验，因此组建一支团队不在话下。我深知，用人标准应当“宁缺毋滥”，也懂得“适合”的重要性。这个世界上聪明人很多，但仅有聪明是远远不够的。我需要的人才，要能够在合适的岗位上发挥出他最大的优势，要能够安于岗位职责，并且还要能对自己肩负的使命深信不疑，那就是，将硅谷变成一个更有利于企业生存发展的地方。</p>
<p>斯科特·库珀是我们招来的第一个员工。当年他曾在Opsware公司担任财务主管，为我工作近8年。我不敢说他对那份工作是否满意，但他卓越的工作表现证明了一切。那段时间，他负责客户支持、计划制订还有技术操作，没有一样是他原本想要干的。他钟爱于三种任务：经营、策划、交易。如果给他安排这些事情，他就会乐此不疲。但是在Opsware公司，他只接触了两样自己钟情的工作。对他而言，不能做具体的业务是一种煎熬，就像是将困兽关入了笼中，而我用Opsware公司把他困了8年。因此，在筹划新公司时，我脑海中闪过的第一个念头就是：终于给库珀找到了一份合适的工作。我给他的职位是首席运营官。</p>
<p>在接下来完善员工队伍时，我们选择了Opsware公司曾经的销售主管马克·克兰尼，由他来负责搭建大公司关系网；香农·卡拉汉，曾任招聘部和人力资源部主管，负责搭建技术网络；玛吉特·温玛切斯，公关界的“全垒打之王”，负责搭建营销网络；杰夫·斯顿普，我所认识的最棒的猎头，负责搭建高管网络；弗兰克·陈，我以前的产品经营部主管，负责组建研究队伍。</p>
<p>事实证明，我们经营风投公司的理念与全世界最好的企业家的想法不谋而合。在短短的4年时间里，我们就由一个从零起步的小公司发展壮大为全球最有影响力的风投公司之一。</p>
<p>小结</p>
<p>我知道，你认为我过得好是因为我的珠宝个头大；<br>但其实，我是找到了宁静的生活。<br>——美国说唱歌手纳斯《一发而不可收》<br>我经常开玩笑说，人们总认为现在的我比过去当CEO的我要优秀得多。他们有时会称我是“管理大师”，但在执掌Opsware公司时，从来没人这样叫过我。费利西娅就常说：“那时他们用各种各样的字眼来形容你，可就是没人说你像个大师。”</p>
<p>这究竟是为什么？是我变了还是人们的看法变了？</p>
<p>在过去那些年里，我学到了很多，这一点毫无疑问。想起当初创业时自己犯过的那些错，现在我依然会觉得尴尬。但是，我最终还是出色地驾驭了公司。这样说不是自夸，而是有着大量的确凿依据。我彻底改变了公司的发展路线——即便在它还是一家上市公司时，并且在5年内成功地将其市场价值从2.9亿美元提升到16.5亿美元。Opsware公司的大部分员工如今要么在安德森·霍洛维茨公司效力，要么加入了我们旗下的投资组合公司，这说明肯定是有某个因素让他们觉得在这里工作是愉快的。而且，公司最终以业内最高价被惠普收购，这进一步证明了我们是这个市场上的胜利者。</p>
<p>然而，在我将Opsware公司打理得风生水起的那段日子——从2003年到2007年，你从报刊、博客以及留言板上几乎看不到关于我的任何正面评价。那时，媒体声称公司要垮台，控股公司施压让我引咎辞职，大家都觉得我不行。</p>
<p>现在回想起来，人们之所以改变对我的看法，是因为看到了惠普的收购，读到了我写下的文字。在不做CEO的日子里，我获得了前所未有的自由。一个风投资本家可以想什么就说什么，不必顾虑他人的感受，而CEO就享受不到这份奢侈了。那时，我必须要照顾别人的情绪，尤其是不能在公开场合露怯示弱，因为这会辜负所有员工、高管以及上市公司控股人的期望。我必须要有百折不挠、勇往直前的信心。</p>
<p>开办安德森·霍洛维茨风险投资公司之后，一切束缚都离我远去了。诚然，我们依然得为员工负责，但是不必再面对因一朝成败就要寻死觅活的大股东们。更重要的是，我现在并不是公司的CEO，而是给那些有CEO的公司做投资，勇往直前的这副重担压在了他们的肩上。如今，我可以坦然表现我的弱点、我的恐惧，以及我的短处。我可以表达自己的真实想法，无须忌讳权利网格中某些对我有看法的人。在解决棘手的难题时，正是这些恐惧以及招人非议的观点，帮助我寻找到问题的答案。难题之所以棘手，是因为你找不出便捷的方法去解决它，是因为你的理智和情感难以融合，是因为你不知道答案而又不能寻求帮助，因为求助于人意味着你的无能。</p>
<p>在最初管理公司的日子里，我以为自己是唯一一个举步维艰的CEO。因为不论我什么时候看见其他CEO，他们都是一副胸有成竹的样子。聊起天时，他们总是会说自己的生意“好极了”，自己的阅历“精彩极了”。但是，在亲眼目睹这些“好极了”、“棒极了”的企业纷纷破产倒闭或者低价转让之后，我才意识到自己也许并不孤单。</p>
<p>在进行深入思考时，我发现接纳自己不同寻常的背景才是解决这个问题的关键。正是那些经历——那些只有我才有的经历——赋予我与众不同的视角和行事方式。奇科·蒙多萨那出人意料却又充满诗意的处事风格帮助我提升团队的凝聚力；对各色人等的深入了解帮助我将贾森·罗森塔尔和安东尼·赖特联合在一起，拯救公司。在我祖父的墓碑上，刻着他最喜欢的一句马克思的名言：生命即挣扎。我认为，这句话里饱含着一个企业家最需要明白的道理：接纳挣扎。</p>
<p>在与企业家们合作的今天，我总是着力宣传这个理念。接纳你的不同，接纳你的背景，接纳你的直觉。如果奥妙不在其中，那就说明没有奥妙。我能够见证他们所经历的艰难，却无法提供具体的对策。我能做的，就是帮助他们从自己心中、从自己身上寻找答案。有些时候，他们比我更能从纷乱中找到宁静。</p>
<p>当然，这世上的艰难坎坷无处不在，肺腑之言或者前车之鉴也因此难以穷尽。最后，我想祝福所有为梦想而挣扎的人们，祝你们平安、顺利。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第八章　创业头条法则：没有法则</p>
<p>这些事都打不倒我，<br>只会让我更坚强。<br>我想让你快些来，<br>因为我不能再等待。<br>我知道现在要做出正确选择，<br>因为我不能再错下去。<br>我已等待一整夜，<br>为你等待一整夜。<br>——美国饶舌歌手、]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业维艰7]]></title>
    <link href="http://yoursite.com/2016/03/03/read/%E5%88%9B%E4%B8%9A%E7%BB%B4%E8%89%B07/"/>
    <id>http://yoursite.com/2016/03/03/read/创业维艰7/</id>
    <published>2016-03-03T11:28:18.000Z</published>
    <updated>2016-03-03T11:28:18.000Z</updated>
    <content type="html"><![CDATA[<p>第七章　前途未卜时怎么办？</p>
<p>这是为贫民窟的人而歌，只有他们懂得其中真意。<br>——美国说唱歌手纳斯《唐》<br>当年，把Loudcloud公司出售给EDS公司后不久，我们又陷入了新的危机。由于我们已将全部的创收项目和所有的客户拱手相让，机构投资人认为我们已经没有了投资价值，因此开始抛售手中持有的全部Opsware股份，导致我们的股价下跌到每股0.35美元。事实证明，这是一个戏剧性的数字，因为它对应的公司市值恰好是我们银行账户现金总额的一半。这个信号进一步动摇了投资者的信心，他们相信Opsware已经毫无价值，甚至希望我们能把剩下的资产全都卖掉，好赔偿他们的损失。更可悲的是，纳斯达克发出通告，要求我们必须在90天内将股价提高到每股1美元以上，否则将把我们从上市公司中除名，以后只能作为低价股来交易。</p>
<p>针对这一最新情况，我在董事会上拿出了三个方案：</p>
<p>1.反向拆分。对股票进行反向拆分，十股合一股，股票总量变为原来的十分之一，而单价变成原来的10倍。</p>
<p>2.就范。以后只能作为低价股交易。</p>
<p>3.拉赞助。到外面去做宣传拉赞助，让更多的人购买我们的股票，以此来推升股价。</p>
<p>董事会对这个局面深表同情，并认为三个方案都能接受。安迪·克拉列夫认为，由于数量众多，反向拆分在投资者中造成的负面影响会有所降低。马克也表示，在数字媒体时代，被证券市场除名也不算什么太严重的事。</p>
<p>然而，我还是不愿意进行反向拆分，因为我不甘心不战而败，当个懦夫。如果我通过合股来提高股价，那就是在向外界承认我的无能，承认我的公司真的一文不值。此外，我也不希望公司被除名。马克的观点可能适用于将来，但就当时而言，低价股是不能向机构投资者开放的。因此，我决定选择第三条路：拉赞助。</p>
<p>第一个难题是：向谁拉赞助？那时，机构投资者从不关注每股10美元以下的股票，更不用说1美元以下的了。于是，我和马克就去请教公司的网络通信专家、有名的天使投资人——罗恩·康韦。我们介绍了当时的情况，告诉他仅凭与EDS签订的每年2 000万美元的合约，Opsware公司的价值就不容小觑，而且我们还有一支出色的团队和一笔丰厚的知识产权，不可能成为一文不值的公司。罗恩认真地听完后，建议我们去找找赫布·艾伦。</p>
<p>我对赫布·艾伦并不熟悉，但是听说他创办了Allen&amp;Company投资公司。该公司以其召开的顶级商界年会而为大家所熟知。这个大会只针对特定人群发出邀请，多年来受邀的嘉宾均是鲜见于其他会议的重量级人物，如比尔·盖茨、沃伦·巴菲特以及鲁波特·默多克等。可以说，Allen&amp;Company年会能够请到的业界精英人数比所有同类会议请到的总和还要多——它就是这么厉害。</p>
<p>我和马克去了Allen&amp;Company公司位于曼哈顿的总部，就在可口可乐公司的大楼上，赫布的父亲赫伯特在那里担任了多年的董事会成员。如果要用一个词来形容Allen&amp;Company公司的办公总部，那就是“品位”。装饰精美却不奢华，让人感觉既精致又舒适。</p>
<p>人如其屋，赫布本人也是个谦谦君子。他一开始就对罗恩大加赞赏，并说只要是罗恩推荐来找他的，他都会很重视。于是，我和马克就原原本本地把转让Loudcloud公司的经过说了一遍，包括我们如何在出售服务给EDS的同时，保留了软件与核心技术人员，获得了每年2 000万美元的软件租让费。除此之外，我们还有一张干干净净的资产负债表，所以公司的股价绝不应该是区区的每股0.35美元。赫布专注地听完了我们的介绍，说了一句：“我很想能帮得上忙。让我考虑考虑。”当时，我并不知道他说这话时是否和硅谷的很多老板一样，意思是“算了吧，我对低价股没兴趣”，还是说他真的打算帮我们。很快，答案就揭晓了。</p>
<p>在接下来的几个月内，Allen&amp;Company公司购入了Opsware公司的股票，赫布本人也购买了我们的股票，而且还说服他的几个客户成为Opsware公司的最大投资者。这一大手笔在数月内将我们的股价从每股0.35美元拉高到每股3美元。我们摆脱了被证券市场除名的风险，确立了新的投资阵营，并且重新鼓起了员工的士气。这一切，仅仅源于与赫布·艾伦的那一次会面。</p>
<p>多年后，我曾问赫布，为什么会在那时向我们公司伸出援手。要知道，Allen&amp;Company公司当时还没有涉足技术领域，更别说数据中心自动化了。赫布的回答是：“我对你们的业务一无所知，对你们这个行业的了解也很有限。我只是看到两个年轻人亲自来找我寻求帮助，而不是像其他上市公司的老板那样遇到麻烦就逃避。不仅如此，和那些大公司的老板比起来，你们成功的决心和信念要更强烈。所以，我其实是给勇气和决心在投资，这个决定并不难做。”</p>
<p>这就是赫布·艾伦的办事风格。因此，你千万不要错过与他合作的机会，否则就太遗憾了。</p>
<p>专注于目标，然后力求实现，不再为过去曾有或者将来可能会有的错误而担心、懊恼，这也许是我从企业家的角色中获得的最大领悟。本章将会简要介绍一些心得体会，希望有助于你在关键时刻做出准确的判断。</p>
<p>最难掌握的CEO决胜技</p>
<p>截至目前，我认为一个CEO最难做到的，就是对自己内心的控制。组织设计、流程设计、指标设置以及人员安排等都是相对简单的工作，对内在情绪的控制才是最艰难的。我原本以为自己的内心足够强大，但我错了，我其实很脆弱。</p>
<p>过去这些年里，我曾和数百名CEO谈及这个问题，大家都有相同的感受。但是，很少有人在公开场合谈论这个话题，媒体上也从未出现过相关报道。这就像是在高管组成的搏击俱乐部中，关于CEO心理问题的头条法则就是不得谈论CEO的心理问题。</p>
<p>冒着忤逆这条神圣法则的风险，我要在此试着描述一下这些心理问题，并把我自认为有效的几条对策告诉大家。从根本上讲，这是每个管理者都无法回避的一场个人战争，意义重大。</p>
<p>既然我工作出色，为什么心情如此糟糕？</p>
<p>要想当CEO，你必须目标明确，一心扑在工作上。此外，你还要学识渊博，智慧超群，这样才会有人心甘情愿地为你效力。没有谁在辛苦创业时就想着当个差劲儿的老板、管理一个建制不全的公司，或是制造严重的官僚作风来制约公司的发展。要成功，就必须经历坎坷。其间，难免会有很多意料之外的状况，你只要从容应对就可以了。</p>
<p>最难的问题是，每个老板都必须从实践中求真知。没有哪个培训班会教你如何当CEO，如何去管理一家公司。唯一能教你当CEO的办法就是亲自当一回CEO。这意味着你将被形形色色的事务包围，而你却不知道该如何去解决它们。可是，其他人只会仰仗你来给出答案，因为，你是决策者。我还记得自己刚担任CEO时，一位投资人让我给他发一份“市值表”。我大概知道他要的是什么，但不清楚这个表格应该做成什么样，不知道其中应包含哪些内容。这本是件小事，但是，如果我对其一知半解，以后我该怎样处理其他事呢？正因如此，我在那个电子数据表上颇费了一番功夫。</p>
<p>可即便你了解眼前的工作，你还是会出状况。事实证明，在瞬息万变、竞争激烈的市场环境下，要搭建一个多层级机构并使之成为赢家其实是件相当艰难的事，出状况也在所难免。如果按百分制来衡量CEO们的优劣，那么平均分只有22分。这个成绩对于学业史辉煌的人来说绝对是极大的心理挑战。</p>
<p>假如你的员工只有10个人，不出状况的可能性极大；假如你带领的队伍有上千人，不出状况的可能性几乎没有。当公司发展到某个阶段时，出现的问题会让你百思不得其解，你不明白自己的员工怎么会有如此低能的表现。看到别人挥霍无度、工作拖沓、浪费时间时，你会感觉很糟糕；如果你是CEO，这些现象可能会气得你茶饭不思。</p>
<p>如果你认为这都是你的错，那就无异于在自己已有的伤口上撒了一把盐。</p>
<p>不怪别人</p>
<p>你不能埋怨爵士乐手，也不能抱怨大卫·斯特恩在NBA中的时尚问题。<br>——美国说唱歌手纳斯《嘻哈文化已死》<br>当公司里有人发牢骚时，比如说对经费报销程序不满，我就会开玩笑地把罪责都揽在自己头上。这样的玩笑的确好笑，因为它不完全是说笑。实际上，公司里出现的任何问题本质上都是由我引起的。作为CEO，我在人员招聘和各项决策中都是最终拍板的那个人。中途接手的CEO可以把所有问题都归咎于他的上一任，而我却不行。</p>
<p>如果我不能知人善任，那是我不对；如果公司没有完成季度赢利目标，那么是我的错；如果优秀人才要跳槽，销售部对产品部提出的要求不合理，或者产品的病毒太多，通通都是我的错。这一切都在把我逼向绝路。</p>
<p>虽承担了一切罪责，但我在CEO能力评估中却只得到22分，这就像一块巨石一样压在我的心头，让我喘不过气来。</p>
<p>太多的状况</p>
<p>重压之下，CEO们往往会形成以下两种错误观点：</p>
<p>1.都是我的错。</p>
<p>2.和我没关系。</p>
<p>在第一种情况中，CEO会忧心忡忡，觉得自己必须马上采取对策。由于各种状况层出不穷，最终往往会出现两种局面：外向型老板暴怒无常，吓得没人愿意再为他效力；而内向型老板则郁郁寡欢，心力交瘁。</p>
<p>第二种情况是指CEO在面对公司不断出现的负面状况时，为了规避内心的煎熬，往往持过分乐观的态度，相信一切都不算太坏。他们会觉得问题并不严重，用不着立刻地去处理。这种给万事找开脱的做法会让他们自己觉得轻松。可关键在于该解决的问题依然存在，员工们会因为CEO对根本性问题和矛盾的听之任之而备感沮丧。久而久之，公司就会变成一盘散沙。</p>
<p>对CEO来说，最理想的态度是既要雷厉风行，又要保持理性。他应该果断出手，快刀斩乱麻，避免让自己被负罪感所奴役。如果能甩掉情绪对自己的困扰，对问题的重要性做出理智的判断，员工以及他本人都会以良好的状态投入工作。</p>
<p>你是单枪匹马在作战</p>
<p>在公司陷入危机时，指望和员工们讨论公司生死存亡的大计显然没有意义。而与董事会或者外界专家顾问的商谈也往往无疾而终。他们与你在专业知识方面差距太大，所以不可能跟得上你的思路，给你出谋划策，你只能单枪匹马去作战。</p>
<p>在经营Loudcloud公司时，互联网泡沫的破裂使我们公司的大部分客户相继破产，从而对我们的生意造成了毁灭性的打击。或者说，这只是对当时状况的一种说法。另一种说法，也是公司对外采取的官方说法，是我们仍然有充裕的资金储备，并且以惊人的速度在吸纳新的企业客户。哪一种说法更接近事实呢？没有人能给我答案，我只能在心里问自己上千次。（顺便说一下，问自己同一个问题上千遍绝不是个好主意。）在这件事情上，我有两个具体的难题要解决：</p>
<p>1.万一官方的说法不对怎么办？万一我因此误导了投资人和员工，那该怎么办？如果那样，我必须引咎辞职。</p>
<p>2.万一官方的说法是正确的呢？万一我只是无端猜忌却导致公司偏离了正常的发展轨道，那又该怎么办？如果那样，我也必须引咎辞职。</p>
<p>通常，你只有在时过境迁之后才能解答这些问题，才会知道究竟哪一种说法是正确的。当年，新吸纳的客户没有成为救世主，但是我们通过其他的途径生存了下来，并且最终成功了。这说明，如果你想朝着正确的方向前进，就不能让自己被正反两种极端的思路所束缚。</p>
<p>三年前，我的朋友贾森·罗森塔尔接任了Ning公司的CEO一职。刚一上任，一次现金危机就摆在他面前，他不得不从三个备选项中做出痛苦的抉择：1.大幅裁员；2.转让公司；3.稀释每股收益。</p>
<p>我们来分析一下这三个选项：</p>
<p>1.把他费尽心思招募进来的大批优秀人才解聘，会严重影响剩余员工的士气。</p>
<p>2.将曾与他并肩作战的员工和公司整体转让，会剥夺他们实现伟大梦想的机会。</p>
<p>3.稀释每股收益会降低员工的主人翁地位，剥夺他们的辛勤工作所创造的经济价值。</p>
<p>这真是个令人纠结的选择。胸怀壮志的企业家们，如果你不想在虎口与火坑之间做出抉择，最好的办法就是不做CEO。</p>
<p>贾森咨询了业内的一些顶尖人物，但最终的决定还得由他做出。没人能预知未来的发展，无论选择哪条路，贾森都难辞其咎。最后，他决定裁员，解聘那些入职时间较短的新员工。这个选择如今看来是正确的。Ning公司的年收益节节攀升，员工的士气也被鼓舞起来。假如公司没能因此走上坦途，贾森就会成为头号罪人，并且要拿出新的方案来弥补。每次见到贾森时，我都会开玩笑似的说一句：“欢迎你来做抉择”。后来，贾森还是把Ning公司转让给了Glam公司。</p>
<p>当你身处这样的境地时，务必要明白一点：几乎所有的公司都会经历生死攸关的时刻。鉴于这一现象的普遍性，我的搭档马克·安德森和斯科特·韦斯甚至用首字母缩写“WFIO”来表示它。“WFIO”代表“we’re fucked，it’s over”，意思是“我们要完蛋了”。根据他们的结论，一个公司会经历2~5次这样的时刻（虽然我敢肯定地说，我在Opsware公司至少经历了10次）。</p>
<p>安抚神经的良药</p>
<p>心理问题之所以麻烦，是因为人们的心理世界千差万别。鉴于此，我将自己多年来总结的几条经验拿出来与大家分享，希望能对你们有所助益。</p>
<p>多交朋友。尽管你不可能在棘手问题的处理上指望他人拿出有效的对策，但是从心理学角度来看，与曾有过类似经历的人交流会对你大有裨益。</p>
<p>把想法写出来。我们是一家上市公司，所以我觉得最好把所有的客户和全部的收益都转让出去，然后转型做别的生意。但是，当我想要向董事会就此事做报告时，脑袋里却乱作一团。为了让这个决策能执行下去，我把想法条分缕析地写了下来。写的过程使我的思路渐渐清晰，并最终帮我顺利做出了决定。</p>
<p>盯着路，别看墙。人们学开车时，要掌握的第一要领是：当你以200英里的时速拐弯时，千万别看墙，一定要盯着路。如果你看着墙，你就会直接撞到墙上去；盯着路，你就能安然无恙。管理公司就像开车。千头万绪的事情都有可能出状况并变成大麻烦，如果你的注意力全部放在这些事情上，那你就会像一辆失控的汽车，最后很有可能连公司也被你拖垮。所以，你需要紧盯的，是你的目标，而不是那些你想要躲避的东西。</p>
<p>不抛弃，不罢手</p>
<p>在CEO的生涯中，我无数次产生想放弃的念头。我曾见过不少人在重压之下借酒消愁，或是干脆停止努力。他们有充分的理由来为自己的放弃做辩解，可这些人中，没有一个人能成为杰出的CEO。</p>
<p>杰出的领导者会直面痛苦。无眠的长夜、涔涔的冷汗，还有难以名状的“煎熬”，他们都曾经历。每当我遇到成功的CEO，总会向他们讨教成功经验。那些泛泛之辈的答案可能是非凡的战略举措、敏锐的商业嗅觉，或者是其他一些溢美之词，而杰出的CEO们往往只有一个统一的回答：“我没有放弃。”</p>
<p>胆怯与勇敢只一线之隔</p>
<p>英雄和懦夫有什么不同？勇敢与胆怯又有什么差别？我告诉自己的孩子，其实没有差别。唯一能区分它们的，是你的所作所为。英雄也好，懦夫也罢，他们的感受是相同的。他们都惧怕死亡，畏惧伤害。胆怯的人拒绝面对他必须面对的事情，而勇敢的人则用意志赶跑怯懦，然后继续去做他该做的事。那些旁观者对你的判断往往是基于你的行为，而不是你的感受。<br>——拳击教练CUS.D’AMATO<br>我和搭档与企业家打交道时，最关心对方身上是否有这两种特质：智慧与勇气。我的CEO生涯告诉我，在面临那些至关紧要的问题时，老天考验的是我的勇气，而不是我的智商。</p>
<p>能够正确决断自然是好，可是唯恐决策失败而产生的心理压力往往会让你喘不过气。而且这些压力通常都来自一些小事。</p>
<p>当CEO和董事长坐在一起谈论公司内的权利归属时，往往会有这样一番对话：</p>
<p>“谁来管理公司？”</p>
<p>“我们。”两人齐声说。</p>
<p>“谁来做最终决定？”</p>
<p>“我们。”</p>
<p>“这种状况要持续多久？”</p>
<p>“永远。”</p>
<p>“就是说你们谁也不想承担责任，所以只能让员工的办事难度加倍，是这意思吗？”</p>
<p>沉默。</p>
<p>通常来说，员工应该只向一个最终决策者汇报工作，这无疑要简单得多。只可惜，在当前的社会重压下，正确的管理方式被放在了一边。由于公司创始人缺乏承担责任的勇气，致使每个员工都不得不承受二次审批带来的种种不便。</p>
<p>更重要的是，公司在规模扩张的同时，需要制定的决策也越来越让人胆战心惊。当初我们决定让Loudcloud公司上市时，账面上只有200万美元。这不算是个太艰难的抉择——大不了破产。真正让人畏惧的，是如何在所有人——员工、记者、投资人——认为你的想法是异想天开时，你还能做出大胆决断。</p>
<p>正确决断需要智慧和勇气</p>
<p>有时候，如果摆在你面前的是一个复杂的决定，那么你的勇气就会显得更为重要。与公司中的其他人比起来，CEO无论在技能、知识，还是在看问题的视角上都应该技高一筹。当然，有些员工或董事会成员在经验和智商上会胜过CEO，而CEO能更好地做决断，是因为他的知识储备更丰富。</p>
<p>当CEO面对一个棘手的问题时，如果其中一种做法只是以微弱优势获得了他的青睐，比如说，54%的可能是关闭这条产品生产线，而46%的可能是保留它，那么他要接受的考验将会更加严峻。要是那些董事会和管理层的聪明人全都站在他的对立面，他该如何应对？在没有十足的把握、在所有人都投反对票时，他还敢不敢关闭生产线？如果他决策失误，那就要怪他没有听资深顾问的意见；如果他决策正确，也没有人会因此赞赏他。</p>
<p>前不久，某大型机构提出收购由我们投资的一家公司。考虑到这家公司的发展速度和收益情况，这可谓是一笔颇具吸引力的买卖。公司的创始人兼CEO（我暂且叫他哈姆雷特）觉得不该出售，因为他还希望挖掘更大的市场潜力。但是，他不确定对于投资人和员工来说，这是不是最佳的选择。他想拒绝对方的要求，又有些犹豫不决。更麻烦的是，董事会以及大部分管理人员和他的想法刚好相反。哈姆雷特忧心忡忡地苦思冥想了几个晚上，他发现根本就想不出答案。最后，他做出了一个大胆而又了不起的决定：不卖公司。我认为这是他职业生涯中的一个决胜时刻。</p>
<p>有趣的是，哈姆雷特刚一做出这个决定，就迎来了董事会和管理层的一致拥护。为什么呢？既然他们迫切想要卖掉公司并奉劝CEO放弃梦想，为什么会突然改变态度？后来才知道，让他们最初倾向于卖掉公司的最主要原因就是哈姆雷特的举棋不定。他们以为自己的态度就是老板想要的。哈姆雷特没有意识到这一点，误以为对方是经过全面分析才得出的结论。幸运的是，他凭借勇气最终做出了正确的抉择。</p>
<p>我们可以在企业信用模型中看到这个普遍存在的问题：与靠自己的判断力做出的决定相比，在多数人影响下做出的决定能为你带来更好的社会评价。</p>
<pre><code>结果证明你是对的      结果证明你是错的 
</code></pre><p> 你的意见和多数人相左      没有人会记得是你做出的决定，但公司受益。      所有人都记得你做的这个决定，你会因此而被降级，被冷落，甚至被解聘。<br> 你的意见和多数人一致      所有提出过建议的人都会记得这个决定，公司受益。      你因此承受的指责会降到最低，但公司受损失。<br>从表面上来看，如果你希望自己的决定能让公司安然无恙，那么随大流似乎是更为稳妥的做法。但是在实际操作中，多数人的看法会影响你的判断，使一个原本一目了然的选择变得难分高下。这就是为什么勇气对于CEO而言至关重要。</p>
<p>像塑造性格一样培养你的勇气</p>
<p>在管理Loudcloud公司和Opsware公司时，我所做的每一次艰难抉择都令我胆战心惊。这种畏惧感始终笼罩着我，但是在无数次的磨炼之后，我学会了忽略它。这个过程也可被称作“培养勇气的过程”。</p>
<p>生活中，每个人都会走到这样的十字路口，不知该选择风光无限却是通往错误终点的平坦大道，还是该选择人迹罕至却是通往正确目的地的崎岖小径。这种内心的挣扎在你管理公司的过程中会表现得尤为强烈，因为CEO一旦做出错误的决定，后果会比普通人的严重几千倍。和普通人一样，CEO在犯错后也会找多种多样的借口。</p>
<p> 普通人的借口      CEO的借口<br> 智者千虑，必有一失。      这是生死攸关的决定。<br> 我所有的朋友都想这样做。      大家都不赞同我的做法，我不能违背民意。<br> 那些厉害的人都是这样做的。      业内的行规就是这样，我不知道它违法。<br> 它不够完美，所以我放弃竞争。      我们从未生产出符合市场预期的产品，因此我就没指望它们能卖得出去。<br>你每做一次艰难而正确的决定，勇气就会增加一分。相反，你每做一次轻松却错误的决定，怯懦就会多出一分。作为CEO，你的公司是勇往直前还是畏首畏尾，完全取决于你的选择。</p>
<p>小结</p>
<p>在过去的10多年间，科技进步极大地降低了开办新公司所要求的经济门槛，但是打造一流公司所需要的精神门槛——勇气——始终都没有降低过。</p>
<p>“一”与“二”</p>
<p>在其畅销书《从优秀到卓越》中，吉姆·柯林斯通过大量的研究和全面的分析指出，在选拔CEO继任者的问题上，公司内部候选人比外围候选人的表现要强得多。这主要是由于他们的见识更广。和管理大型公司所需的技能比起来，专业知识、文化知识、决策经验、人员管理等方面的能力似乎更难掌握。柯林斯在书中没有详尽解释内部候选人有时也会失利的原因，但是我愿意就此提出一些个人观点。我将重点谈谈管理公司所必需的两项核心技能：第一，目标明确，知道自己该做什么。第二，能带动全公司去实现这个目标。我把那些更乐于为公司确立目标的CEO称为“一”，把那些更喜欢在实践中推动公司发展的CEO称为“二”。</p>
<p>“一”的好恶</p>
<p>第一类CEO对于搜集信息乐此不疲，这些信息来源广泛，通常上至员工、客户，下至竞争对手。他们还热衷于制定决策，认为只有借助全面的资讯，才能做出最好的决断，如果资料太少，他们也会在必要的情况下从容做出决议。这些“一”们具备出众的战略眼光，最享受与对手在高处过招时的愉悦感。</p>
<p>这类CEO有时会对管理公司过程中重要的细节心生厌倦，例如流程设计、目标设定、机构责任划分、员工培训，以及绩效管理等。</p>
<p>大多数创业型CEO都属于这一类。他们如果在商场上败下阵来，最重要的原因是他们从未花时间去培养自己的另一项能力——将决策有效付诸实施的能力。由此而造成的后果是，公司混乱无序，潜力得不到发掘，CEO最终退位让贤。</p>
<p>“二”的好恶</p>
<p>第二类CEO刚好相反。他们能从操控的过程中获得满足。他们会认准目标，持之以恒，除非迫不得已，否则他们坚决反对调整目标和发展方向。</p>
<p>这类CEO乐于共商大计，但往往受不了深思熟虑的过程本身。“一”们可以每周抽出一天时间怡然自得地看书学习或是思考，这对“二”们来说是不可想象的，他们会坐立不安，觉得自己没有好好做工作。他们满脑子想的都是该如何推进各种工作流程，该安排哪些人负责哪些项目，该打哪些销售电话，而不是浪费时间去思考战略问题。</p>
<p>在面临重大决策时，“二”的焦虑感远大于“一”。环境往往会迫使人们在没有把握的情况下做出重要的决定，由于“一”们对此习以为常，所以不会过分担心结果。而“二”们则相反，他们会因为这样的状况而高度紧张，为了给自己制造一种一切尽在掌控的心理错觉，他们有时还会将决策过程过分复杂化。</p>
<p>这类CEO不管是多么忠实的行动派，有时都会因为迟迟拿不出决议而使公司发展陷入停滞。</p>
<p>全面发展才能成为出色的CEO</p>
<p>尽管CEO中既有“一”又有“二”，但只要有自控力，只要努力，那些与生俱来的弱点都可以得到弥补。一个CEO如果忽略其管理能力中的短板，他就无法长远走下去。“一”们会导致公司一团混乱，“二”们则会延误战机。</p>
<p>功能型的“一”</p>
<p>一般说来，兼具两种能力的CEO最理想。例如，销售部的主管可以很轻松地就部门内部的问题做出决策，但是在涉及公司总体发展的问题上则听从安排。这是一种最完美的领导素质，因为其方向清晰，决策及时而准确。</p>
<p>怎样组建机构？</p>
<p>公司设置机构等级的主要目的是提高制定决策的效率。大多数CEO都属于第一类，如果机构等级最顶端的人不喜欢做复杂的决定，那么工作的推进将会相当迟缓。</p>
<p>如果你属于第一类CEO，那就不要在你的领导班子里再增加一个“一”，因为他会希望大家跟着他的指挥棒转。他与你之间的这种争斗会让员工不知所措。因此，许多出色的“一”型CEO雇用的副手往往都是“二”型或者是功能“一”型。</p>
<p>继任问题</p>
<p>接下来，我们就谈谈如何挑选CEO继任者。鉴于大多数公司都是由“一”型CEO掌舵，“二”型CEO当副手，因此如何选择继任者就成为一个棘手的问题。你会从管理层中挑选一个“二”型领导者接替现任CEO吗？微软公司就这么做过。2000年，史蒂夫·鲍尔默——微软公司当时的二号领导者——接替比尔·盖茨担任新一任CEO。抑或从公司基层选拔一个“一”型人才担任CEO？通用电气公司当年就因为这样的大胆举措而让业内外哗然。1981年，通用电气公司破格提拔了杰克·韦尔奇，这不仅打破了常规，而且还造就了通用电气公司历史上最年轻的一任CEO。“一”型人才居然深藏于基层，而且还比管理层成员更有资格执掌公司，这在大多数董事会成员看来是不可思议的。</p>
<p>以上这两种做法各有其弊端。第一种做法使得公司置于“二”型领导者的管理之下，一旦遭遇关键时刻，“二”型领导者在决策速度上的滞后就会导致公司在竞争中丧失先机。此外，那些管理层中的“一”型领导者也会因为无法施展自己的决策力而最终离开公司。</p>
<p>第二种做法则越过所有的高管，将基层人员直接任命为CEO，这极有可能在管理层中引发巨大的动荡。事实上，在很短的时间内，几乎所有通用电气公司的高管都选择了离开。对于通用电气公司这种多元化企业而言，这类人员调整是行得通的。而对于瞬息万变的科技企业来说，如此有违常规的做法相当危险。</p>
<p>重要结论</p>
<p>在此，我要给出的重要结论也许会让那些期待答案的人们大失所望，因为压根儿就不存在简单的答案。CEO职位的交接是一个棘手的问题。如果你从外围选拔人才，其实是在降低你的成功概率。如果从公司内部选拔，那就一定要把握好对“一”型人才和“二”型人才的判断。最好是你能推荐一个让管理层满意的“一”型人才来接班。请记住，好事从来都不完美。</p>
<p>优秀领导者的特质</p>
<p>不存在所谓完美的CEO。风格迥异的领导者，比如史蒂夫·乔布斯、比尔·坎贝尔，还有安迪·格鲁夫，都成就了了不起的事业。也许杰出的领导者最需要的一个特质就是领导才能。究竟什么是领导才能？就CEO这个角色来讲，领导才能意味着什么？非凡的领导才能究竟是先天赋予的还是后天培养的？</p>
<p>大多数人对“领导才能”的定义都类似于高等法院的法官伯特·斯图尔特对“色情文学”的那个著名定义：见到它，我就认得出它。在此，我认为领导才能是那些可以衡量一个领导者基本素质的因素：有多少人愿意追随他，有哪些人愿意追随他，追随他的人都属于什么层次。</p>
<p>那么，哪些特质会吸引人们追随这个领导者呢？我认为，大致有以下三点：</p>
<p>•有勾画蓝图的能力</p>
<p>•有让他人追随你的能力</p>
<p>•有实现理想与抱负的能力</p>
<p>我们来逐一分析一下。</p>
<p>勾画蓝图的能力：史蒂夫·乔布斯特质</p>
<p>观察一个领导者要看他是否有想法，勾画的蓝图是否有趣、新鲜、引人入胜。更重要的是，看他是否能在逆境中做到这些。具体地说，当公司难以为继、无法创造任何经济收益时，这个领导者是否有能力凭借令人折服的发展蓝图让大家留下来。</p>
<p>史蒂夫·乔布斯能吸引众多顶尖人才在NeXT风光不再时继续为他效力，能说服苹果公司上下在濒临破产时拥护他的发展思路，我认为这是他作为一个拥有前瞻视野的领导者的最大成就。很难想象，还有哪个领导者能具备如此强大的号召力，可以一次又一次成功地完成这些不可能的任务，正因如此，我把这条特质称为“史蒂夫·乔布斯特质”。</p>
<p>让他人追随你的能力：比尔·坎贝尔特质</p>
<p>有人说，当CEO的先决条件就是自私、冷酷、麻木不仁，这其实是极大的误读。事实恰恰相反，原因不言自明。一个成功的CEO要做的头等大事就是将聪明人招募到麾下，而没有哪个聪明人愿意为自私自利的人效劳。</p>
<p>大部分人在职业生涯中都有过这样的体会：一个能力出众的上司因为不被下属认可，把工作做得一团糟。</p>
<p>真正出色的领导者会营造一种以员工为中心的工作氛围。这样的氛围往往会造就奇迹：众多员工凭借一种主人翁精神，一心一意地为公司做贡献。他们会在公司的成长过程中充当高品质的把关者，会为后续员工树立毫不含糊的标准。例如，“你得认真做好数据表，别拖公司的后腿”。</p>
<p>我把这种特质叫作“比尔·坎贝尔特质”，因为在我接触的所有人当中，比尔·坎贝尔是在这方面做得最好的一个。假如你和比尔经营的任何一家公司的员工交流，你都会听到他们说“我的公司”这类字眼。他极其真实，这也是他在领导才能这方面尤为突出的原因。为了员工，他会心甘情愿地牺牲掉自己的经济利益，放弃自己的声誉或者荣耀。和他谈话时，你会感觉到他真心实意地关注你和你的想法，这在他的行动和日后的表现中表露无遗。</p>
<p>实现理想和抱负的能力：安迪·格鲁夫特质</p>
<p>我要说的关于领导才能的最后一点，就是能力，纯粹而简单的能力。即便我认同领导者的远见卓识，能感觉到自己被尊重、受重视，我还是要看他是否有能力实现自己的抱负，想想能否跟随他一头扎进前路莫测的丛林，并且相信他能够带我走出去。</p>
<p>我把这种能力称为“安迪·格鲁夫特质”。在这方面，安迪·格鲁夫一直是我的榜样。他获得了电子工程学博士学位，出版了我所读过的最好的管理学著作《格鲁夫给经理人的第一课》，在多个方面尽展才华。他不仅写作出版了大量的管理学著作，而且还在英特尔公司任CEO期间为员工主讲管理学课程。</p>
<p>在他的经典著作《只有偏执狂才能生存》中，格鲁夫记录了他带领英特尔实现的一次重大的企业转型——从生产内存转向生产微处理器。做出这样的决定意味着他几乎放弃了所有的收益项目。他本人谦虚地把这一重大战略调整归功于公司里的其他人，但是能如此迅速且顺利带领公司完成这一转型的最大功臣还是他自己。作为一家有着16年历史的大型上市公司，改变最基本的业务类型将会带来诸多问题。</p>
<p>格鲁夫在书中提到了发生在他和员工之间的一个小插曲：“有一个员工盛气凌人地问我，‘你觉得不生产内存的英特尔还是英特尔吗？’我忍住怒气，答道，‘是的。’当时，局面一片混乱。”</p>
<p>尽管这一激进的想法让公司里许多优秀的员工都难以接受，但最终大家还是选择了相信格鲁夫。他们相信他有能力使公司在一个新的产业平台上发展得更好。事实证明，格鲁夫没有辜负他们的信任。</p>
<p>非凡的领导才能是先天赋予的还是后天培养的？</p>
<p>让我们来逐一分析以下三个特质：</p>
<p>•勾画蓝图的能力。毋庸置疑，有些人天生就比别人更善于讲故事。但是，只要用心、努力，任何人都能在这方面取得进步。每一位CEO都有必要在这项才能上多用心思。</p>
<p>•让他人追随你的能力。我不确定是否所有CEO都能完全学会比尔·坎贝尔特质，但我敢肯定，它是教不会的。在三个特质中，这个特质的“先天赋予性”最强。</p>
<p>•实现梦想与抱负的能力。这条特质完全可以通过学习去获得。也许正因如此，安迪·格鲁夫才会无法容忍自己的“无能”。说真的，有时候过分自信会妨碍能力的发展。一个CEO绝不能因为自信而放弃了对自己的更高要求。</p>
<p>最后要说的是，领导才能中的某些特质较其他特质而言更易于提高，但是以上讨论的这三条特质对每个CEO来说都至关重要。而且，它们之间也是相互促进的关系。如果大家信任你，就算你拙于言辞，他们也会跟从你。如果你能力出众，他们就会信任你并且听从于你。如果你能勾画美好蓝图，大家就会耐心等待，并且在涉及他们的利益时给你留出更大的余地。</p>
<p>顺境中的CEO和逆境中的CEO</p>
<p>过去，比尔·坎贝尔经常对我说：“本，你是我合作过的CEO中最优秀的一个。”这话一直让我百思不得其解，要知道，在我的公司濒临倒闭的那段时期，他的合作对象都是史蒂夫·乔布斯、杰夫·贝佐斯以及埃里克·施密特这样的大人物。有一天，我在与他通话时谈到了这一点：“比尔，为什么你觉得我是最好的？难道结果不重要吗？”他回答说，“很多CEO在顺境中表现得很优秀，也有很多CEO在逆境中格外出色，但是基本上没有哪个人在顺境和逆境中都能坚如磐石，可是你例外。”</p>
<p>据我自己的估计，过去这些年里，我只在顺境中当过三天的CEO，剩下的8年几乎全都是举步维艰的日子。回想起那段岁月，我仍然心有余悸。当然，我不是唯一有过这种经历的CEO。Foursquare的创始人丹尼斯·克洛利曾对我说，他每天都会想起逆境中经历的那番挣扎与紧迫。对于许多高科技公司而言，这种状况一直都存在。</p>
<p>举例来说，当年埃里克·施密特卸任谷歌CEO一职，由其创始人拉里·佩奇继位时，新闻媒体一度将焦点放在佩奇是否有能力充当谷歌的“门面”这个问题上，因为与能言善辩、为人活络的施密特比起来，佩奇要腼腆内向得多。尽管这样的分析不无趣味性，却没有抓住问题的要害。对于谷歌来说，施密特不仅仅是一个“封面人物”。作为谷歌在和平年代的掌门人，他带领公司在10年间完成了最重大的科技业务拓展。而拉里·佩奇却恰恰相反，是他带领谷歌走入了竞争的时代并使自己成为公司在逆境中的大管家。这对谷歌乃至整个高科技领域都产生了深刻的影响。</p>
<p>什么是顺境？什么是逆境？</p>
<p>所谓企业的顺境，是指在某一阶段，企业在核心生产领域具备强大的竞争优势，且该领域的发展呈上升态势。在这个阶段，企业的工作重心是拓展市场，进一步巩固现有实力。</p>
<p>而在逆境中，企业面临的是生死攸关的威胁。这些威胁的源头各不相同，有些是因为竞争，有些是因为宏观经济状况的变化，还有些是因为市场的变化、供应链的变化等，不一而足。安迪·格鲁夫就是一位经历过逆境的优秀CEO，在其著作《只有偏执狂才能生存》中，格鲁夫精彩地阐述了那些导致企业陷入困境的各种诱因。</p>
<p>顺境发展模式最经典的例子莫过于谷歌公司为提升互联网的网速所做的贡献了。作为搜索引擎业的巨头，谷歌公司坚信，提升网络速度是增加收益的关键，因为更快的网速可以使用户进行更多的搜索。这个思路清晰的业界领头羊将重心放在了拓展市场上，而没有仅仅停留在与同类公司的竞争上。其经历可以算作逆境发展模式的典范。20世纪80年代中期，在来势凶猛的日本半导体生产行业的威胁下，格鲁夫大胆放弃了英特尔公司的内存生产，这是它的核心产业，而其80%的员工都服务于这个产业。</p>
<p>在企业由顺转逆的过程中，我认为最重要的一点就是不同时期要采取截然不同的管理方式。有趣的是，多数管理学书籍都在探讨如何在顺境中当好CEO，极少提及逆境中的管理策略。这些书都会涉及一些基本的管理原则，比如不能在公开场合让员工下不来台。而安迪·格鲁夫则反其道而行之，他曾在一间坐满了人的屋子里对一位迟到的员工说：“我所拥有的唯一财富就是时间，而你却在浪费我的时间。”为什么CEO们在管理方式上会有如此大的差异呢？</p>
<p>公司处于顺境时，领导者必须最大限度地拓展现有机会。因此，他们的管理策略是以推动全方位、多层面的创新与贡献为重心。相反，当公司身处逆境时，领导者拼尽全力也要一发命中目标。能否走出逆境完全取决于领导者能否有效地完成使命。</p>
<p>史蒂夫·乔布斯重返苹果之际，公司已经岌岌可危——典型的逆境。他需要的，是所有人围绕中心使命，有效地执行他的决策，除此之外的任何个人想法都要靠边站。而谷歌在占领搜索引擎市场的龙头地位之后，采用了顺境模式的管理策略。公司鼓励创新，甚至要求每一位员工将20%的工作精力都放在研发新项目上。</p>
<p>顺境与逆境中不同的管理策略会由于恰当的运用而产生同样良好的效果。它们各不相同，所以CEO们的管理方式也是各成一派。</p>
<p>顺境中的CEO和逆境中的CEO</p>
<p>顺境中的CEO沿着常规的路径向成功迈进，而逆境中的CEO则跳出常规来争取突围。</p>
<p>顺境中的CEO放眼于宏观前景，授权下属去做细节性的工作；而逆境中的CEO视细节如生命，唯恐因细节的疏漏而影响全局。</p>
<p>顺境中的CEO会搭建逐级递增的大型招募机构，而逆境中的CEO会在此基础上成立负责遣散人员的人力资源部。</p>
<p>顺境中的CEO会花时间营造企业文化，而逆境中的CEO则通过逆境本身来界定企业文化。</p>
<p>顺境中的CEO常备有应急预案，而逆境中的CEO常常得孤注一掷。</p>
<p>顺境中的CEO凭借天时地利有备而战，而逆境中的CEO往往要置之死地而后生。</p>
<p>顺境中的CEO尽量做到文明有礼，而逆境中的CEO常常有意说脏话。</p>
<p>顺境中的CEO认为竞争犹如隔岸之火，不会波及自己；而逆境中的CEO认为竞争就是伸进自家院墙的魔爪，危险近在咫尺。</p>
<p>顺境中的CEO志在拓展市场，而逆境中的CEO志在赢得市场。</p>
<p>顺境中的CEO能容忍员工因为努力创新而产生的小偏差，逆境中的CEO则对此绝不姑息。</p>
<p>顺境中的CEO总是心平气和，而逆境中的CEO几乎都用高八度的嗓门说话。</p>
<p>顺境中的CEO竭力弱化矛盾，而逆境中的CEO总是竭力让矛盾升级。</p>
<p>顺境中的CEO总是广开言路，而逆境中的CEO总是独断专行。</p>
<p>顺境中的CEO会确立有风险、有创新的宏大目标；而逆境中的CEO则忙于真刀真枪地迎击对手，顾不上看那些纸上谈兵的顾问们写就的管理学大作。</p>
<p>顺境中的CEO通过员工培训来确保他们的工作满意度和职业发展，而逆境中的CEO通过员工培训来教会他们如何在竞争中不被踢出局。</p>
<p>顺境中的CEO会放弃那些没能在业内占据领先地位的产业，而逆境中的CEO还没奢侈到把生意分成三六九等的程度。</p>
<p>CEO可以兼具两种管理能力吗？</p>
<p>CEO们能不能手握一把尚方宝剑，在顺境和逆境中都能游刃有余呢？</p>
<p>可能有人会说，我在逆境中的管理是成功的，而在顺境中的表现却是失败的。约翰·钱伯斯能够出色地带领思科公司在顺境中发展，但是在遭遇劲敌Juniper和惠普之后，他的表现却差强人意。史蒂夫·乔布斯则展现出典型的逆境管理风格，他于20世纪80年代辞去苹果公司CEO一职，在公司平稳发展的很长一段时间内缺席，直到10多年后于危机时刻重返苹果，尽情施展他的一番雄才伟略。</p>
<p>我认为CEO在顺境和逆境中都有可能有所作为，但是难度很大。掌握顺境和逆境中所需的不同的管理策略，意味着你必须深谙管理之道，清楚自己什么时候该坚持，什么时候该妥协。</p>
<p>要知道，管理学书籍大多是由那些管理顾问创作出来的，他们的观察和研究多半以公司平稳发展期的情况为基础，因此，书中描写的主要是顺境中的管理经验。事实上，除了安迪·格鲁夫的著作，我还没见到哪本管理学书籍能教你如何在逆境中当好CEO，就像史蒂夫·乔布斯和安迪·格鲁夫那样。</p>
<p>回到起点</p>
<p>其实，少许的“逆境模式”恰恰是谷歌在完成管理权交接后持续发展的根源。在给所有的谷歌产品刻上个性化烙印的过程中（例如，安卓操作系统的问世，谷歌眼镜的诞生），佩奇一丝不苟的工作作风起到了极佳的促进作用。有时，你需要在管理中添加一点儿“逆境模式”。</p>
<p>CEO是后天磨炼出来的</p>
<p>一位朋友曾经问我，CEO的能力是天生的还是后天培养的，我回答说：“这有点儿像在问Jolly Ranchers糖是种出来的还是做出来的。当CEO是一项极端不符合人类天性的工作。”他极为诧异，这让我意识到，这个问题也许远远不像我想象的那样简单。</p>
<p>事实上，大部分人都持相反观点，认为当CEO的能力是与生俱来的，而不是后天培养的。我常常会听到一些风投资本家和董事会成员在短暂接触某个企业创始人之后，就认定他根本不是“当CEO的料”。我不明白他们如何能在那么短的时间内发现这一点。一个企业的创办者往往需要花费数年的时间才能掌握当CEO的技能。对我来说，判断一个人究竟能否当好CEO，其实是一件很难的事。</p>
<p>在运动领域，短跑这类技能可以在相对较短的时间内掌握，因为它是以身体的自然摆动为基础，只需稍加完善即可。而其他一些技能，比如拳击，则需要你花更长的时间去掌握，因为这项运动要求你凭借有违本能的动作和特定的技巧去完成。像我前文中说过的，当你在拳击比赛中想要后退时，务必要先退后脚，如果你像平时那样先抬前脚向后撤，对手一定能打得你眼冒金星。要想将这种有违常规的身体动作转化为自然而然的本能反应，大量的练习必不可少。当CEO也是一样，如果你带着寻常人的思路去管理公司，你同样会被对手打得措手不及。</p>
<p>当CEO意味着要做许多有违本能的事。从适者生存的角度来看，人们一般会通过自己的所作所为去拉拢人心，这有助于提高他们的生存概率。然而，作为一个出色的CEO，要想获得大家的长期认可，你就必须做出在短期内有违民意的事。这颇有违常情。</p>
<p>一开始，CEO最基本的行事方式都会显得有点儿怪。假如你的好友讲了一个好笑的故事，那么给他做点评就会让你觉得怪怪的。你会觉得这样说太不合常理了：“我觉得这个故事太烂了。它本来可能还有点儿意思，但是你的铺垫一点儿都不吸引人，然后在最精彩的部分你又搞砸了。我建议你拿回去，重新修改，明天再给我讲一遍。”</p>
<p>这样做的确有违天性，但是评估人们的工作表现，并且不断给出反馈正是一个CEO必须要做的。如果不这么做，那么一些更复杂的事情，比如写总结、明确职责范围、应对办公室政治、制定薪酬制度以及开除员工等事务就完成不了，或者即便完成也做得差强人意。</p>
<p>给出反馈有违天性，但它是其他管理技能的基础。那么，怎样才能掌握这些有违天性的技能呢？</p>
<p>三明治反馈法</p>
<p>对于一个新手而言，一种有效且常用的反馈策略就是经验丰富的经理人所谓的“三明治反馈法”。管理学经典《一分钟经理人》中对此有精彩的描述：“三明治反馈法”的基本概念是，如果你在一开始先表扬（第一片面包），人们会更容易接受你的反馈。接下来给出那些令他们不快的信息（批评），最后再提醒他们你有多看中他们的优点（第二片面包）。“三明治反馈法”还可以使你的反馈对事不对人，因为你在一开始就表达了对他的肯定，而这是一个非常关键的反馈信息。</p>
<p>“三明治反馈法”非常适用于低级别员工，但是它也存在以下一些问题：</p>
<p>•它往往过于正式。因为你必须得预先想好内容，确保陈述正确，整个过程会让员工感觉很正式，像是在接受评判。</p>
<p>•这种方法用过几次后，就会变得不那么真诚。员工会想：“天呐，他又在表扬我了。我知道接下来是什么了，批评。”</p>
<p>•久而久之，中高级经理人员会立即意识到这是“三明治反馈法”，结果会适得其反。</p>
<p>我在职业生涯的早期曾试图给一位资深雇员做一份经过深思熟虑的“三明治反馈”，他就像看着一个小孩一样看着我说：“本，那些好听的就省省吧。直接告诉我，我哪里做错了。”当时，我就想，我绝对不是天生的当CEO的料。</p>
<p>关键点</p>
<p>要想精通反馈之道，必须要超越“三明治反馈法”这类基础技巧，形成符合自己个性和价值观的风格。以下是实现有效反馈的几个关键点：</p>
<p>•真实可信。务必要让他们相信你的反馈，不要说一些操纵听者感受的话。不能装模作样。</p>
<p>•出发点正确。给出反馈的目的是希望他们做得更好，而不是更差，这一点很重要。如果你真的想让他们成功，就得让他们感受到这一点。让他们感受到你的心。这样，他们才能感受到你的支持，才会听你的。</p>
<p>•对事不对人。如果想开除某个人，那就直接开除。不要让他准备好被开除，而要让他准备好取得成功。如果他不听取反馈，那就换一种对话方式。</p>
<p>•不要在同事面前玩弄一个人。虽然在小组会议上给出某种反馈并无不可，但绝对要避免让一个人在同事面前颜面扫地。否则，你的反馈将起不到什么作用，只会让这名员工感到羞愧难当，对你恨之入骨。</p>
<p>•反馈因人而异。每个人都不同。有些人对于反馈非常敏感，有些人则脸皮特别厚，也很迟钝。你的语气应当结合员工的个性，而不是由着你自己的性子。</p>
<p>•直截了当，但不刻薄。不要兜圈子。如果你觉得某人的演示很糟糕，不要说：“这的确不错，但可以加一个过渡，强化结论部分。”下面的说法听起来严厉，但效果也许更好：“我没听懂，不知道你要说什么，原因是××××。”弱化反馈中的批评部分，可能会比没有反馈还要糟糕，因为这可能导致误解，让听者困惑。但也不要一味批评他们，也不要摆出高人一等的姿态。这么做于事无补，因为正确的反馈是对话，而不是独白。</p>
<p>反馈应该是对话，而非独白</p>
<p>没错，作为CEO，你可以告诉人们哪些是你不喜欢的、不认同的，但这并不意味着你一定是对的。你的员工应当比你更了解他们自己的职责。他们应当比你掌握更多的数据。所以，你不一定总是正确的。</p>
<p>因此，你的目的应当是通过反馈来开启对话，而不是终结对话。鼓励人们质疑你的判断，批驳你的观点。从文化上，你希望围绕高标准展开深入探讨。你想通过施加高压，获得高质量的想法，但是，你在这样做的同时，一定要足够开明，以便及时发现自己的错误。</p>
<p>高频率反馈</p>
<p>一旦掌握了这些关键点，你就该时时刻刻练习。作为CEO，你几乎应当对每件事都有一个自己的看法。你应当对每项预测、每个产品计划、每次演示，甚至每项评论都有一个观点。让人们知道你的想法。如果你喜欢某个人的评论，就反馈给他。如果你不同意，也反馈给他。说出你的想法，充分表达自己。</p>
<p>这样做会带来两大积极效应：</p>
<p>•在你的公司里，反馈对事不对人。如果CEO不断给出反馈，那么与之互动的每个人都会习惯这一点。没人会想：“天呐，他这么说到底是什么意思？他是不是不喜欢我？”每个人都会自然而然地关注事情本身，而不会认为你是在随心所欲地评估他们的表现。</p>
<p>•人们会习惯于讨论坏消息。如果人们习惯了讨论个人失误，那么讨论公司失误就会变得很容易。优秀的公司文化深谙“好事不出门，坏事传千里”的信息传播规则，而糟糕的公司文化则有绿野仙踪中东方女巫的影子：“别告诉我坏消息。”</p>
<p>CEO的炼成</p>
<p>做CEO还需要有更广泛的技能，但要达到高级水平，获得天生就是CEO的感觉，你还要掌握这些后天的行事技巧。</p>
<p>如果你是创始人CEO，在做这些事时觉得别扭或者力不从心，并且深感在公司规模达到100人或1 000人时你无法做到这一点，那么欢迎你加入我们的俱乐部。这都是我的亲身体验。我遇到过的每一位CEO都是如此。这是一个过程，CEO就是这么炼成的。</p>
<p>如何评估CEO？</p>
<p>CEO是公司里最重要的角色，因而也是最受关注的一个人。由于CEO的职责界定非常模糊，所以常会害得你被各种各样的烦心事绊住手脚（尤其是当你听信某些人的话，认为“CEO就该是最棒的销售员”时）。</p>
<p>只可惜，有关这个问题的分析极少会对CEO产生帮助，因为大部分分析都是人们在私底下的议论。在此，我想反向地来聊聊这个话题。通过介绍自己设定的CEO评价标准，说说对CEO这份工作的定义。以下是我要提出的三个关键问题：</p>
<p>•CEO是否知道该做什么？</p>
<p>•CEO是否能让公司按他的意愿行事？</p>
<p>•CEO是否能就既定的目标取得理想的结果？</p>
<p>CEO是否知道该做什么？</p>
<p>人们应该就这个问题给出尽可能宽泛的注解。CEO是否在任何时候、任何事情上都知道该做什么？从微观层面看，它包括人事问题、财务问题、产品策略、目标分级、市场营销等方面。从宏观层面来看，它是指一个CEO是否为公司设定了正确的发展战略，是否知道该战略对公司各个方面会产生怎样的意义和影响。</p>
<p>我对这个问题的考量基于以下两个方面：</p>
<p>•战略。在优秀的公司里，发展蓝图和发展战略是一个概念。因此，所有的战略性工作最后都指向一个正确结果——发展蓝图。</p>
<p>•决策。CEO制定决策的速度和决策本身的品质可以反映他是否知道该做什么。</p>
<p>发展战略与发展蓝图</p>
<p>CEO有责任构建一个每位员工都能参与的发展环境。这个环境可以给人们从事的具体工作赋予意义。它能协调利益，促成决策，并且还能激发员工的工作热情。明确且合理的发展目标有助于构建这个环境，却代表不了全局的发展蓝图。说得更确切一点，目标不等于蓝图。蓝图超越了季度目标和年度目标的范畴，直指“为什么”的核心问题。为什么我要选择这家公司？为什么在这里工作，我应该感到荣幸？为什么我要购买它的产品？为什么我要给它投资？为什么这个世界因为有这家公司的存在而变得更好？</p>
<p>当一家公司能够清晰地规划它的发展蓝图时，供所有人——员工、合作伙伴、客户、投资人、媒体——参与其中的发展环境就会变得明朗。一家无法清晰规划蓝图的公司常常会出现这样的抱怨：</p>
<p>•记者们没搞清楚状况。</p>
<p>•公司里究竟由谁负责战略部署？</p>
<p>•我们拥有卓越的技术，但是营销部不太配合。</p>
<p>CEO不必亲自担当远景规划师，也不必非得是蓝图设计师。但是，他必须是远景和蓝图的保护者。唯有这样，他才能确保公司的发展蓝图方向明确、令人信服。</p>
<p>发展蓝图不同于使命宣言，不是三言两语就能概括的。它就像一个故事，只要有必要，你可以一直讲下去，但是这个故事必须得有吸引力。一家没有故事的公司往往会缺乏战略性的发展规划。</p>
<p>想听听那些优秀公司的发展蓝图吗？去看看杰夫·贝佐斯在1997年写给其公司持股人的那封足足三页的信吧。那既不是口号，也不是宣言，而是一封洋洋洒洒的长信。在信中，杰夫讲述了亚马逊的创业故事，与所有读者尽情分享了他的发展蓝图。</p>
<p>制定决策</p>
<p>有些员工负责产品，有些员工负责销售，而CEO负责制定决策。正因如此，我们可以根据CEO制定决策的速度和决策本身的质量来对他进行准确的评估。伟大的决策往往来自那些集智慧、理性和勇气于一身的精英式CEO。</p>
<p>正如我在前文中所说的，勇气的作用不可小觑，因为CEO所做的每一个决定都是基于不完整的信息。根据哈佛商学院对某些个案进行的事后比对分析，CEO在对某一问题进行决策时，掌握的信息通常不到总信息量的1/10。所以，CEO必须有放手一搏的勇气，必须有胆量带领公司朝着一个不明确的方向前进，即便最终发现这是个错误的方向。那些最艰难的抉择（往往也是最重要的抉择），难就难在它们往往会遭到CEO最重要的支持者（员工、投资人、客户）的强烈反对。</p>
<p>在CEO的职业生涯中，我做过的最正确的一个决定就是将Loudcloud公司转让给EDS公司，继而发展成为后来的Opsware公司。假如当年我交由员工、投资人和客户对此事投票表决，那他们肯定会以压倒性的优势让我的转让计划泡汤。</p>
<p>作为CEO，你不可能有充足的时间搜集所有的信息，然后再做决定。每一个寻常的日子里，你都得做出大大小小上百个决定，不可能为了对某一个决定进行最全面的资料搜集和最详尽的分析，你就停下所有的工作。明确了这一点，你就应该用心在日常工作中持续且系统地搜集信息，以便在决策时刻来临时有备而战。</p>
<p>要想做好准备工作，你必须系统地获取多方面知识，以便在制定决策时派上用场。你可以从这类问题入手：</p>
<p>•竞争对手可能会有什么动作？</p>
<p>•怎样做才具备技术上的可行性，什么时间做才合适？</p>
<p>•公司的实力究竟怎样？如何才能将实力发挥到极致？</p>
<p>•这样做会带来怎样的财务风险？</p>
<p>•这个问题会对目前的产品结构带来怎样的影响？</p>
<p>•员工对此次促销的态度是兴奋还是沮丧？</p>
<p>优秀的CEO会通过巧妙的策略来搜集必要信息。他们会把对信息的捕捉渗透在每一项日常工作中，比如员工会议、客户会议，甚至是“一对一”的会谈。正是在与员工、客户、合作伙伴以及投资人的每一次交流中，CEO掌握了有助于他实施决胜策略的最全面的信息。</p>
<p>CEO是否能让公司按他的意愿行事？</p>
<p>如果CEO勾画出了令人向往的公司发展前景，并且能快速做出高质量的决策，那他是否能让公司上下照他的意愿行事？要做到这一点，第一个要素就是我在前文中提到的领导才能。</p>
<p>除此之外，CEO还要掌握丰富的运作技巧，才能确保决策得以顺利执行。公司规模越大，所需要的管理技巧就越复杂，越精妙。</p>
<p>公司能够执行你的各项决定和措施的必要前提是：</p>
<p>•公司有能力这样做。也就是说，公司的相应岗位上有这样的人才，能够担此重任。</p>
<p>•公司里所有员工都能正常履行职责。员工的工作积极性高涨，沟通渠道顺畅，知识储备丰富，工作环境清明。</p>
<p>CEO带领的是世界一流的团队吗？</p>
<p>CEO既负责组建管理团队，又负责掌控所有员工的面试和招聘环节。他必须确保公司网罗到最优秀的人才，继而从中甄选出天赋与能力俱佳的候选人。确保员工队伍的品质是管理公司的关键。优秀的CEO会经常通过评估来确保这支队伍的素质。</p>
<p>CEO的能力决定员工队伍的品质。务必要强调的一点是，员工队伍的品质直接关系到在面对挑战时，这支队伍能否及时按照公司的相应需求去应对。因此，以下这种情况极有可能出现：管理团队变动了好几次，而员工队伍始终在高质量地执行决策，且人员流失率几乎为零。</p>
<p>员工为公司做贡献的难度有多大？</p>
<p>第二个评判标准可以衡量CEO能否有效地管理公司。为了验证这一点，我喜欢问这个问题：员工完成这一工作的难度有多大？</p>
<p>在管理得当的机构中，人们会把焦点放在工作本身（而不是企业政治或是官僚作风），并且坚信顺利完成工作对于公司和他们本人都有益处。相反，在管理不善的机构里，人们会花大量精力去应付部门矛盾和流程缺陷。</p>
<p>说起来容易，但是真正要建立一个运转良好的公司则需要有相当高超的技巧。这些技巧涵盖组织设计、绩效管理等方面，还涉及推动员工发展的奖励机制和沟通机制。当某个CEO达不到能力标准时，他往往是在这个方面出了问题。事实上，很少有CEO在这个衡量标准上得到高分。</p>
<p>在线影片租赁公司Net.ix的CEO里德·哈斯汀斯在设计一个驱动员工效能最大化的系统上做出了了不起的尝试。他将这套系统称为“关于我们的自由与责任文化的参考指南”。其中包含了Net.ix公司界定的员工优秀品质、如何在面试环节甄别出这些品质、如何巩固这些品质，以及如何在员工数量日益增长的同时升级这套系统。</p>
<p>CEO是否能就既定的目标取得理想的结果？</p>
<p>基于目标衡量业绩时，我们首先要确保目标的正确性。在董事会游刃有余的CEO们，往往能够通过人为降低目标而取得“成功”。而那些优秀的CEO们却因为忽略董事会，将目标设定得过高，进而遭遇“失败”。一家公司在发展之初，没人能预测机遇的大小，因此制定的目标往往会产生误导性。所以说，准确衡量业绩的前提条件就是制订正确的目标。</p>
<p>我还经常提醒自己，对于不同的公司，机遇的大小和种类会千差万别。希望一家生产硬件的公司和用户导向型的互联网公司同样采用“轻资产”的发展模式，这样的想法不仅毫无意义，而且还会带来负面效应。衡量CEO的业绩时应该以他所在的公司——而非其他公司——的发展机遇为基础。下面，我和大家分享一个讲述CEO在真实环境下根据结果提交业绩的故事。这则故事的主人公是百度——中国最大的搜索引擎公司——CEO李彦宏。在2009年于斯坦福大学所做的演讲中，李彦宏回忆起百度上市时的感受。企业上市通常是一个企业家一生中最兴奋的时刻，而他却坐在桌边诚惶诚恐。为什么会这样？来听听他自己是怎么说的。</p>
<p>2004年，我们从Draper Fisher Jurvetson和谷歌等公司那里融到了最后一笔风险投资，后者是我们的同行。2005年，公司上市。理想的开盘价格是每股27美元，结果却报收每股122美元。这对百度员工和投资者来说都是特大利好消息。然而，我的感觉却是苦涩，因为在决定让公司上市时，我预期的股价是27美元，或者更高一点，30~40美元。当股价在第一天达到每股122美元时，我真的惊呆了。这意味着我的实际业绩必须大大高出预期业绩。我别无选择，只好埋头于运营、专注于技术和用户体验，最后，我终于交差了。<br>一旦将以上这些全部纳入考量范畴，我们就会发现，基于目标取得的业绩（或者说“功能型的业绩”）其实是一个滞后的指标。正如他们在共用基金的章程上所说的，“过去的表现无法保证将来的结果”。而CEO的结构型评价标准——CEO是否知道该做什么以及CEO能否让公司去执行他的意愿——将会在预测未来方面大显身手。</p>
<p>小结</p>
<p>CEO的评估不是复杂、诡秘、难以言说的艺术。所有人，包括CEO们，在预先得知结果的情况下都会取得更好的成绩</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第七章　前途未卜时怎么办？</p>
<p>这是为贫民窟的人而歌，只有他们懂得其中真意。<br>——美国说唱歌手纳斯《唐》<br>当年，把Loudcloud公司出售给EDS公司后不久，我们又陷入了新的危机。由于我们已将全部的创收项目和所有的客户拱手相让，机构投资人认为我们已经]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业维艰6]]></title>
    <link href="http://yoursite.com/2016/03/03/read/%E5%88%9B%E4%B8%9A%E7%BB%B4%E8%89%B06/"/>
    <id>http://yoursite.com/2016/03/03/read/创业维艰6/</id>
    <published>2016-03-03T11:26:36.000Z</published>
    <updated>2016-03-03T11:26:36.000Z</updated>
    <content type="html"><![CDATA[<p>第六章　关注眼前的麻烦</p>
<p>这他妈的不是咱黑人的做派，如果你是真正的黑人，那就和我对着干。<br>——美国说唱歌手特立尼达·詹姆斯《所有美好的一切》<br>在Opsware举办的一次公司例会上，有人提出一个困扰他很久的问题。“公司里的脏话太多，这让大家很不舒服。”其他人立马帮腔道：“没错，这让我们的工作环境很不专业，该治理一下了。”虽然他们语焉不详，但我知道他们主要是针对我，因为我就是公司里的脏话大王，没准儿还是这个行当里的脏话大王。那段日子里，我忙得焦头烂额，说不了两句话就会往外蹦脏字。</p>
<p>有时我是故意的。给员工交代工作的时间就那么多，所以我必须在有限的交流时间内让自己的指令准确无误地传达出去。没有什么比隔三岔五甩几个脏字更管用的了。如果我对他们说“这不是重点”，其威慑力绝对没有“这他妈的根本就不是重点”强烈。一旦我开了这个头，其他人就会依样效仿。要是你希望自己的观点像阵风一样传遍公司，那么，冒几个脏字绝对奏效。（但是，如果你不希望自己的员工说起话来像一群二流子，那你就得检点自己的行为了。）很多时候，我都是情绪激动而在不经意间说了脏话。这不是一家好管理的公司，而我也因此患上了CEO综合征，症状就是情绪失控说脏话。</p>
<p>既然大家已经把这个问题拿到桌面上来说，那我就得认真对待了。那天晚上，我苦思冥想，得出了以下几个结论：</p>
<p>•在科技行业，有些人不介意脏话，而有些人却介意。</p>
<p>•如果明令禁止说脏话，那么习惯说脏话的人可能会觉得我们古板教条，进而辞职。</p>
<p>•如果允许说脏话，有些人会辞职。</p>
<p>•我有私心，难以公允决断，因为我本人就是最大的违规者。</p>
<p>一番深思熟虑之后，我意识到那些目前最优秀的科技公司，比如微软和英特尔，根本不把这种禁忌当回事。如果我们禁止说脏话，那无疑会让自己在这个行当里显得格格不入。当然，也不能因此纵容说脏话。要想招募到最出色的工程师，我们只能在那些对脏话最无所谓的高科技领域中寻找。摆在我们面前的路有两条，要么以顶尖人才为重，要么以一尘不染的企业文化为重。该怎么办？答案很简单。</p>
<p>我决定保持现状，但是我需要做一个声明。大家对此现象心怀不满并且当着我的面提了出来，那我就该给他们一个说法。这是个技术活，脏话可派不上用场。我绝对不想让脏话成为恐吓或者骚扰员工的武器，所以我得为脏话的用途做一个清晰的界定。在什么样的情境中才可以正当地说脏话？这让我煞费苦心。</p>
<p>当晚，我碰巧看了一部20世纪70年代的影片，名叫《恋童癖》，该片描写了一个猥亵儿童的罪犯被判入狱后的一段曲折经历。监狱里的人们奉行的道德准则是：猥亵儿童者必须死。片中有个年轻人，他被其他狱友戏称为“纸杯蛋糕”。</p>
<p>没想到，这部电影为我提供了灵感，让我找到了对策。</p>
<p>第二天，我在公司大会上发表了这样一段讲话：</p>
<p>我已经注意到，你们当中有很多人反感我们说脏话。作为头号违纪者，我已经开始反思我的个人行为乃至整个公司出现的这种现象。我发现只有两个选择：第一，禁止说脏话；第二，接纳脏话。折中做法很难行得通。我不可能给别人强加一个脏话的“最低控制线”。我曾经说过，要想让公司在竞争中立于不败之地，就必须引进全世界最优秀的人才。在科技领域，说话带脏字几乎是所有公司员工的通病。因此，禁止说脏话只会拒那些优秀人才于千里之外。所以说，我们允许它的存在，但这并不意味着你可以用污言秽语恐吓或者骚扰其他人，用脏话来干坏事。从这个角度来说，脏话和其他言语的意义是相同的。例如，“纸杯蛋糕”这个词，如果我对香农说：“你做的纸杯蛋糕味道不错”，那肯定没问题。但如果我对安东尼说：“嗨，纸杯蛋糕，你穿牛仔的样子棒极了”，那就不得当了。<br>自那天以后，我再也没听到有谁抱怨别人说脏话，也没有人因此而离职。有时候，企业领导者只需言简意赅地表明态度，不一定非得提出具体的解决办法。一旦我明确表明脏话可以说——只要不是用于恐吓或骚扰——那就没人会再找麻烦，至少据我所知不会再有。推行这个条令的最终结果令人满意：舒适的工作环境，较低的人员流失率，消失的怨言。有时，CEO能执行的规定就是好规定。</p>
<p>一个公司在发展过程中会经历很多变化。如果你当初在建立企业文化和塑造企业精神方面煞费苦心，那么无论你是否想放慢发展的脚步，你都得记住，现在这个有着1 000名员工的大公司早已不是当年那个你带着10个人打天下的小作坊了。但这并不意味着人员增加到1 000、10 000，甚至10万时，你就玩不转了。关键在于与时代同步。管理好一家拥有一定规模的企业意味着你得承认它今非昔比，接受那些无法回避的变化，这样才能保证不把事情搞砸。本章将要为你介绍的，就是那些你不得不做出的改变。</p>
<p>如何最大限度地减少办公室政治？</p>
<p>在商界多年，我从未听说有人对办公室政治心怀好感，大多数人对此都是满腹怨气，就连那些公司老板们也不例外。既然大家都反感办公室政治，为什么它还是如影随形呢？</p>
<p>几乎所有的办公室政治都是由公司老板开的头。你可能会觉得委屈：“我讨厌政治，不爱耍手腕，但我的员工们却恰恰相反。这绝不是我的原因。”你错了。公司内部的办公室政治并不在于你本人是否爱耍政治手段。事实上，那些最缺乏政治头脑的老板往往会带出一支最善于钩心斗角的队伍。这些对政治不感兴趣的老板们常常在不经意间助长了公司内部激烈的政治斗争。</p>
<p>我所说的政治，是指员工在职场进阶的过程中，依靠手段，而非业绩和贡献为自己谋取空间。我们生活中的政治形态有很多种，但这种形式的政治确实让人头疼。</p>
<p>办公室政治是如何产生的？</p>
<p>公司CEO无意间对政治行为的鼓励抑或放任，往往办公室政治发端的源头。就拿给管理人员定薪酬为例。如果那些资深员工不时地找你加薪，示意你他们的所得远远低于应得，甚至暗示你他们手头还有别家公司伸出的颇具诱惑力的橄榄枝，你会怎么办？如果对方的要求合情合理，你也许会酌情考虑，然后给他加薪。这种做法听起来无可厚非，但其实你已经就此为办公室政治的蔓延埋下了祸根。</p>
<p>具体来说，你所奖励的并不是推动公司发展的行为。员工获得加薪是因为他提出了加薪的要求，并非因为他真的工作出色。这会产生什么样的危害？让我们来梳理一下：</p>
<p>1.公司里其他跃跃欲试的员工很快就会依样效仿。没有不透风的墙。无论是这一轮竞争者还是那个先吃螃蟹的人，加薪与否都将与工作表现无关。你花时间考虑的，不是对方的工作业绩，而是政治问题。如果你对员工的驾驭能力较强，那就无须满足所有人计划外的加薪要求。最终，这些资深员工的加薪标准将演变为：先到先得。</p>
<p>2.仅仅因为对政治手腕不敏感，公司里那些默默无闻的员工将无缘这份计划外加薪。</p>
<p>3.你的员工从此次事件中总结出：会哭的孩子有奶吃，会耍手腕的员工有钱赚。准备好听他们的集体号哭吧。</p>
<p>下面，我们举个复杂点儿的例子。你的财务总监对你说他想当经理，最终目标是常务总经理，希望你指点一二。为了鼓励他的积极性，你可能会赞赏他的梦想，表达对他的信心，并建议他努力拓展自己的知识面。此外，你还告诉他，只有强有力的领导方式才能让手下人心服口服。一周后，另一个中层管理人员惊慌失措地找到你，说财务总监已经问过他是否有意为他工作了，并听说你已经有意提拔他当常务总经理。意外吗？好戏才刚刚开始。</p>
<p>如何将办公室政治的发生率降到最低？</p>
<p>将办公室政治的发生率降至最低可不是件容易的事。思想开明或者乐于鼓励下属的优秀领导并不一定能在这件事上发挥积极的作用。</p>
<p>管理资深员工和新员工是两码事，其间的差异就好比你在拳击场上打比赛，前者是职业拳击手，后者则是个外行。如果你只是和外行对打，你可以想怎么打就怎么打，对方不会把你怎么样。假如对方是职业拳击手，那你就要费点儿心思了。多年的专业训练足以使他们捕捉到对手在技术上细微的漏洞，使你在瞬间失去平衡，对手需要的恰恰就是这转瞬即逝的战机。</p>
<p>同样，如果你面对的是职场新手，当他们咨询你有关职业发展的问题时，你可以实事求是地表明态度，然后轻松脱身。但是，如果对方是一个野心勃勃的职场老将，那结果就不容乐观了。所以，要想不被办公室政治弄得手忙脚乱，你就有必要修正自己的策略。</p>
<p>应对策略</p>
<p>我在担任CEO的过程中，总结出了两条关键策略，它们在预防办公室政治方面发挥了极大的作用。</p>
<p>1.选拔员工时要衡量对方的野心有多大。前文涉及的人都有野心，但不一定每个人都是天生的权谋家。如果你想把自己的公司变成美国参议院的缩影，最保险的途径就是去选拔那些野心勃勃的人。安迪·格鲁夫认为，那种以公司的发展为依托，实现个人发展的野心才是恰如其分的，个人的成就仅仅是以公司成就为前提而形成的伴生物。相反，只关注个人成功而将公司利益置之不顾的人拥有的只是不当的野心。</p>
<p>2.建立严格的流程来防范潜在的办公室政治，并认真执行。易招致是非的领域包括：</p>
<p>•业绩评估和业绩奖励</p>
<p>•机构设置和职权划分</p>
<p>•员工提拔</p>
<p>我们来逐一分析这几个领域，看看如何建立并实施一套行之有效的规范，来杜绝公司员工因争权夺利而引发的不良现象。</p>
<p>业绩评估与业绩奖励。在这个问题上，很多公司的老板往往都不能及时落实。他们并非不进行绩效管理和薪酬核定，只是常常临时起意，结果给日后公司内的权谋之战留下可乘之机。通过开展严谨规范的绩效管理和薪酬核定，可以确保在员工收入和公司赢利之间达到尽可能高的一致性。这一点尤其适用于管理人员的薪酬核定，因为这同样有利于减少办公室政治。在前文提到的事例中，如果公司的CEO实行了严格的绩效管理和薪酬核定，那他就可以拒绝对方的加薪请求，告诉他必须得按照统一的标准来执行。最好是由董事会集体讨论管理人员薪金的发放，以确保管理的有效性，杜绝例外情况的发生。</p>
<p>机构设置和职权划分。假如你的手下都是些野心勃勃的家伙，他们就会不时地想扩展自己的势力范围。比如，前面提到的觊觎常务总经理位子的财务总监。有时，市场部的总监想涉足销售部的业务，或者技术部的负责人还想兼管一下产品部，这样的情况不一而足。如果有下属向你提出了类似的要求，切记要措辞严谨，因为你说的每一个字都可能成为权力角逐中的砝码。一般情况下，最好不加评说。最多就是问问“为什么”，但千万别对对方提出的理由做出任何反馈。一旦你流露出了自己的观点，那就会一传十，十传百，流言满天飞，各种不利于公司发展的言论都将随之而来。而你，就是那个始作俑者。你需要做的，是定期考量公司的机构设置，搜集所需的信息，在下属还没发现任何预兆时就做出决策。决策既出，立即执行，不给小道消息和流言蜚语留一丁点儿机会。</p>
<p>员工提拔。在提拔某个员工时，他的同事们必会揣摩他受重用的原因，究竟是业绩骄人呢，还是手腕高明？如果答案是后者，那他们的反应不外乎以下三种：</p>
<p>1）恼怒，觉得自己不受重视。</p>
<p>2）明目张胆地和被提拔者对着干，暗中使坏。</p>
<p>3）效仿对方的手腕，实现自己的目的。</p>
<p>很明显，你不希望这样的情况发生在你的公司。因此，你务必要创建一套正式、公开且合理的提拔体制。这套体制在衡量你身边的管理人员时应有所区别。（普通员工的升迁由其所在部门的主管推荐，而部门主管的职务变动则要由董事会决定。）这样做有双重目的。其一，公司将升职与业绩挂钩，这至少会让员工们干劲儿十足；其二，这样的选拔过程可以为你手下的管理团队提供必要的信息，好让他们了解你的决策意图。</p>
<p>当心道听途说。当你的公司规模日渐壮大，你手下主管相互间的怨气就会逐渐升级。有时，这种怨气火药味儿十足。所以，你要特别注意你倾听抱怨时的方式，并对潜伏在抱怨背后的信息细加甄别。如果你只听不表态，不为被投诉者说几句公道话，那别人就会以为这是无声的支持。如果别人以为你认同他的观点，即某个主管能力欠佳，那么风声就会传遍全公司。最后，没人再听这个被投诉者的号令，他的管理很快就会陷入僵局。</p>
<p>你通常会听到两种典型的投诉内容：</p>
<p>1）投诉某主管的所作所为；</p>
<p>2）投诉某主管的个人能力和工作表现。</p>
<p>通常情况下，解决第一种投诉的最佳方法就是把投诉人和被投诉人请到一起，让他们互相挑毛病。一般说来，只要你能让他们双方坐下来谈，就能够化解矛盾，调整各自的行为方式，使他们的相互关系得以改善（如果两人的关系的确已经很糟糕）。不要在其中任意一人缺席的情况下试图解决这类矛盾，因为这样做只会助长主管们相互间的倾轧和猜忌。</p>
<p>与之相比，第二种类型的投诉不太常见，却更为复杂。如果你的某个主管胆敢在你面前指责别人的能力，那极有可能说明他或对方存在着很严重的问题。对于这样的投诉，你的反应不外乎两种：第一，意料之中，这件事你已经有所耳闻；第二，大吃一惊，对方公布了爆炸性的消息。</p>
<p>如果是前者，那你就该担心了。看来事态的发展早已超出了你的预期。无论你出于什么原因一再庇护这个刚愎自用的主管，现在看来，公司上下已经对他忍无可忍了。所以你必须快刀斩乱麻，也就是说，解雇他。多年的管理经验告诉我，主管可以通过努力提高他的业务能力和工作表现，可一旦失去人心，那就回天乏力了。</p>
<p>相反，如果投诉者提供的情况你闻所未闻，那就应该立即停止谈话，明确向他表示你不认同他的看法。你不能在重新评估某人的工作表现之前就轻易否定他，也不该让这样的投诉演变为满足一己私欲的揣测。结束谈话后，你务必对被投诉者的工作即刻进行考量。如果对方表现出众，那你就得弄清楚投诉者的动机并加以解决，绝不要让事态向纵深发展。如果对方表现确实不尽如人意，你可以再回过头找投诉者了解更多内情，如果情况确实很糟糕，你可以将被投诉者辞退。</p>
<p>作为公司的一把手，你必须考虑到自己的一言一行在全公司可能引发的后续效应。尽管开明机警的行动派领导形象确实能让你自我感觉良好，但切忌因此而助长公司里的某些不良风气。</p>
<p>适度的野心</p>
<p>在组建管理团队时，大多数新创业的公司都倾向于把“智商”作为选拔人才的主要标准。然而，一支智商出众但野心过盛的团队却不会对公司发展做出积极的贡献。前文中已说过，招聘人员时，一定要留意对方的野心指数是否合宜。在过去几年里，人们对我的这一观点各执一词。</p>
<p>从宏观的角度来看，只有当资深主管们把集体成就放在个人成就之上，从全局角度而非个人角度来考虑问题时，这个公司才有可能实现利益最大化。没有哪个老板制定的员工奖励机制是无懈可击的，而且，诸如升职和职权归属之类的激励措施也不属于奖金发放和其他久经检验的管理工具的范畴。在以公平、公正为基础的奖赏体系中，公司利益的最大化就意味着个人利益的最大化。就像我在Opsware的销售主管马克·克兰尼所说的：零的1%还是零。</p>
<p>主管的野心指数应保持在适当的范围内，这一点相当重要，因为这是维系员工工作积极性的一个重要前提。如果一个主管对于个人前程的关注超过了对公司业绩的关心，那他手下的员工一定会想：我干吗要加班加点地为这家伙卖命？最能激发员工积极性的做法莫过于让他们怀揣使命感去工作，让他们相信这份崇高的使命值得他们把个人抱负暂放一边。所以说，能将理想抱负控制在合理范围内的主管比那些野心勃勃的家伙更有价值。为方便大家详细了解野心过大的危害，我强烈建议大家读一读苏斯博士所著的管理学经典——《乌龟大王亚特尔》。</p>
<p>鉴别适度的野心</p>
<p>与识别其他复杂的个性特质一样，我们很难在面试中鉴定一个人的野心指数高低。尽管如此，我们还是希望以下经验能对大家有所帮助。</p>
<p>一般来说，每个人都有自己独一无二的看问题的视角。在面试候选者时，你可以留意他们在这方面的一些微小差别，看看他们在考虑问题时究竟是以“我”为出发点，还是以“团队”为出发点。</p>
<p>以“我”为出发点的人往往会这样描述刚刚离职的上一家公司：“在我的上一家公司，我玩儿的是电子商务。我觉得那份工作丰富了我的阅历。”请注意，用“我的”来指涉公司恐怕会让公司的其他成员直呼“不”，甚至还会惹恼他们。而且，野心适度的人不会用“玩儿”这个字眼来描述他与团队其他成员共同取得的成绩。另外，以“我”为出发点的人会觉得用“丰富了我的阅历”这样的字眼再自然不过，而以“团队”为出发点的人则会觉得这样的表述很不地道，因为这无疑传递出一个信息：这个人心里只有个人目标，缺乏团队意识。</p>
<p>相反，以“团队”为出发点来考虑问题的人说话时很少使用“我”，哪怕是在谈论其个人成就。在面试中，他们总会把功劳推到从前的合作伙伴身上。相对于工作待遇和职业发展，他们更关心这家公司的实力。如被问及为何离开上一家公司，他们往往会把责任归咎于自身，检讨自己判断力不佳而做出的错误决策。</p>
<p>我在招聘Opsware全球销售主管一职时，就是使用以上方法鉴别出了最佳人选。由于这个岗位涉及销售，所以候选人是否有全局意识、是否能将公司利益置于个人利益之上就成为我考量他们的一条重要标准。其原因有很多：</p>
<p>•销售工作的奖励力度大，如果没有得力的领导者，各方关系将很难得到平衡。</p>
<p>•销售部门是一个企业面向外界的窗口，如果这支队伍以个人利益为中心，公司将后患无穷。</p>
<p>•在高科技企业，销售部是弄虚作假的源头，因为销售主管极易为了实现局部业绩最优化而说出不实之词。</p>
<p>整个面试过程中，我们接待了许多自以为是的应聘者。他们介绍了自己拿下大单业务、实现宏伟目标、为公司创造辉煌业绩的光荣历史。无一例外的是，这些人夸耀自己的丰功伟绩时滔滔不绝，但在细数这些业绩背后的细枝末节时却吞吞吐吐。在之后的资格审查中，我们从当年与他共事过的人那里听到的是全然不同的版本。</p>
<p>而当马克·克兰尼坐在我面前时，我却很难听到他谈论自己的光荣历史。说实话，其他面试官觉得克兰尼有些自高自大，在回答某些问题时的那种生硬态度甚至还让他们相当恼火。其中有一人不满地说：“本，听咱们在耐克公司的联络员说，是这家伙让耐克公司的产品销量从100万增加到500万，可他本人却只字不提。”的确，在面试中，他只愿意回顾过去公司的业绩，不厌其烦地描述他所在的团队如何在竞争中找出自己的软肋，以及他如何与另一位主管联手来推广产品。此外，他还聊起自己如何与耐克公司的CEO协同改进销售人员的培训和管理方式。</p>
<p>此前，克兰尼已经从我们头号竞争对手的销售代表那里了解到了他们的业务范围。所以，当我们的谈话内容转向Opsware时，克兰尼不留情面地质问我如何与对方竞争，如何进军我们未曾涉足的领域。他希望了解团队中每个成员的优势和弱点，也想知道我们的下一步发展规划是什么。直至谈话接近尾声，我们才说起了薪酬和职位等具体事宜，他期望能按劳取酬，而不是靠玩弄权术获得利益。很显然，克兰尼关注的是团队这个整体。</p>
<p>克兰尼在Opsware担任销售主管期间，公司产品的销量增加了10多倍，市场资本额增加了20倍。更重要的是，销售部门的顾客主动流失率相当低，因为他们一直都能得到最公平、最诚信的服务。我们的法律事务部和财务部的人常说，克兰尼就像公司的坚实铠甲，保护着大家一路向前。</p>
<p>小结</p>
<p>个别员工私心重也许没什么太大危害，但如果你把公司的重要部门交给那些野心家来打理，公司就会危机重重。</p>
<p>头衔与升迁</p>
<p>在与新公司打交道时，我发现对方员工往往都是些无冕之王。这也合情合理，毕竟他们都是初来乍到打江山的，没必要而且也不可能给每个人划分明确的岗位职责，因为他们什么都做一点。这个阶段不存在政治斗争，也没有人觊觎皇权王位。这种状态实在很美好。那么，为什么所有的公司最终都会给不同的人分封不同的头衔？怎样分配这些头衔才算正确？</p>
<p>头衔为什么重要？</p>
<p>促使公司分封不同头衔的两个重要原因是：</p>
<p>1.满足员工的需要。你打算把毕生心血投入自己的公司，但有些员工可能还会另谋高就。假如你的销售主管去别处求职，他肯定不想说，自己尽管带领着一支遍及全球数百人的销售团队，却依然是个“伙计”。</p>
<p>2.达到识别身份的目的。人们需要知道“谁”是“谁”。随着公司规模的壮大，员工们不一定能认得每一位同事。更重要的是，他们不知道别人的分工情况，不清楚该与谁合作才能完成任务。职务头衔就好比速记符号，可以准确地描述公司里每个人的角色定位。此外，客户与商业合作伙伴也能通过这些符号来决定如何以最佳的方式与你的公司合作。</p>
<p>而且，职务头衔也是一个标杆，可以使员工就自己的价值和报酬与其他同事展开比较。假如一位初级工程师认为其编程能力远在高级工程师之上，那就说明给他安排的岗位与支付的薪水都偏低。鉴于头衔可被用于估算相对价值，因此在分配头衔时要慎之又慎。</p>
<p>危险：“彼得定律”与“坏榜样法则”</p>
<p>概念不难理解，那为什么还有那么多家公司最终会在人事任用上出问题？如果你在企业工作过，没准儿也曾经对某个青云直上的家伙满心不服：“他凭什么做到这个职位，要是我，连个饮料摊都不放心交给他。”</p>
<p>这都是“彼得定律”在施威。劳伦斯·J·彼得博士和雷蒙德·赫尔在1969年出版的同名书籍中首次使用了这个术语，意即在一个集团中，员工只要表现出众，就能获得提拔，直至被提拔到一个他不能胜任的岗位（即他们的不称职级别），自此无法再获得提升。安迪·格鲁夫在其管理学经典《格鲁夫给经理人的第一课》中指出，“彼得定律”不可规避，因为我们无从预知某个人的能力会在权利阶梯的哪一层止步。</p>
<p>另一个原因是，“坏榜样法则”。依据该法则，一个团队内部无论哪个层面出现了滥竽充数的人，他们都会像蛀虫一样影响其他成员，最终使得能力出众的人也渐趋平庸。</p>
<p>这条法则的原理就是：员工会拿他们上级中能力最差的那个人做参照物。举个例子，如果贾斯珀是几个副总裁中最平庸的一个，那么所有的部门主管都会以他为标准，提出升职的要求。</p>
<p>和应对“彼得定律”一样，你的最佳对策就是减轻“坏榜样法则”的影响，这对于保证公司员工的整体素质至关重要。</p>
<p>升职标准</p>
<p>制定科学严谨的升职标准是降低“彼得定律”与“坏榜样法则”不良影响的最佳手段。在这个问题上，我们可以借鉴一下柔道运动选拔高手时的竞赛标准。一名柔道选手要想升入高级别段位，必须要击败这个级别上的某一个选手（例如从褐带段级上升到黑带段级）。这可以确保新晋的黑带选手至少不比现任黑带选手中实力最差的那个人弱。</p>
<p>让人苦恼的是，公司可不是竞技场，没法进行一对一的单挑。那么，怎样才能保证人才选拔的准确性呢？</p>
<p>第一，对各级别岗位的职责范围和能力标准做出简明扼要的界定。避免使用空泛的字眼，比如“必须胜任管理工作”或者“必须有出众的管理才能”等。实际上，最好的评价标准往往相当具体，甚至是有一说一，例如“招聘专员需具备明星气质，要不亚于珍妮·罗杰思。”</p>
<p>第二，制定所有岗位的正式升职标准。其核心准则就是，要通过跨部门考核来决定是否提拔某个员工。如果你任由某个部门经理单方面发出提拔指令，那很有可能造成人力资源部有5个副经理而技术部只有一个副经理的混乱局面。组建评审委员会可以有效地在各部门之间达成平衡。委员会定期审核公司内部所有重要岗位的人事安排。经理想要提拔某个下属时，必须要在评审会上提出来，并说明其推荐理由。评审委员会评定该人员是否达到岗位标准，并将他与其他同级员工做比较，最终决定是否提拔。除保障公平和品质外，这个过程还能让你的管理团队更好地了解被评议人在工作上的表现。</p>
<p>安德森VS扎克伯格：头衔多大才合适？</p>
<p>公司里除你之外最大的领导者是谁？是副总裁，还是各位董事？是首席营销主管、首席财务主管、首席人事主管，还是首席小吃主管？关于这个问题，马克·安德森和马克·扎克伯格提出了两种不同的观点。</p>
<p>安德森认为，员工为公司效力总是希望获得相应的回报，譬如薪水、奖金、股份、权利以及头衔等。这其中，头衔的成本最低，因此可以尽可能定高些，CEO之下是首席主管，然后是高级副总裁。只要他们喜欢，那就给他们相应的职位。另外，在与其他公司比拼实力争取新人时，头衔可以让你更具吸引力。</p>
<p>相反，扎克伯格在管理Facebook公司时，有意识地让各职务级别低于行业内的一般标准。其他公司的高级副总裁在这里只能被降格称作主任或者经理。这是为什么呢？第一，在每个新人入职时，扎克伯格都要给他们重新定头衔，以避免他们的头衔和职位高过那些表现优异的老员工。这样做有助于鼓舞士气，维系公正。第二，这可以使Facebook的各位经理了解并认可这套职务评定体系，为他们本人的升职和加薪发挥更好的作用。</p>
<p>此外，扎克伯格还希望通过降低头衔来传递一些信息，让大家知道哪些人对公司做出了重大贡献。对于一个高速发展的公司而言，清晰的机构划分极为重要。如果公司里有50个副总裁和10个首席官，那么，公司的发展将无从谈起。</p>
<p>他还指出，管理人员的头衔往往比同级别技术人员的头衔更唬人。尽管这样的头衔有利于管理人员开展对外业务，但他依然希望公司的核心竞争力来自产品研发部门。因此，这也是他降低管理人员头衔标准的重要因素。</p>
<p>那么，在引进人才这一环节，Facebook是否因此而错失良机呢？当然。但他们认为，出于这个原因而放弃Facebook的人也不是他们真正需要的人才。实际上，无论是招聘过程还是管理过程，Facebook都制定了详细的条例来保障人员的自主选择权，觉得合适就加入，觉得不合适就放弃。</p>
<p>究竟哪一种做法更有道理呢？安德森的，还是扎克伯格的？不一定。Facebook实力雄厚，在招募人才方面具有充分的优势，所以不必依靠头衔来吸引别人的眼球。而有些公司不一定有如此强大的号召力，那就不妨借助一下花哨的头衔来扩大吸引力。无论是哪种情况，作为掌门人的你始终要保证公司内部严格的职务界定标准和提拔标准。</p>
<p>小结</p>
<p>你可能会认为，花费这么多笔墨来谈论升职和头衔有些过于形式主义。如果这样想，你就错了。没有一套缜密、严格的人员任用标准和升职体系，员工会陷入因不公而引发的无穷无尽的矛盾之中。只要你预防得当，大家就不会再纠缠于头衔的高低，只会一心争当明星员工。</p>
<p>当天才员工变成超级浑蛋</p>
<p>在这个行业，员工必须得有一个足够聪明的大脑。因为我们的工作难度系数大，复杂指数高，而且竞争对手旗下全都是聪明人。然而，只有聪明还远远不够。出色的员工同样还要能吃得了苦，担得住事，并且善于和团队成员和睦共处。</p>
<p>这是我在担任CEO期间历尽艰辛获得的一份感悟。当年，我的目标就是营造这样一个工作环境，以使背景不同、性格迥异、工作方式千差万别的各类优秀人才汇聚一方，共同创造辉煌的业绩。我的想法没错，这就是我的工作。和那些没有纳贤于八方的公司比起来，能将形形色色的顶尖人才招揽在自己门下是一种极大的优势，有助于你吸引和留住更多的能人志士。但是，对人才的依赖要适可而止，不要重蹈我的覆辙。</p>
<p>接下来，我要讲三个关于“天才员工变成超级浑蛋”的故事。</p>
<p>事例一：异类</p>
<p>任何一家大公司都会制定一些没什么用的政策、计划，或是进行一些毫无意义的工作，提拔一些毫不称职的员工。只要是大型机构，那就难求十全十美。因此，公司需要选拔大量头脑灵活且责任心强的员工来发现机构运作中的漏洞，并协助解决这些漏洞。</p>
<p>然而，有些头脑灵活的员工不但帮不了公司，反而会给公司制造更多的麻烦。出现问题时，他们不是立即找出其中亟待修复的漏洞加以解决，而是拼命挑毛病，以凸显自己的高明。具体来说，他会质疑公司的前景，贬低公司的领导者，以此来衬托自己。有这种习惯的员工越聪明，产生的破坏力就越强。也就是说，聪明人产生的危害性会达到最高点，因为人们对聪明人往往坚信不疑。</p>
<p>这些聪明人究竟为什么要贬低自己供职的公司呢？原因有很多，譬如以下这几条：</p>
<p>1.为寻求关注。由于没有机会和主管打交道，因此发牢骚是他获得关注的唯一途径。</p>
<p>2.天生叛逆。他骨子里就桀骜不驯，不叛逆就不舒服。这是一种比较隐秘的人格特征。这种人往往更适合当领导，而不是普通员工。</p>
<p>3.思想不成熟，无法理解公司经营者在管理中不可能知道每一个微小细节这个事实，因此会在出现问题时小题大做。</p>
<p>通常情况下，我们很难让这样的员工扭转态度。一旦他公开表明态度，来自各方的压力便会让他孤掌难鸣。假如他在50个好友面前说了“CEO是个蠢货”这样的话，那下一次他再这样说时就没几个人相信他了。多数人都不愿意让自己的信誉受影响。</p>
<p>事例二：怪人</p>
<p>有些人才高八斗，却一点儿都靠不住。在Opsware公司，我们曾经聘用过一个天才级员工，名叫罗杰（化名）。说他是天才一点儿都不过分。当时，他在技术部工作，一般的新员工至少要花三个月的时间才能渐入状态开展工作，而罗杰只用了两天。到了第三天，我们给他分派了一项预计一个月才能完成的任务。三天后，他给我们提交了一份几乎完美无缺的报告。准确地说，他用了72个小时：不眠不休连轴转的七十二小时，别的什么都不做，只有编程。在前几个月里，他是公司里表现最突出的员工，所以我们很快就给他升了职。</p>
<p>接下来，他就变了。随意旷工，刚开始是几天，后来变为几周，连个电话都不打。等到他终于露一面，便会听到他痛心疾首的道歉，可事后依然如故。他的工作质量也大不如前，人变得懒懒散散，工作时心神不定。我当时很纳闷，这么优秀的一个人怎么变成了这样。由于他在团队中发挥不了任何作用，主管想辞退他，但是我没同意。我认为他的天分依然在，只是需要我们把它发掘出来而已。但是我错了。后来我才知道，罗杰患有躁郁症，但拒绝服用治疗药物，而且，他还吸毒。我们最后不得不开除他。但时至今日，一想到他，我还是会惋惜不已。</p>
<p>不一定只有躁郁症患者才会做出古怪的行为，但古怪行为背后一定有其深刻的根源。有些人是因为染上了毒瘾而走向毁灭，也有些人是因为在别家公司赚外快而一心多用。一个公司是由集体的力量造就的，员工如果不能成为这个集体中值得信赖的力量，那么无论他的个人能力有多强，对于公司来说都是没有价值的。</p>
<p>事例三：浑蛋</p>
<p>这种类型的员工在任何部门都有可能出现，可一旦出现在管理层，其危害力将达到最大。大部分部门主管多多少少都会犯点儿浑，个别时候的满嘴脏话还能起到敲山震虎的作用。但我要说的是另外一种浑。</p>
<p>当一个人一而再、再而三地犯浑时，其后果是令人震惊的。一家公司在成长壮大的过程中，最大的挑战就是沟通。让成百上千人同时为一个目标而众志成城绝不是件容易的事。如果你的主管中有一个浑蛋，这个目标就完全不可能实现。有些人与别人交流时总是气势汹汹，致使别人在他面前根本就没法开口。当有人指出营销部存在的问题时，营销主管都跳出来恶语相向，那交流还怎么进行？久而久之，人们只要见到这家伙在场，就不会讨论任何工作。渐渐地，主管间的沟通不畅会慢慢瓦解整个公司。请注意，这种情况只发生在那些智商出众的浑蛋身上。若不是才智超群，别人也不会把他的攻击放在心上了。恶狗咬人咬得才狠。如果你跟前有这样的恶狗，你就必须早做了断。</p>
<p>区别对待</p>
<p>曾经有人问著名的足球教练约翰·麦登，是否会接纳像特雷尔·欧文斯这样的队员。欧文斯是顶尖的足球运动员，但同时也是个大浑蛋。麦登回答道：“当你的车上拉着全队成员，因为他的迟迟不到有可能错过比赛时，你当然不能再继续等下去，班车得准点开。然而，有时候你需要用专车接送他一个人，因为他是最棒的。”</p>
<p>菲尔·杰克逊是NBA冠军队的教练，也曾被问到对他手下鼎鼎有名的怪才丹尼斯·罗德曼的评价。“既然丹尼斯·罗德曼可以在训练中缺席，那是否意味着迈克尔·乔丹和斯科蒂·皮蓬这样的球星也可以不参加训练？”杰克逊回答道：“当然不是。这个队里只能有一个丹尼斯·罗德曼，事实上，即便是全世界也找不出几个像他这样的人。如果对每个人都网开一面，那就乱套了。”</p>
<p>在你的身边，可能也有符合以上情况的员工，他们能为公司做出贡献，却是不安定因素。你可以尝试私底下将他带来的负面效应降到最低，使他不至于殃及你的企业。</p>
<p>该不该招资深人士？</p>
<p>新起步的公司运转良好，业绩蒸蒸日上，你却听到董事会有人在危言耸听：“应该让老将出马，让一些真正有实战经验的管理人员来帮助公司上一个台阶。”真是这样吗？是时候这样做吗？如果是，那你应该从何入手？请来了他们，你该如何领导？如何衡量他们工作的质量？</p>
<p>你的第一个疑问是，“我为什么要依靠他们？他们的独特品位和老谋深算是否会破坏公司的风气？”在某种程度上，他们会。正因如此，你才需要认真考虑这个提议。但是，能否在适当的时候引入经验丰富的人，往往是决定公司成败的关键。</p>
<p>让我们回过头来看第一个问题，为什么要任用这些资深人士？答案很简单：时间。创办技术型公司，意味着你自此开始了一段和时间赛跑的艰难旅程，这段旅程将持续至你生命的最后一刻。没有哪一家刚刚创业的技术型公司能摆脱产品“保质期”这个魔咒。再伟大的想法过了期就会一文不值。如果扎克伯格上一周才入行，那他的Facebook会何去何从？我们在公司成立一年零三个月时推出了“网景”浏览器，假如晚推出6个月，那我们就会因姗姗来迟而不得不和其他37家公司同分一杯羹。就算没有别的公司先于你抢占市场，如果五六年之后公司还是毫无起色，那无论你有多少雄才伟略，员工们也会失去信心。任用那些曾有过相关创业经验的人可以加速成功的进程。</p>
<p>但是CEO们，千万别大意。聘请资深人士加盟新创业的公司，有点儿像运动员为提高比赛成绩服用兴奋剂。如果使用得当，你有可能刷新纪录；如果使用不当，你就会一败涂地。</p>
<p>要想取得好的结果，你在招聘细则中就不要使用抽象空洞的字眼，比如“成熟的管理”，或是“真正的公司”。这种缺乏力量感的措辞不会起任何作用。恰当的表述可以是，“在某一领域能提供知识引领和经验支持”。</p>
<p>比如说，作为技术型公司的创办者，你可能在如何构建全球销售网络、创立所向披靡的品牌或是在寻找商机获取重要项目等方面不够精通，那么一位世界一流的资深人士的助阵将会大大提高你的公司在这些领域的办事效率。</p>
<p>究竟是从外围选拔人才还是从内部提拔人才？在做这个决定时，你可以先明确一点：对这个岗位来说，你认为究竟是外围经验重要还是内部经验重要。举例来说，技术部经理更需要了解编码基础和技术团队的综合情况，而不是如何管理该部门。因此，作为CEO的你最好从公司内部选拔人才，而不必考虑从外围引进。</p>
<p>但是在涉及销售主管这样的岗位时，就得反过来了。要想使产品走向全世界，销售主管就必须了解目标客户的想法和需求，知道他们的文化取向，清楚销售人员聘用的标准和尺度，从而实现销售业绩的最大化。只了解本公司的产品和文化是远远不够的。这就是为什么你从内部选拔的技术部主管可以干得很出色，而同样是内部选拔的销售部主管，工作起来却力不从心。问问你自己，“这个岗位究竟更看重外部经验还是内部经验？”这会有助于你在业界老手和公司新人之间做出抉择。</p>
<p>加盟之后</p>
<p>邀请资深人士加盟并不是一件轻而易举的事，我在第五章中曾经谈到这个问题，在此不再赘述。</p>
<p>另一个难题是，这些资深人士加盟之后，你该如何领导他们。一般说来，会出现以下几个麻烦：</p>
<p>•他们会沿用过去那套办事方式。这些人会将以前的工作习惯、交流方式和价值标准带入公司，但它们却很难与你的公司文化达成和谐。</p>
<p>•他们清楚如何驾驭制度。这些资深人士都来自大机构，深谙生存之道。但这种态度在你的公司会显得像在玩儿权术。</p>
<p>•你对工作情况的了解程度不如他们。事实上，你聘请这些人正是因为你在这个方面技不如人。所以，你怎么能就工作问题挑他们的毛病呢？</p>
<p>为了防止这几种情况发生，你应该审慎思考，拿出适当的应对策略来防患于未然。</p>
<p>首先，要求他们顺应公司的企业文化。他们来自不同的公司，拥有不同的企业文化，而且有些企业文化的确比你公司的更胜一筹。但要记住，现在他们是在你的公司就职，那就必须接受你这里的文化，适应你这里的办事风格。在这个问题上，不要因为对方资格老而轻易让步。坚持你的原则，推行你的企业文化。假如你希望能将一些新鲜元素融入进来，那也无妨，但一定要明确立场，不要左右摇摆。另外，你要避免他们为争权夺利而使诡计，一旦发现，绝不姑息。</p>
<p>其次，制定一个清晰明确的高标准工作要求，这也许是最关键的一点。要想拥有一家世界一流的公司，你要先确保自己的员工出类拔萃——不管是新人，还是老将。不能只满足于对方比你更胜任这份工作，因为你聘用他们就是为了让他们做你不擅长的事。</p>
<p>所以，不要因为你在某项业务上缺乏经验就降低对他们的工作要求。我曾见到过不少年纪轻轻的CEO，他们会因为在公司创立时媒体发布的几个正面报道而喜出望外，认为自己公司的营销和公关能力相当了得。这个标准太低了。随便哪个人都能找个记者为一家粉墨登场的新公司写点溢美之词装点门面。只有那些世界一流的公关人员才知道如何打理有瑕疵的公司。他们善于化腐朽为神奇，能变废为宝。这离不开他们精心创建的合作关系、过硬的专业知识，以及坚定的信心。</p>
<p>为确保高标准，你可以在选拔人员时面试那些已经在某个领域小有名气的应聘者，听听他们是怎么要求自己的，然后加以借鉴。一旦定下一个可能实现的高标准，就要要求主管们按这个标准做，而不必操心他们如何达到这个标准。至于如何创出一个响当当的品牌，如何拿下一单举足轻重的业务，如何实现一个不可思议的销售目标——这都不是你的工作，而是他们的，你出钱聘请他们就是为了让他们帮助你完成这些任务。</p>
<p>最后一条，他们不仅要完成任务，还要善于与人合作，成为团队的一分子。比尔·坎贝尔提出了一套极佳的四分检验法，这种方法可从4个方面科学合理地衡量主管们是否出色地完成了工作。</p>
<p>1.参照标准检验结果。一旦设定了高标准，你只需参照标准来检验主管们的工作成效。</p>
<p>2.管理能力。即便该主管出色地完成了岗位目标，他也未必能带出一支实力雄厚的富有凝聚力的团队。所以，就算他能完成任务，对其管理能力的考查也必不可少。</p>
<p>3.创新能力。主管们极有可能为实现眼前目标而放弃长远打算。例如，为了能漂漂亮亮地按时完成任务，技术经理可能会勉强推出一套卖点十足的软件，但这套软件却不支持更新。所以，你必须要像肉制品加工厂的老板一样，深入一线，亲自看看产品的制作过程。</p>
<p>4.合作能力。合作也许是形势所需，而非心甘情愿。但是作为主管，你必须要善于沟通，能有效地与其他人协调。因此，也要从这个层面对他们进行评估。</p>
<p>嗨，老兄，你出卖了自己</p>
<p>初次雇用一个身经百战的资深员工会让你觉得好像把自己给卖了。要是你疏忽大意，那最后很可能连全部家当都得拱手奉上。但是，要想为一穷二白的公司添砖加瓦，你必须承担这个风险，而且必须在分秒必争的市场竞争中取得胜利。资深人士出类拔萃的才干、广博深厚的知识、久经沙场的阅历都是你需要的，即便你为此不得不应付他们带给你的种种难题。</p>
<p>“一对一”沟通</p>
<p>在我初次提出“一对一”式的沟通方法之后，大家的反应相当强烈。约有一半的回复者对此横加批判，认为“一对一”这种方法毫无效果。另外一半人则很想知道如何有效地采用“一对一”方法。在我看来，这两类人的观点就像是硬币的两面。</p>
<p>对CEO而言，首要的管理责任莫过于为公司搭建信息交流网络。这个网络可以涵盖组织设计、会议、流程、电子邮件、意见箱，甚至是与员工或经理之间的“一对一”的会面。缺少了这样的网络，信息和观点就会传输不畅，导致公司运营受阻。尽管这个网络中完全可以不包括“一对一”式的会面，但在多数情况下，这种形式有助于让信息和观点自下而上地传递至高层，所以你不该把它排除在外。</p>
<p>一般说来，那些不喜欢“一对一”的人往往被这种方法伤得不轻。要想让这种交流形式真正发挥作用，一定要明白一点：这是以员工为中心的会谈，不是以上司为中心。它不拘于形式，目的是解决迫在眉睫的问题、交流精彩绝伦的想法，或者倾诉郁结已久的焦虑。这些话题往往不适合通过工作报告、电子邮件或是其他非私人化的途径开展。</p>
<p>如果你是员工，心中已有一个创意雏形，只是你还不太确定其是否有价值，你该以什么形式获得上司的反馈意见而又不至于显得太唐突？假如你在职业发展道路上遭遇难以与之合作的绊脚石，你对他恨之入骨但又必须得保持理智，你会怎样发泄？假如你热爱这份工作但个人生活每况愈下，你又会如何寻求帮助？写工作报告，发电子邮件，给意见箱留言，还是做瑜伽？在这种时候，最合适的解决途径莫过于“一对一”式的会谈。</p>
<p>假如上司喜欢条理井然的工作安排，那就让员工决定会面的时间。最好让他们把时间提前告知你，以便给他们留出回旋的余地，可以在问题不太迫切的情况下取消会见。这样做还能让员工明确感受到这是以他为中心的会面，一切都由他决定。会谈时，上司要少说多听。现在，好多公司的“一对一”会谈往往是上司说得多，听得少，刚好颠倒了。</p>
<p>上司不负责安排会晤时间和发表长篇大论，但是有必要引导员工表达他的核心观点。这一点在面对那些性格内向的员工时显得尤为重要。如果你是个理工科出身的主管，那就需要在给员工做思想工作时掌握一些对话技巧了。</p>
<p>以下是我认为在“一对一”会谈中有助于引导对方表达想法的一些话题：</p>
<p>•如果我们还有进步的空间，那你认为该从哪方面着手？</p>
<p>•你所在部门的最大问题是什么？为什么？</p>
<p>•在这里的工作中，哪一点令你感到不愉快？</p>
<p>•公司里谁最优秀？你最佩服谁？</p>
<p>•假如你是我，你会做何调整？</p>
<p>•你这个产品的哪个方面不尽如人意？</p>
<p>•你觉得我们错失的最大机遇是什么？</p>
<p>•哪些是我们该做而没有做的？</p>
<p>•你对这里的工作满意吗？</p>
<p>很多精彩的观点、棘手的状况，以及员工生活中迫在眉睫的问题，都会通过“一对一”这种交流形式传达到能够解决它们的人那里，这是它存在的最大价值。“一对一”交流方式历经时间考验，屡试不爽，但如果你还有更好的办法，但用无妨。</p>
<p>打造企业文化</p>
<p>要问什么是企业文化，企业文化的意义是什么，10个CEO会给出10种不同的答案。他们会说，企业文化就是如何设计公司，如何剔除你不需要的员工，它是一种价值观，必须有趣，强调团结的力量，是帮你寻觅到志同道合的人才的好帮手，有人甚至认为，它是一种对某种东西的狂热信仰。</p>
<p>那么，企业文化究竟是什么？它重要吗？如果重要，那你该花多少精力在它身上？</p>
<p>让我们先来讨论第二个问题及其重要性。对新创业的科技公司而言，当务之急是研发产品。这个产品的功能至少要比现有市场上的同类产品强10倍。如果只是略胜一筹，那就不足以吸引大批的用户立即使用你的产品。在此基础之上，抓紧时间抢占市场。你的公司能研制出功能强大的新产品，别的公司也可以。因此，你得抢在别人前头占有市场。说实话，很少有哪家公司的新产品能做到独占鳌头，所以，赶在竞争对手前面占有新的市场份额就成为关键。</p>
<p>如果你既没有过硬的产品，又没能抢占市场，你就不应将其完全归咎于企业文化。全世界有着一流企业文化但最终以失败而告终的公司有很多，这说明仅凭文化成就不了企业。</p>
<p>既然如此，为什么还要苦心营造企业文化呢？原因有三：</p>
<p>1.它的存在有助于你实现上述两个目标。</p>
<p>2.在公司的发展进程中，它能帮你弘扬公司的核心价值观，使你的公司成为更理想的工作场所，成为更有前景的企业。</p>
<p>3.最后一条，也许是最重要的一条，凭借充满人文关怀的企业文化，你和你的下属会心甘情愿地为公司的发展奉献自己的心血与汗水。</p>
<p>打造企业文化</p>
<p>我所谓的企业文化，并不是指企业的价值标准或者员工的满意度这类重大话题。准确地说，我这里要讨论的企业文化是关于如何设计一种工作方式，使企业实现以下目标：</p>
<p>•让你的公司独树一帜。</p>
<p>•保证重要的生产标准得以贯彻，如“让顾客满意”或者“让产品出众”。</p>
<p>•帮助你挑选那些有助于你实现目标的员工。</p>
<p>企业文化的内涵涉及领域庞杂，但我重点要说的就是以上这几条。</p>
<p>推广你的企业文化时，请记住一点，人们日后所说的这套由你打造的企业文化，其实是一套逐步发展完善的文化，其中的大部分内容都是你和其他员工从经年累月的工作中提炼出来的精华。因此，你会希望将关注点聚焦在这为数不多的几个方面，希望通过它们影响一大批人将来的行为方式。</p>
<p>吉姆·柯林斯在其畅销书《基业长青》中指出，那些久经沙场屹立不倒的公司有一个共性，那就是“狂热信仰”。对此说法，我颇有些迷惑，难道怪诞的企业文化加上狂热的追随者就一定能让你的公司鹤立鸡群？</p>
<p>这有一定的道理，但又不完全准确。在实际情况中，那些架构合理的企业文化往往让人事后想起来感觉有些疯狂，在这一点上，柯林斯是对的。但这种疯狂并不是企业文化打造者的初衷。你完全没必要煞费苦心地让自己的公司变成别人眼中的怪胎，你只需要通过强大的企业文化来改变大家的工作状态。</p>
<p>最理想的做法是从细枝末节入手。这些细节要足够小，能够身体力行，又要足够重要，能够影响人们今后的行为模式。在实践时，要做到一鸣惊人。如果你提出的要求能够一石激起千层浪，那就一定会改变人们的行为方式。《教父》中就曾有这样一个场景，教父请一位好莱坞大导演给自己的朋友安排一份工作，对方没搭理他，于是，一个血淋淋的马头出现在了这个导演的床上，随后，这个人的就业问题立马得到解决。所以说，出奇招方能制胜。</p>
<p>下面我来讲三个故事。</p>
<p>以门当桌。很早以前，亚马逊网站的创始人兼CEO杰夫·贝佐斯曾设想办一家公司，这家公司不再从顾客身上获利，而是把利益带给顾客。为了实现这个梦想，他打算在远期成为行业内的价格领导者和客户服务领导者。要想实现这个目标，大手大脚可不行。杰夫本来要花大量的精力来审核每一笔开支，对超出预算的人大加斥责。但他没有。他倡导大家节俭，推行节俭的企业文化。他的做法相当简单：公司的所有桌子都要利用从“家得宝”购进的廉价门板，自己用钉子钉上桌腿。这些用门板改装的桌子既不符合人体工程学，又配不上亚马逊公司上千亿美元市值的身价。当时，一个新人觉得这种做法不可思议，问老板为什么非得在这样一个用零部件凑成的桌子上干活时，杰夫的回答斩钉截铁：“我们尽一切可能节约开支，就是为了以最低的价格为客户提供最好的产品。”如果你不喜欢在门板上工作，那在亚马逊肯定待不长。</p>
<p>1分钟10美元。当初创办安德森·霍洛维茨风险投资公司时，马克和我的想法是视企业家为上帝。我们现在还记得创办公司时内心的那番煎熬。当时，我们希望公司上下明确这样一个事实：我们是初出茅庐的小公司，而企业家则是资本大鳄，万事皆应以他们为中心。在我们看来，视他们为上帝的第一条原则就是守时。就算我们在处理更重要的业务，也不能因此让他们在大厅里等半个小时。我们希望自己的员工守时、敬业、专注。遗憾的是，任何在职场上打拼过的人都知道，这一条要求说起来容易做起来难。为了给员工敲响警钟，我们定下了一个无情的规定：会见企业家时，迟到1分钟，罚款10美元。假如你因为接一个重要的电话晚到了10分钟，对不起，请准备100美元的罚金。后来，每当有新员工对这个规定表现出不解时，我们都会好好解释一下为什么要视企业家为上帝。如果在你的心目中，企业家不及风投资本家重要，请恕本公司不能留你。</p>
<p>快速行动，打破常规。马克·扎克伯格推崇创新，他认为创新就是险中求胜。因此，在初创Facebook的那段时期，扎克伯格倡导的企业文化是：快速行动，打破常规。难道他真的想要让大家搞破坏吗？不，他是在告诉人们该怎样考虑问题。这条让人匪夷所思的要求迫使大家停下来开始思考。在思考时，他们发现，在快速击破某个现有框架时，往往会产生出人预料的创新。“我应该做出这样的尝试吗？新想法可能很炫，但短期内会存在一定问题。”面对这样的顾虑，大家可能会仁者见仁，智者见智。但是，如果你认为万无一失比开拓创新更重要，那么你就不是Facebook所需要的人才。</p>
<p>在为你的公司设计出足够完善的企业文化之前，你得首先保证它与你的价值标准相一致。比如说，杰克·多西绝不会在他的Square公司拿门板当桌子，因为在那里，节俭不是重点，优美的设计才是王道。走进Square，你将体会到他们对设计的重视程度究竟有多高。</p>
<p>为什么带小狗上班或在上班时做瑜伽不算是文化？</p>
<p>如今，许多新入行的公司为了在企业文化上独树一帜，往往是八仙过海各显神通。有些公司的做法很出色，有些公司的做法很新奇，还有一些公司的做法相当怪诞，但是，它们大部分都没能成功地界定其企业文化。没错，对于瑜伽爱好者来说，能在公司做瑜伽当然好，而且也有助于通过这一运动提高团队的凝聚力。然而，这并不属于企业文化，因为它没有建立一种核心价值观来推动公司的发展，使公司在业界的地位坚如磐石。就你的企业发展目标而言，瑜伽毫无裨益，它只是一份加餐。</p>
<p>允许员工带比特犬来上班的做法也足够吸引人的眼球。热爱动物的人士历来受欢迎，而且也能体现出公司对员工的宽厚包容，所以说，这种做法具备一定的社会价值。但是，它无益于公司的发展。聪明的老板都爱惜员工，给点儿额外优待没什么关系，但这些优惠与企业文化无关。</p>
<p>小结</p>
<p>在后面的章节中，我将阐明：CEO的工作就是明确奋斗目标，然后让全公司齐心协力地朝着这个目标前进。推行适宜的企业文化有助于你在一些重要的领域取得长足的进展。</p>
<p>控制公司规模的诀窍</p>
<p>要想打造重量级的公司，你就得学会适时控制公司规模。新起步的创业者总会惊叹于谷歌和Facebook这样的公司，当年凭借屈指可数的几个元老，创下如今这番基业。今天，谷歌的员工人数已达两万，而Facebook的员工人数也超过了1 500人。所以，如果你也想成就这样的事业，那就有必要掌握规模控制的诀窍。</p>
<p>关于这个问题，董事会一般会建议CEO做如下两个选择：</p>
<p>1.聘请顾问。</p>
<p>2.聘请具备规模控制相关经验的资深高管。</p>
<p>这两条建议固然可用，但都存在极大的局限性。首先，如果你对机构的规模控制毫无概念，那就很难衡量哪些人胜任这份工作。假如你在编程方面的经验值为零，那你如何能断定谁才是编程高手？其次，许多董事会成员对于规模控制一无所知，所以很容易被有经验却没有技巧的人糊弄。如果你曾就职于一家大型公司，你一定见识过那些经验丰富却不善于运用经验的人。</p>
<p>要想寻找到最好的顾问和最有经验的高管，你首先得了解规模控制的基础知识，然后才能把相关策略融入你的管理，并根据实际情况做出决策。</p>
<p>基本观点：以退为进</p>
<p>随着公司规模的扩大，那些曾经轻而易举的事情开始变得困难重重。具体来说，在公司创业初期不曾令你头疼的问题现在变成了大麻烦，它们包括：</p>
<p>•沟通</p>
<p>•常识</p>
<p>•决策</p>
<p>为了清楚地解释这一问题，我们先来说说职责划分。公司只有一名员工时，编程、测试都由他负责，而且他还得统管销售和推广，自己给自己当老板。他必须是个全才，所有决策都由自己说了算，不用和什么人沟通，完全是独立王国。但是随着公司规模的扩大，各个方面的麻烦就会接踵而至。</p>
<p>可话又说回来，假如公司规模不扩大，那就永远也成不了气候。所以，最大的挑战就是如何尽可能地降低因公司规模的快速扩大而导致的负面影响。</p>
<p>在这个问题上，我们可以拿美式橄榄球来打个比方。比赛中，进攻前锋主要负责保护四分位队员，不让他与防守前锋发生接触。如果进攻前锋寸土不让，那么防守队员会很轻松地绕过他，从而对四分位发起进攻。因此，进攻前锋必须先向后撤，使防守前锋能够向前推进，当然，每次只能退让一小步。</p>
<p>在控制机构的人员规模时，你同样应该以退为进。专业分工、机构设置、工作流程等问题都会日益复杂，这会让你感到自己越来越难以用常规经验来解决问题，也越来越难与其他人进行有效的沟通。这很像橄榄球比赛中进攻前锋的后退。你会因此失掉一部分阵营，却可以防止整个公司陷入混乱。</p>
<p>如何做？</p>
<p>当你感觉公司的人手已经不足以应付眼前的工作时，那就意味着防守前锋已经逼近，无论你有多不情愿，都得准备做出让步了。</p>
<p>专业分工</p>
<p>首先要采取的对策是实行专业分工。在新公司，每个人最初都是无所不能的全才。工程师能编程，能管理软件构建系统，能测试产品，渐渐地还能使用并操作这个产品。在初期，这种状态并无大碍，因为公司的所有情况大家都一清二楚，沟通的必要性也就降到了最低。由于各项工作并不是由专人分管，因此也就不存在烦琐的工作交接。但是随着公司的发展，业务复杂指数急剧攀升，你会发现很难再找到能身兼数职的新员工。及时引入新鲜力量便成为你的中心任务。这时，你就得考虑进行专业分工了。</p>
<p>通过分派不同的人员与团队去负责软件版本环境、测试环境和操作过程等任务，工作的复杂程度将会增加，比如部门之间的资料交接、可能引发争议的工作安排、对专业知识而非一般常识的更高要求等。为了缓解这些问题，你还需要从组织设计和工作流程两个方面来寻找对策。</p>
<p>组织设计</p>
<p>组织设计的头条法则是：理想的组织设计根本不存在。无论你怎么做，总是会在实现某些部门之间最优化沟通的同时，牺牲另外一些部门的利益。假如将产品管理部划拨给技术部，那二者之间的沟通就会增加，但产品管理部与市场营销部之间的沟通则会减少。因此，只要你打算划拨出一个新的部门，你就一定会招来某些人的不满。</p>
<p>然而，臃肿的机构到了一定时候总会因欠缺动力而运转不畅，所以你必须对其加以分解。从根本上讲，你得考虑设置一些分工明确的小组，比如说质量评估小组。采取这样的细分之后，工作的复杂性也将随之上升。客户软件项目组和服务软件项目组是各带一班人马，还是按需要由你统一安排？公司的规模壮大后，你还得明确在未来的发展思路中，究竟是以职能为中心（建立单个的销售部、推广部、产品管理部、技术部等），还是以使命为中心，成立功能齐全的独立的业务部门？</p>
<p>你的选择应该是两害相权取其轻。组织设计就像是搭建互通信息的交流网络。想让人们交流想法，最好的办法是把他们交给同一个上司，让他们待在同一个部门。相反，如果在工作中彼此不打交道，那么相互交流的机会也就会减少。组织设计就好像是构建了一个网络，这个网络决定着公司与外部世界打交道的方式。例如，你为了让销售人员更全面地了解产品，可能会安排他们分别与不同的产品研发小组进行深入沟通。要是你真的这样做了，你牺牲的可能是顾客的利益。顾客将不得不为了购买不同的产品而忙于应付不同的销售人员。</p>
<p>鉴于这一点，你在进行组织设计时需要遵循以下几个基本步骤：</p>
<p>1.明确要交流的信息。首先列举出最重要的信息，以及哪些人需要了解这些信息。例如，涉及产品结构的信息，技术部、质量评估部、产品管理部、推广部和销售部的人员都有必要掌握。</p>
<p>2.明确要决定的内容。考虑一下，哪些方面经常需要你做出决策？比如，产品功能的筛选、软件结构的取舍，以及技术支持的获取。你不能只安排公司里某个部门的负责人来为所有问题做出决策。</p>
<p>3.明确你的侧重点。产品部经理应该更了解产品结构还是更了解市场？技术人员应该更懂顾客还是更懂产品结构？工作中的侧重点会因时而变，所以也要根据当下的具体情况重新调整思路。</p>
<p>4.明确小组中谁说了算。请注意，这是第4个步骤，而不是第一个。组织设计应该最大限度地服务于做工作的人，而不是服务于主管们。将管理人员的个人野心凌驾于基层员工的利益之上，阻碍基层员工的信息交流，这是很多组织设计失败的根源。这一条被放在第4个步骤可能会让主管们不太高兴，但他们会克服的。</p>
<p>5.明确哪些方面你尚未完善。这一步与选择最优化沟通方式同样重要。有些问题不是你工作的重点，但这并不意味着它们不重要。如果你对其视而不见，日后一定会深受其扰。</p>
<p>6.制订预案以应对那些你尚未完善的问题。一旦明确那些你尚未完善的问题，你就要知道该如何防范，并制订预案以减少这些问题对公司上下可能带来的威胁。</p>
<p>以上6个步骤会让你的公司走得更远。在考虑下一步的组织设计时，我们还有必要权衡各方面利弊，例如，速度重要还是成本重要？如何推行机构改革？多久进行一次机构重组？</p>
<p>工作流程</p>
<p>工作流程的意义就是保障信息的畅通。如果公司里只有5名员工，工作流程就不是必需品，因为你们可以面对面地直接交流。你对下一个环节十分清楚，可以准确无误地交接任务，把重要信息传达给其他人，既能保证高质量地完成工作，又可以摆脱繁文缛节的束缚。但如果你拥有的是一家大公司，员工多达4 000人，那么信息的传递就不再是件轻松的事。一对一、点对点的交流将难以继续，你需要的是一条更加强大的信息运输专线，借用我们在描述人际交流专线时的常用词汇，便是“工作流程”。</p>
<p>工作流程就像一辆装备精良的通信车。它既包括精密的六西格玛流程，又包括精心安排的常规会议。流程可以向上、向下扩展或缩小，其规模取决于有待解决的问题的复杂程度。</p>
<p>在涉及公司跨部门的沟通问题时，工作流程可以确保员工之间的沟通得以开展并且顺畅进行。假如你想了解所在公司的初级工作流程，可以参考招聘过程。招聘通常涉及跨部门的合作（招聘小组、人力资源部——或者任何负责招募新人的部门、后勤保障部等），面对的是公司以外的人员（候选者），是决定公司成败的一个至关重要的工作流程。</p>
<p>流程该由哪些人来设计？当然是那些先前以点对点方式从事过相关工作的人。他们清楚该沟通些什么，知道该同谁去沟通。所以，他们是最佳人选。依靠他们，现有流程可以得到规范和完善，并具备可扩展性。</p>
<p>该在什么时候开启流程？尽管这个问题应当视具体情况而定，但是请记住一点：让新人适应老一套工作流程远比让老人接受新一套工作流程更容易。所以，将你目前的工作流程尽早加以规范，让新员工去适应它。</p>
<p>关于工作流程设计的文章和书籍汗牛充栋，在此我不一一重复。安迪·格鲁夫在《格鲁夫给经理人的第一课》中提出了一些观点，我认为非常有帮助。以下几条建议对于新公司来说尤为重要：</p>
<p>•把“产出”放在第一位。你首先应该考虑这个流程能带来什么样的结果。招聘流程能为公司带来出色的员工。如果把这设定为目标，那么，什么样的流程才能帮你实现这个目标？</p>
<p>•明确以何种方式衡量你是否实现了各个阶段的目标。是否找到了足够多的候选人？这些候选人是否合适？你的招聘流程能否为这个岗位招到合适的人员？如果你选择了某个候选者，他是否会接受这份工作？如果他接受了这份工作，是否能够做好？如果做得好，他是否会继续留下来为你效力？——你对以上这些问题的衡量标准是什么？</p>
<p>•引入问责制。哪个部门的哪个人为此环节负责？如何才能更好地了解他们的工作表现？</p>
<p>小结</p>
<p>设计公司的架构与设计产品的框架之间不无相似之处。规模各异的公司对于结构的要求也会有所差别。如果调整结构过早，公司会来不及适应；如果调整不及时，公司又有可能因不堪重负而垮掉。所以，你要对公司的增长速度做到心中有数，在扩大规模时慎之又慎。发展固然是好事，但操之过急就会适得其反。</p>
<p>能力预期谬论</p>
<p>有一回，我和两个朋友聊天，他们中一个是风险投资家，另一个是CEO。我们谈到了这个CEO手下的一位主管。他觉得这名主管表现优异，但是在更大规模的管理中缺乏经验。我的风险投资家朋友善意地提醒这名CEO，该认真考虑一下这个主管是否能胜任公司未来的发展需求。我当即粗暴地大声说道：“无稽之谈！”这让二人大吃一惊。一般情况下，我的自控力还不错，不会口不择言，心里想什么嘴上就说什么。为什么当时会如此激动？以下是我的解答。</p>
<p>你必须时常对手下管理人员的工作表现进行评估，这是你身为CEO的分内之事。但是，拿公司未来的发展规模作为标准来衡量他们现在的表现，毫无凭据地妄加评判，这只会适得其反。原因如下：</p>
<p>•在一定程度上，管理能力是后天掌握的一种技能，而不是先天具备的禀赋。没有人一生下来就能管理一家上千人的公司，经验都是在一定阶段通过学习而获得的。</p>
<p>•不能提前下结论。你如何能预知某个主管是否能胜任未来的工作？你如何知道比尔·盖茨当年从哈佛辍学时就已经知道把控企业的规模？你是凭什么得出这个结论的？</p>
<p>•提前下结论会阻碍别人的发展。如果你断定某个人将无法胜任更复杂的管理工作，那给他们传授管理经验或者指出他们可能存在的不足还有没有意义？也许毫无意义，因为你已经判定他们技不如人。</p>
<p>•切勿操之过急换主管。这世上没有所向披靡、战无不胜的主管，只有在特定时刻特定环境下取得成功的主管。马克·扎克伯格为Facebook创下了奇迹，却不可能成功地领导甲骨文公司。同样，拉里·埃里森在甲骨文公司功勋显赫，却不适合管理Facebook。如果你拿将来的发展规模来衡量现在的管理队伍，操之过急地更换人员，聘请了高级别人才，那他们可能无法胜任眼前的工作，而眼前的工作才是最迫切需要应对的。所以，这样做的后果是得不偿失。</p>
<p>•你必须等公司发展到更大规模时再做决断。即使你没有换掉主管，也没有阻碍现有主管的职业发展，你都不该为时过早地下结论。无论你当初对他曾有过什么样的看法，你都得记住：时移事易，当公司真的发展到更大规模时，你再用充分的依据来考量他也为时不晚。</p>
<p>•腹背受敌的日子不好过。有人为你的公司鞍前马后，忠心耿耿，立下了赫赫战功，而你却因为微不足道的几条理由决定放弃他，这样的做法只会让你腹背受敌。你将深陷信息的盲区，被欺瞒和假意所包围。那将是一个被偏见主导的局面，不再有善意的提醒，只剩下盲目的判断。那将是一个内部战火频发的境地，千万别让自己陷进去。</p>
<p>如果不能预先评判人们能否胜任将来的工作，那该怎么做？建议你至少每个季度开展一次针对管理人员的全方位评估。为避免做出错误的能力预期判断，你需要注意两个关键点：</p>
<p>1.要结合当前的公司规模来进行评估。你需要从评估中了解该主管是否能胜任现有的工作，而不是其以后的表现。要全面宏观地去进行评估，不要排除当前规模这个因素，以免做出不明智的判断。</p>
<p>2.做判断时要基于相对尺度而非绝对尺度。纠结于“这个主管够不够优秀”这样的问题只会让你无所适从。更科学的问法是：在公司发展的特定时期，我是否还能找到一个更好的主管？如果有这样一个人选，却被我最大的竞争对手招入旗下，那会对我们之间的胜负之战产生多大的影响？</p>
<p>总之，进行能力预期判断既有失公允，又缺乏依据，对公司的管理有百害而无一利。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第六章　关注眼前的麻烦</p>
<p>这他妈的不是咱黑人的做派，如果你是真正的黑人，那就和我对着干。<br>——美国说唱歌手特立尼达·詹姆斯《所有美好的一切》<br>在Opsware举办的一次公司例会上，有人提出一个困扰他很久的问题。“公司里的脏话太多，这让大家很不舒服。”]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业维艰5]]></title>
    <link href="http://yoursite.com/2016/03/03/read/%E5%88%9B%E4%B8%9A%E7%BB%B4%E8%89%B0/"/>
    <id>http://yoursite.com/2016/03/03/read/创业维艰/</id>
    <published>2016-03-03T11:25:49.000Z</published>
    <updated>2016-03-03T11:25:49.000Z</updated>
    <content type="html"><![CDATA[<p>第五章　依次管理好人、产品和利润</p>
<p>我和最强悍的黑人哥们一起打拼，和最聪明的黑人哥们一起赚钱，<br>没时间听你们这些该死的黑人艺术家聒噪。<br>你最好闭嘴，把我惹急了可不是闹着玩儿的。<br>你们个个都是军中的公子少爷，只有我是黑人中士。<br>——美国说唱歌手杰西昂·特雷尔·泰勒《朝他们尖叫》<br>一旦我们把Opsware公司的股票价格推回到1美元以上，接下来，我们就要重组管理团队。我们有云计算服务管理团队，但现在我们是软件公司，需要软件管理团队。在企业型软件公司里，最重要的两个职位往往是销售主管和技术主管。一开始，我试着将Loudcloud公司负责专业服务的主管抽调出来担任销售主管，但效果并不好。于是，我打算另请高明。</p>
<p>为了更好地准备这次招聘，我决定在此期间亲自主管销售。我管理团队，召开销售预测会议，而且还独自负责Opsware的营收数据。历经艰辛后我才懂得，招聘主管时应该像科林·鲍威尔所指出的：重点看应聘者的能力，而不是看其是否毫无缺点。通过管理销售业务，我对公司究竟需要什么样的人才有了非常清晰的认识。我列了一份清单，开始着手为Opsware公司寻找具有适当技能和才干的销售主管。</p>
<p>面试了大概20多个人之后——其中没有一个人具备我所需要的那些能力——马克·克兰尼来到了我的面前。他并不是我期待中的人选，和人们脑海中销售主管干练、强硬的形象也相去甚远。首先，克兰尼身高中等，而大多数销售主管都身材高大。其次，他体型略方，身宽和身高几乎一样，但不是很胖。他这种身材根本穿不了现成的西服，只能穿量身定做的，即便这样，他穿着也显得有些别扭。</p>
<p>我看他的简历，最先引起我注意的是，他毕业于南犹他大学，而我从来没听说过这所大学。我们问他这是所什么样的学校，他回答说：“相当于犹他州南部的麻省理工学院。”这是他讲过的唯一一个笑话。克兰尼极其严肃，严肃得似乎连他自己都感觉浑身不自在，弄得我也十分难受。要是往常，这么令人难受的气氛会让我直接放弃这位面试者，但克兰尼所具有的那些能力正是我所需要的，对我们公司也至关重要，因此我愿意忽视他身上的所有缺点。我曾经认为，区分应聘者是否合格的一个面试技巧是，问一系列关于招聘、培训和管理销售代表的问题。这种提问一般是这样进行的：</p>
<p>本：你认为销售代表最重要的素质是什么？<br>应聘者：聪明、有进取心和竞争意识，知道如何处理复杂的交易，懂得如何管理团队。<br>本：在面试中，怎样才能测出他们是否具有这些素质呢？<br>应聘者：呃，我从自己认识的人当中选聘。<br>本：好吧，那你聘用他们以后，希望他们怎么做呢？<br>应聘者：我希望他们明白并遵守销售流程，充分了解产品，能准确做出销售预测……<br>本：请讲一下你以前为此设计的培训项目。<br>应聘者：呃……<br>紧接着，他们就会天花乱坠地胡编乱造起来。</p>
<p>克兰尼的简历和面试回答都让人无可挑剔，我接着问他有关销售人员培训的问题。我永远忘不了当时他脸上痛苦的表情，看起来好像要立即起身离开一样。这让我很吃惊，因为他此前的表现堪称完美。后来我才意识到，我让克兰尼讲述如何培训销售代表就像一个外行人让牛顿去解释物理定律一样可笑。怎么开场好呢？</p>
<p>经过了大约5分钟的沉默之后，克兰尼从自己包里拿出他以前设计的一份厚厚的培训手册。他说，他不可能在剩下的时间里解释清楚我想了解的销售人员培训方案，但如果我能再安排一次会面，他会详细解释将普通销售人员训练成销售精英的具体细节，这些销售精英熟知产品加工、产品销售的一整套销售流程。他还说，即使这些条件全部具备，一名成功的销售主管还必须能激发出团队的勇气。他的语气很像巴顿将军，我知道我找对了人。</p>
<p>不幸的是，其他人并不了解这一情况。各部门主管（有一个例外）和董事会成员都反对让马克·克兰尼出任销售主管。我问比尔·坎贝尔的看法，他说：“我可不会用卧轨自杀的方式阻止你聘用克兰尼。”显然，他并不赞成。大家反对克兰尼并非因为他能力不足，而是因为他身上缺点太多：毕业于名不见经传的南犹他大学，长得也不像一名销售主管。</p>
<p>然而，和他接触的时间越长，我就越认定他是我们销售主管的不二人选。在和他交谈的最初一小时之内，我学到的有关销售的知识比我6个月来亲自主管销售所学到的知识还要多。他甚至打电话给我讲解我们销售团队正在奋力争取的一些交易的细节，而这些交易，我自己的销售代表们似乎毫不知情，就好像他有个销售联邦调查局一样。</p>
<p>我决定表明立场。我告诉整个团队和董事会，我明白他们的担忧，但我还是想聘用克兰尼，接下来，我打算核查一下他的推荐信。</p>
<p>我向克兰尼要推荐信时，他再次令我大吃一惊。他拿出一份清单，上面列出了75封推荐信。他说如果需要，他还可以列出更多。我照着清单给每个推荐人打电话，所有推荐人都在一小时内给我做了回复。克兰尼的人际关系网很紧密，这些推荐人没准儿就是他销售联邦调查局的密探。就在我准备聘用克兰尼时，团队中的一名主管打电话说他的一个朋友认识克兰尼，想跟我谈谈克兰尼的问题。</p>
<p>我给他的那个名叫乔的朋友打电话，继而就听到了我职业生涯中最不同寻常的一次推荐：</p>
<p>本：非常感谢您主动联系我们。<br>乔：不客气。<br>本：您是怎么认识克兰尼的？<br>乔：我在以前的雇主那里做销售培训时，克兰尼是那里的一名区域主管。我想告诉你的是，无论如何都不要聘用克兰尼。<br>本：哦，语气这么肯定，难道他是罪犯吗？<br>乔：不是，我从未见他干过任何违反道德的事。<br>本：他在招聘方面能力很差吗？<br>乔：不，他给公司招进了一些最优秀的销售人员。<br>本：他能做大交易吗？<br>乔：当然能，我们以前有好几笔大交易都是他做的。<br>本：他不是个合格的管理者？<br>乔：不，他管理团队非常有效。<br>本：好吧，那我为什么不录用他呢？<br>乔：他的文化适应性很差。<br>本：能解释一下吗？<br>乔：可以。我在参数技术公司（PTC）给新来的销售人员做培训时，曾请克兰尼做演讲嘉宾以鼓舞士气。我们的新人有50名，我已经点燃了他们对销售的激情，他们个个摩拳擦掌，准备在公司大显身手。克兰尼走上讲台，看着这群新面孔，说道：“我不管你们多么训练有素，如果你们一个季度完不成50万美元的销售目标，我就一枪打爆你们的头。”<br>本：非常感谢。<br>和平时期的世界和你每天必须为生活苦苦挣扎时的世界完全不同。和平时期，人们有时间关注言行是否得体、长远的文化影响以及人们的情感这类问题。而在你为生活苦苦挣扎的时期，最重要的是奋勇杀敌，带领自己的队伍安全抵达目的地。我正处于这种状态中，需要一名作战的将军。我需要马克·克兰尼。</p>
<p>招聘的最后一步是我向马克·安德森进行汇报。作为公司创建者和董事会主席，马克·安德森的意见对董事会影响极大，可惜他对克兰尼的感觉依然不太好。马克·安德森非常信任我，无论他本人对应聘者是否喜欢，他都会让我自己决定招聘人选，但是对我来说，他的认可很重要。</p>
<p>我让马克·安德森先说，因为尽管他一直是这个办公室里甚至全世界最聪明的人，他自己却非常谦逊，从不相信人们夸他聪明的话，这一点令他很容易被人忽视。他开始列举克兰尼的缺点：长相和声音都不适合当一名销售主管，毕业学校名不见经传，令他感觉不舒服。认真听完之后，我回答说：“你说的每一条，我都同意。但是，克兰尼是一个销售专家，他的销售管理水平远远超过我所认识的每一个人。如果他身上没有你说的这些毛病，他也不会愿意加入我们这样的公司，说不定他会成为IBM的CEO呢！”</p>
<p>马克·安德森很快说：“明白了。就他了！”</p>
<p>从Loudcloud公司的废墟之中建立一支世界一流的软件团队是我迈出的关键一步。多年以来，我对克兰尼的了解越来越多，我在当年的面试中所学到的一切、在那些推荐信中所了解到的一切最后都得到了证明。克兰尼的文化适应性的确很弱，但他是个天才。我需要他的天赋才华。我不知道团队中的其他成员和克兰尼是否有过相处愉快的经历，但最终，他们一致认为，克兰尼是销售主管的最佳人选。</p>
<p>我之前的上司吉姆·巴克斯代尔很喜欢说这样一句话：“我们要依次管理好人、产品和利润。”话虽简单，但意义深远。三者之中，管理好人是最难的，管不好人，其他两项就无从谈起。管理好人意味着公司应该提供一个良好的工作环境，但事实上，大多数工作场所远远称不上良好。当组织规模扩大时，重要工作可能被人忽视，最勤奋的工人可能被最出色的政客所遮蔽，各类繁文缛节可能会扼杀创造力，让一切变得毫无乐趣。</p>
<p>当我们大难临头，从互联网泡沫到纳斯达克威胁要将公司除名，拯救我们的就是本章所介绍的各类技巧。如果你的公司为员工提供了一个良好的工作环境，你的公司也许就会长期屹立不倒，找到属于自己的荣耀。</p>
<p>知道我今天为什么来上班吗？好公司与烂公司的区别</p>
<p>在Opsware公司时，我给管理层上过一门培训课，因为我深信培训的作用。我明确告诉每一位管理者，他们要定期和员工进行一对一的会面，我甚至还告诉了他们具体的做法，以免有人找借口推辞。</p>
<p>一天，我高高兴兴地去上班，突然发现一名经理6个多月都没有和其员工进行过一对一的会面。虽然我懂得“没有调查就没有发言权”，但这一发现还是出乎我的意料。我投入了那么多时间思考管理问题、准备各类材料、亲自培训管理人员，可是有人居然对此无动于衷，这怎么可能？唉，CEO的权威也不过如此。如果管理层就是这么执行我的指令的话，我又何必不辞辛苦地工作呢？</p>
<p>我认为，只要我以身作则，就一定能让下属按我的要求行事。可谁知道，他们学的都是我的坏习惯，他们为什么不学我的优点呢？我的团队要垮掉了吗？我回想起多年前和父亲的一次对话，内容是关于当时波士顿凯尔特人队的篮球教练汤姆·海因索恩。海因索恩是当时世界上最成功的教练之一，曾获“年度最佳教练”的荣誉称号，并捧回两座NBA冠军奖杯。</p>
<p>然而，他很快就走了下坡路，他的球队现在是联盟中成绩最差的。我问父亲是怎么回事。父亲说：“因为球员们不再听他乱发脾气了。过去，海因索恩冲球员大吼大叫时，他们会有所回应。可现在，他们根本不吃他那一套。”我的团队现在不理我了吗？我曾对他们大吼大叫太多次了吗？</p>
<p>我突然想明白了——虽然我告诉了团队应该做什么，却一直没明确地告诉他们为什么要那么做。显然，仅凭我个人的权威并不足以让他们按我所说的去做。由于我们有大量的任务要完成，管理人员无法面面俱到，因此就给自己设立了一些优先处理的事项。很明显，这位经理认为，和自己的员工见面并没有那么重要，而我也没有向他解释过和自己的员工见面为什么如此重要。</p>
<p>那么，我为什么要求所有管理人员必须接受管理培训呢？为什么要让管理人员和其员工进行一对一的会面呢？多番思考之后，我找到了原因，我打电话给那位经理的顶头上司——史蒂夫，让他马上来见我。</p>
<p>史蒂夫来到我的办公室，我问他：“史蒂夫，知道我今天为什么来上班吗？”</p>
<p>史蒂夫：什么意思，本？<br>我：我为什么要挣扎着起床？为什么要辛苦来到公司？如果是为钱，我干吗不明天卖掉公司，卖的钱岂不是比我想的还要多？我并不图名。<br>史蒂夫：你的确如此。<br>我：那我为什么要来上班呢？<br>史蒂夫：我不知道。<br>我：好吧，听我说。我来上班是因为Opsware公司将会大有前途，这对我个人非常重要。员工们每天在这工作12~16个小时，他们醒着的大部分时间基本都是在这里度过的，我希望他们都能过上好的生活，这对我也非常重要。这就是我来上班的原因。<br>史蒂夫：明白了。<br>我：你知道工作环境的好坏之分吗？<br>史蒂夫：……知道。<br>我：是什么？<br>史蒂夫：嗯……<br>我：我告诉你吧。在工作环境好的公司，员工可以专心工作，相信只要工作出色，公司和他们个人都会受益。在这样的公司里工作才会有真正的快乐。每个人早上一睁开眼睛就知道自己所做的工作高效有用，会使公司和自己都发生改变。这会令他们在工作中既动力十足，又有满足感。<br>而在工作环境差的公司，人们会把大量时间都用在捍卫公司利益、阻止明争暗斗以及改进不完善的工作流程之上。他们甚至不清楚自己的职责是什么，因此也就不可能知道他们到底有没有完成工作。荒唐的是，即使他们用了令人难以置信的超长时间完成了工作，却完全不知道这对公司或他们自己的职业生涯有什么意义。更不幸的是，当他们终于鼓足勇气告诉管理者自己的境遇有多么糟糕时，那些管理者首先会否认问题的存在，接着为现状进行辩护，然后就将问题搁置一边。<br>史蒂夫：明白了。<br>我：你知道你的经理蒂姆在过去6个月里没有和任何员工进行一对一的会面吗？<br>史蒂夫：不知道。<br>我：现在你知道了，你有没有意识到，他这样做根本就不可能了解到他自己所领导的部门究竟是好是坏？<br>史蒂夫：没错。<br>我：总而言之，你和蒂姆现在令我无法实现我唯一的目标。因此，如果蒂姆在接下来的24小时以内不和他的每一位员工会面的话，我别无选择，只能解雇你们，听清楚了吗？<br>史蒂夫：听清楚了。<br>真的有必要这样做吗？</p>
<p>你也许认为，一家公司无论管理多么有方，如果其产品和市场需求不符，该公司肯定会失败。你也许会进一步认为，一家公司尽管管理得极其糟糕，但其产品符合市场需求，那该公司肯定会成功。这两种情况都对。那么，我真的有必要这样言辞激烈地威胁我的一名主管吗？</p>
<p>我认为有必要，原因有三点：</p>
<p>第一，一切顺利之时，成为一家好公司并不难，但遇到困难时，公司的好坏可能就是生与死的差别。</p>
<p>第二，事情并非总是一帆风顺。</p>
<p>第三，成为一家好公司本身就是一个目标。</p>
<p>生与死的差别</p>
<p>一切顺利之时，员工留在公司的原因有很多：</p>
<p>第一，职业道路宽广。随着公司的发展，大量有前景的工作会自然而然地涌现出来。</p>
<p>第二，朋友和家人都会认为，你是有先见之明的天才。因为你在该公司声名大振之前，就选择了在该公司工作。</p>
<p>第三，你的个人履历会因为你曾在处于兴盛期的一流公司工作过而大放异彩。</p>
<p>第四，你的收入会越来越高。</p>
<p>当情况变得糟糕时，上述所有原因又会成为你离开公司的理由。事实上，在那种情况下，令员工留下的唯一原因并不是他需要一份工作——这在当前的大环境下也不适用——而是他喜欢自己的工作。</p>
<p>事情并不总是一帆风顺</p>
<p>在世界历史上，从未有哪家公司的股票价格会一直上涨。在管理混乱的公司里，经济优势一旦消失，员工就会随之流失。在科技公司里，一旦员工流失，就会出现螺旋式循环：公司价值下跌，最优秀的员工流失，公司价值继续下跌，最优秀的员工继续流失。这种恶性循环很难逆转。</p>
<p>成为一家好公司本身就是目标</p>
<p>我第一次见到比尔·坎贝尔时，他是财捷集团的主席、苹果公司的董事会成员，还是行业中许多顶级CEO的导师。这些响当当的头衔固然让我印象深刻，但还是比不上他1992年经营GO Corporation公司时给我留下的深刻印象。该公司本来打算在1992年研发iPhone产品，在以风险资本为支柱的所有公司之中，它所筹集到的资金是有史以来最多的，但在1994年，该公司几乎被免费卖给美国电话电报公司之前，所有资金几乎损失殆尽。</p>
<p>现在听起来，这也许不算什么。实际上，这是一次可怕的失败。但我曾见过该公司的很多员工，包括一些曾叱咤风云的大人物，如迈克·荷马、丹尼·沙德尔、弗兰克·陈以及斯特拉顿·斯科拉沃斯。令人惊讶的是，他们都把在Go Corporation公司工作视作自己生命当中最珍贵的工作经历之一。尽管他们的职业生涯就此止步，没有赚到钱，成为新闻头版报道的失败案例，但他们依然认为在GO Corporation公司的工作经历是最棒的。Go Corporation公司为他们提供了良好的工作环境。</p>
<p>这让我意识到，比尔是位高效出色的CEO。显然，约翰·多尔也这么认为，因为当斯科特·库克为财捷集团寻找一名CEO时，即使比尔在GO Corporation公司时赔掉了约翰的巨额资金，约翰还是推荐了比尔。几年间，凡是和GO Corporation公司的员工接触过的人都知道比尔的理想，那就是创建好公司。</p>
<p>如果你没有其他事可干，那就像比尔一样创建一家好公司吧。</p>
<p>创业公司为何要进行人员培训？</p>
<p>在网景公司工作时，我明白了创业公司为什么要进行人员培训。在麦当劳工作的人都会接受岗位培训，但是从事更复杂工作的人们却不需要培训。这毫无道理。你愿意成为麦当劳里未受培训的人员之一吗？如果一名工程师从来没被告知软件编码的工作原理，你会使用他编写的软件吗？很多公司都认为自己的员工非常聪明，根本不需要培训。真是愚蠢之见。</p>
<p>我第一次当管理者时，对于培训是又爱又恨。从逻辑上说，高科技公司开展培训很有意义，但我在以往工作过的公司所经历的那些培训并没有调动起大家的热情。讲授培训课程的人都是从其他公司请来的，这些人对我们公司的业务并不了解，讲的都是些不相关的东西。后来，我读了安迪·格鲁夫的管理学经典之作《格鲁夫给经理人的第一课》（High Output Management） [1]。读后，我的事业观发生了改变。格鲁夫在书中写道：“大多数管理者似乎都觉得，培训员工这件事应该让其他人来做，但我却坚信，管理者应该亲自去做这件事。”</p>
<p>我在网景公司担任产品管理主管时，大多数产品经理对业务毫不重视，这令我十分沮丧。在安迪的启发下，我写了一份简短的书面材料，名叫“好的产品经理与坏的产品经理”，用以对团队进行培训，好让他们按我的期望行事。接下来发生的事让我大为震惊，我的团队的工作业绩立即开始提升。我以前认为毫无作为的产品经理变得越来越有效率。不久，我的团队成为公司里业绩最好的团队。有了这次经验，创建Loudcloud公司之后，我对人员培训进行了大量投入，我相信这样的投入会引导我们最终走向成功。所有这一切都源于一个对人员进行培训的简单决定和一份简单的培训材料。因此，我要感谢安迪·格鲁夫，还要告诉你们在自己的公司里进行人员培训的原因、培训内容，以及培训方法。</p>
<p>为什么要进行人员培训？</p>
<p>几乎所有创建科技公司的人都知道，人是最重要的资产。为了建立自己的人才库，运行良好的创业公司对人才招聘和面试非常重视，而对人的投入却往往会止步于此。以下4个主要原因告诉我们，对人的投入不应到此为止：</p>
<p>1.生产力</p>
<p>我经常看到创业公司仔细地统计经过筛选的面试者人数、参加所有面试环节的人数以及已聘用的人数。所有这些数据都很有趣，但最重要的一项数据却被遗忘了：公司新增了多少高效率的员工？由于无法测量员工朝着真正目标前进的幅度，他们看不到培训的价值所在。如果对生产力进行测量，他们会惊讶地发现，那些在人员招聘、人员雇用，以及人员融入上的投入都将付之东流。即使他们被告知新员工的生产力很低，大多数CEO还是认为自己没时间开展人员培训。安迪·格鲁夫经过计算表明，事实刚好相反。</p>
<p>显而易见，培训是管理者可以开展的最有效的活动之一。考虑一下是否有可能为自己所在部门的员工举办4场系列培训讲座。如果每场一小时的讲座需要准备三小时，那么4次讲座总共需要准备12小时。假如培训班共有10名学员，第二年，这10名学员为公司工作的时间总计会达到1.2万个小时。如果你此前所做的培训令这些员工的业绩提升1%，那么你用于培训的12个小时就相当于为公司带来了200个小时的工作量。</p>
<p>2.绩效管理</p>
<p>面试管理者时，人们常常喜欢问这样的问题：“你辞退过人吗？辞退过多少人？辞退人时你是怎么做的？”这些问题都很好，但他们并没有触及问题的本质：辞退人时，你怎么确定这名员工很清楚自己的工作期望？最佳答案是，对员工进行岗位培训时，管理者应该清晰明确地提出工作期望。不对人员进行培训，绩效管理就毫无基础，进而变得松散无序、前后矛盾。</p>
<p>3.产品质量</p>
<p>在创建公司之初，创办人通常会有一个愿景：建立一流的、优质的产品架构，以解决他们在以往工作中被迫面临的大量棘手问题。随着公司逐步走向成功，他们却发现自己的美好愿景已经难以实现。这是怎么回事呢？公司的成功会拉动快速招聘新工程师的需求，从而忽视对新工程师进行适当的培训。给新工程师分配任务之后，这些工程师就会竭尽全力地想办法完成这些任务。通常情况下，这意味着对架构内现有设备进行复制，这种复制会导致用户体验不一致、各种性能问题，以及整体混乱。而你却认为，培训成本太高。</p>
<p>4.员工留任</p>
<p>在网景公司工作时，有一段时期，员工流失率非常高，我决定看看公司所有的离职面谈材料，搞清楚人们为什么要离开高科技公司。排除经济因素之后，我发现人们辞职主要有两个原因：</p>
<p>第一，他们讨厌自己的管理者。缺乏指导、职业发展前景不明朗、收到的反馈多为负面的，这些因素通常会令员工感到惊恐不安。</p>
<p>第二，学不到东西：公司没有投入资源，帮助员工学习新的技能。</p>
<p>而一个出色的培训项目可以直接解决这两大问题。</p>
<p>首先应该干什么？</p>
<p>最好从与员工关系最密切的话题开始：胜任自己工作所需要的知识和技能。我将其称为职能培训。职能培训可以很简单，比如培训员工按照你的期望工作；也可以很复杂，比如举办为期数周的技术新人训练营，让新员工充分了解公司不同时期的产品在架构上的细微差别。培训课程应该根据具体工作精心设计。如果想尝试更复杂的培训课程，一定要请团队中最优秀的专家和管理者参与其中。这样做有助于营造一种强健的、积极向上的企业文化，这比开100次场外文化建设战略会议效果更好。</p>
<p>公司培训项目中的另一个重要部分是管理培训。为管理团队设定期望时，管理培训是最佳着手点。你希望他们能定期和员工进行一对一的会面吗？你希望他们对绩效进行反馈吗？你希望他们对员工进行培训吗？你希望他们认同团队的目标吗？如果答案是肯定的话，你最好告诉他们。一旦设定好期望，下一期的管理课程就可以确定下来了，这些课程会告诉管理者如何按你的期望行事。</p>
<p>有了合理的管理培训和职能培训，你还要有其他一些培训机会。创建科技公司的一大乐事就是广纳英才，带领各路精英，分享自己最拿手的技能。与谈判、面试和财务等主题相关的培训不仅能加强公司在这些方面的能力，而且还能鼓舞员工的士气。对那些能力达到精英水平的员工而言，讲授培训课还能成为一项荣誉。</p>
<p>实施培训项目</p>
<p>既然已经明白了培训的价值，也知道了培训内容，那么如何让公司按照我们的期望运行呢？首先要承认，任何创业公司都没有时间去做可做可不做的事。因此，培训必须具有强制性。前两种培训（职能培训和管理培训）可以比较容易地按下列方式实施：</p>
<p>第一，通过拒绝新员工的要求实施职能培训。正如安迪·格鲁夫所说，管理者只有两种方法可以提高员工的产出：激励和培训。因此，培训应该是公司对所有管理者的最基本要求。实现这个要求的一个有效方式是禁止员工向管理者提要求，直到他们制定出一个针对新人的培训项目。</p>
<p>第二，通过自己的讲解实施管理培训。管理公司是CEO的职责。即便你没有时间亲自教授所有的管理课程，有关管理期望的课程也应该由你来上，因为这些期望毕竟是你自己的期望。挑选团队中最优秀的管理者去教授其他课程，把参与这些课程变成一种荣誉，同时也变成一种强制性的要求。</p>
<p>讽刺的是，实施培训项目的最大障碍是：有些人认为，这会花费太多时间。要记住，在提升公司生产力方面，其他任何投入都比不上培训。因此，因为太忙而没时间开展培训就相当于因为太饿而吃不下任何东西。此外，开设一些基本的培训课程并不难。</p>
<p>我在网景公司主管服务器产品管理团队时，令我极为沮丧的是，在我接手的团队里，每个人对自己的工作都有着独特并且完全不同的理解。</p>
<p>最后，我突然明白，在这一行业中，从来没有人对产品管理工作下过定义。于是，我试着静下心来做这件事。令我高兴的是，人们至今还在读我下的定义。这令我看到了培训的重要性。</p>
<p>好的产品经理，差的产品经理</p>
<p>好的产品经理极其了解市场、产品、生产线和竞争情况，凭借自己丰富的经验和充分的自信开展管理工作。好的产品经理是产品的CEO。他们勇于承担全部责任，以产品的成功与否来衡量自己。</p>
<p>他们必须确保产品、时间，以及所需要的一切正确无误。好的产品经理对周围形势十分清楚（公司、营收资金、竞争等），为了获得成功，他们主动制订并执行计划（从不推辞）。</p>
<p>差的产品经理总有一大堆借口，如资金不足、项目经理无能、微软研发这项产品的工程师比我们多10倍、我劳累过度了、没人给我指示等。我们的CEO从不会找这些借口，产品经理也不应该拿这些当借口。</p>
<p>为了在适当的时机推出适当的产品，不同部门之间必须通力合作，好的产品经理不会把所有时间都浪费在这些部门之间。他们不会占用产品团队的所有时间，不会以管理项目的方式管理各项职能，不会为项目跑腿打杂。他们不是产品团队的一员，而是团队的管理者。技术团队不会将好的产品经理当成一种营销资源。好的产品经理和技术经理在营销中其实互为伯仲。</p>
<p>好的产品经理对目标有清晰的定义，即“目标是什么”（与“怎么实现目标”相对），并能有效实施这一目标。差的产品经理只要想出“怎么实现目标”，就会扬扬自得、不可一世。好的产品经理会采用书面形式和口头形式与技术人员进行清晰的交流，他们不会随意下达命令，而是在不经意间搜集信息。</p>
<p>好的产品经理会制作附加材料、常见问题解答、业务简报以及白皮书，供销售人员、营销人员和主管参考或使用。差的产品经理会抱怨自己整天都在为销售人员解答问题，忙得不可开交。好的产品经理会预测出产品的严重缺陷，提出真正的解决方案，而差的产品经理整天都在解决问题。</p>
<p>好的产品经理会将一些重要问题以书面形式记录下来（竞争中的良策、艰难的架构选择、艰难的产品决策、攻占或放弃市场）。差的产品经理只以口头形式表达自己的意见，抱怨“当权者”不允许他这样做。一旦失败，他们往往会说自己早就料到会失败。</p>
<p>好的产品经理让团队将重点放在收益和客户身上，而差的产品经理则让团队关注竞争对手的产品有多少新功能。好的产品经理定义的好产品是只要付出巨大努力就能实现的，而差的产品经理定义的好产品要么无法实现，要么就是让技术人员随心所欲地创建产品（即把最困难的问题留给他们去解决）。</p>
<p>在产品规划期，好的产品经理会考虑向市场推出超值产品，在产品进入市场期间，他们会考虑实现市场占有率和收益目标。差的产品经理总是搞不清楚交付价值、竞争性功能匹配、价格以及普遍性之间的差异。好的产品经理会拆解问题，而差的产品经理会把所有的问题合并成一个问题。</p>
<p>好的产品经理将自己想要讲述的故事交给媒体去写，差的产品经理向媒体传达信息时总想面面俱到，保证其在法律意义上的绝对精确。好的产品经理向媒体提问，差的产品经理回答媒体的所有问题。好的产品经理认为媒体和分析机构的人都很聪明，差的产品经理认为记者和分析员都是傻子，根本不懂他们独特技术的细微差别。</p>
<p>好的产品经理偏重清晰明了，差的产品经理对显而易见的事情从不解释。好的产品经理对自己的职责和成功有明确的认识，差的产品经理总想让别人告诉他该做什么。</p>
<p>好的产品经理每周会按时提交自己的工作报告，因为他们遵守纪律。差的产品经理往往会忘记按时提交工作报告，因为他们不重视纪律。</p>
<p> [1]《格鲁夫给经理人的第一课》已由中信出版社于2011年出版。——编者注</p>
<p>可以从朋友公司挖人吗？</p>
<p>所有优秀的科技公司都需要优秀的员工。为了组建世界一流的招聘机构，最优秀的公司会投入大量时间、资金和人力。为了建立世界上最优秀的团队，你在追求的道路上会行进到什么地步呢？从朋友公司里挖人是公平竞争吗？你和他还能做朋友吗？</p>
<p>首先，我所说的“朋友”指的是：</p>
<p>•重要的生意伙伴</p>
<p>•朋友</p>
<p>在我的讨论当中，朋友和重要的生意伙伴大致是一样的。</p>
<p>大多数CEO永远不会从朋友的公司招募人才。通常，CEO在生意当中不会有很多真正的朋友，从朋友公司挖人肯定会失去朋友。然而，几乎所有的CEO都会面临这样的决定：是否要从朋友公司招募一名员工？为什么会出现这种情况？什么时候可以这样做？什么时候这样做会让你失去朋友？</p>
<p>反正他们也在找新工作</p>
<p>开场总是一样。你的朋友凯茜手下有一名非常出色的工程师，名叫米切尔。他正好是你公司里一名顶级工程师的朋友。你的工程师带米切尔来面试，你对此毫不知情。米切尔顺利通过了面试的所有环节，最后一步要由你这位CEO对他进行面试。你立即发现，米切尔目前正在你的好朋友凯茜的公司里工作。于是，你找公司里的其他人进行核实，以确定他们没有把米切尔故意排在第一名，他们向你保证，米切尔正在找工作，如果不来你的公司，也会去别的公司。现在，你该怎么办呢？</p>
<p>这时候，你也许在想，“如果米切尔打算辞职，那么从逻辑上说，凯茜应该希望他来我的公司，而不是去竞争对手公司，或是去一家有一位她不喜欢的CEO的公司。”凯茜也许会这么想，也许不会。</p>
<p>公司经营不顺利时，人们往往会离开，所以你应该假设凯茜正在为其公司的存亡而努力奋战。在这种情况下，没有什么比失去一名优秀的员工更让她伤心的了，因为她知道，其他员工会把这当作公司没落的一个征兆。让凯茜更受打击的是，她的员工会把你的举动看成一种背叛——凯茜所谓的朋友在趁火打劫。他们会想，“凯茜太无能，朋友挖她墙角，她都毫无办法。”这样揣测下去的话，一个逻辑问题很快就变成了一个情感问题。</p>
<p>你不想失去凯茜这个朋友，于是向她保证，米切尔是个例外，是他来找你的，她公司里的员工当中，他是第一个也是最后一个加入你公司的人。通常情况下，这种解释会有效，凯茜会予以理解，对你的姿态表示感谢。她会原谅你，但她绝不会忘记这件事。</p>
<p>她对米切尔的记忆会加深，因为他是你们关系破裂的第一步。由于米切尔是一位极出色的员工，凯茜公司里其他出色的员工很可能会打电话给米切尔，了解他离开公司的原因，接下来去哪里高就。米切尔会解释原因，而这些原因往往很有说服力。于是，忽然之间，他们也想效仿米切尔的做法，加入你的公司。等你意识到这一形势时，追随米切尔而来的新员工们已经被录用了。</p>
<p>在上述这些情况中，你的员工会向你保证，是凯茜的员工主动找上门来的。他们会指出，这些应聘者也收到了其他公司的录用通知，所以他们肯定会离开凯茜的公司，招募他们又有何妨。而凯茜公司的管理者们肯定会另有一套说辞。他们会请求凯茜，让她阻止自己的朋友从公司里挖人，否则他们永远不能兑现承诺。这会令凯茜陷入尴尬境地，激怒凯茜。最后，社会压力会战胜你精彩的对抗性逻辑。</p>
<p>思考这种动态关系有一个简单的方法：如果你丈夫离你而去，你希望自己最好的朋友和他约会吗？他肯定会和其他女人约会，所以，让你的朋友得到他难道不好吗？这看似符合逻辑，但其实并非如此，你肯定会失去朋友。</p>
<p>应该怎么办？</p>
<p>首先，要记住，除非该员工极其出色，否则你无论如何也不要将其留在公司。因此，从朋友公司里招人时一定要招顶尖人才，否则你只是平添了一些平庸之辈而已。不要认为你正在招募的人一定十拿九稳。</p>
<p>我总结出一条好的经验法则，即“挖人的反身性原则”。该原则指出：“某公司挖走了你的几名员工，如果你震惊无比、惊恐不安，那你就不应该挖他们公司的任何一名员工。”这样的公司应该很少，有可能根本就没有。</p>
<p>为了避免出现这种棘手的情况，很多公司都制定了这样的政策，将那些规定未经CEO（或高级主管）同意，不得雇用其员工的公司名单列举出来。有了这项政策，在录用朋友的员工之前，你就可以给朋友最后一次机会，让其留住员工，或提出反对意见。</p>
<p>有了这项政策，处理这种情况的最佳方式就是公开透明。看清了雇用出色员工和背叛珍贵友谊之间的矛盾之后，你就应该将事情公开，告诉员工，你和他现在所属的公司有重要的生意往来，在录用他之前，你必须和他所在公司的CEO进行沟通，对他进行背景核查。告诉他，如果他不同意，你会立即中止录用，并对此保密。在录用之前，要和朋友进行交谈，这样才能更好地判断录用他的员工对你们的关系所带来的影响。此外，你还有可能避免用人不当，因为往往有些应聘者在面试中表现极佳，但进入公司之后，表现却不尽如人意。</p>
<p>最后一点想法</p>
<p>在经典电影《黄金三镖客》中，克林特·伊斯特伍德饰演的好人和埃里·瓦拉赫饰演的反派携手犯罪。瓦拉赫是个臭名昭著的罪犯，警方悬赏要他的人头。两个主人公设计了一个骗局，以获取赏金。伊斯特伍德交出瓦拉赫，得到了赏金，接着瓦拉赫被判绞刑。瓦拉赫骑在马上，双手被绑在背后，脖子上的绳子眼看就要将他勒死。伊斯特伍德在远处射断了绳子，救出了瓦拉赫，他们分掉了赏金。这场骗局一切顺利，直到有一天，伊斯特伍德释放了瓦拉赫，告诉他：“我觉得你再也不值3 000多美元了。”瓦拉赫问：“你什么意思？”伊斯特伍德告诉他：“我是说，我们的合作关系解除了。噢，不，你不行，还得把你绑着。这些钱都归我了，绳子归你。”接下来发生的就是动作片历史上最精彩的复仇故事。</p>
<p>因此，当你告诉你的CEO朋友，你认为他再也不如这名员工对你重要时，别指望你们还能继续做朋友。</p>
<p>大公司主管为何难以胜任小公司的工作？</p>
<p>你已经实现了产品和市场的融合，准备开始创建公司。董事会鼓励你引入一些经验丰富的主管，让他们提供有关财务、销售和营销方面的专业意见，帮助你将世界一流的产品转变成世界一流的业务。你会见了几个自己喜欢的应聘者，但董事会成员中的风险投资家却说：“他们没有达到要求，我们公司规模发展很快，应该吸引更优秀的人才。”于是，你将目标定高，引入了才气非凡的销售主管。这位主管曾管理过有着几千人的大型部门，有引人注目的推荐信，而且看起来很适合这个职位。你的风险投资家也很喜欢他，因为他的简历非常精彩。</p>
<p>6个月之后……</p>
<p>6个月之后，公司里的每个人都想知道，为什么这位销售（或营销、财务、产品）主管没做出任何贡献，却坐享数额如此巨大的认股权，那些承担了所有工作的人们的认股权反而要少得多。更糟糕的是，公司现在陷入了困境，当你高薪聘请的主管安坐办公室时，大量的员工正在流失。这究竟是怎么回事？</p>
<p>所以，我们要弄清，大公司主管的职责和小公司主管的职责大不一样。卖掉Opsware公司之后，我在惠普管理着几千名员工，每天有不计其数的事情需要我去处理。每个人都想从我这里挤走一点儿时间，小公司想和我合作，或想让我对其进行收购，我自己部门的员工需要我的批准意见，其他部门需要我的帮助，客户需要我的关注等。结果，我的大部分时间都用在优化和调整现有业务上。我所做的大部分工作都是“即将来临的工作”。事实上，大多数经验丰富的大公司主管会告诉你，如果你一个季度做出的方案数超过三个，你的工作就超量了。因此，在处理日常业务时，大公司的主管往往都是中断驱动 [1]式的。</p>
<p>相反，如果你是创业公司的一名主管，除非你自己找事，否则便无事可干。在公司创立初期，你每天必须做出8~10个新方案，否则公司就会停滞不前。</p>
<p>会出现什么情况？</p>
<p>雇用一名大公司主管之后，你会面临两种危险的不匹配情况：</p>
<p>第一，节奏不匹配。这样的主管已经习惯于等待邮件到达，等待电话铃声响起，等待会议被安排得井井有条。在你的公司里，他会长时间处于等待状态。如果这位新主管总在等待（根据他自己的受训经验），其他员工就会充满疑虑。你会听到这样一些言论，如“那家伙整天都在干什么？”“他凭什么享有这么多认股权？”</p>
<p>第二，技能不匹配。管理大公司需要的技能和创建新公司大不相同。管理大公司时，你往往对这些任务比较擅长，例如复杂的决策制定、次序优先、机构设计、流程改进，以及部门交流。创建公司时，没有机构需要设计，没有流程需要改进，部门之间的交流非常简单。但同时，你必须能够非常熟练地实施高质量的招聘流程，具备丰富的专业领域知识（你自己负责质量控制），懂得如何从零开始创建流程，而且在把握新方向、制定新任务方面要非常有创造力。</p>
<p>如何防患于未然？</p>
<p>两个关键步骤可以避免灾难的发生：</p>
<p>第一，在面试过程中将具有破坏性的不匹配情况筛选出来。</p>
<p>第二，将新人的融入和面试看得同等重要。</p>
<p>筛选不匹配情况</p>
<p>如果节奏不匹配和技能不匹配情况过于突出而无法克服，你该怎么办？以下是我认为非常有帮助的一些面试题目：</p>
<p>你上班的第一个月会干什么？</p>
<p>要注意那些过分强调学习的回答。这也许表明，该面试者认为，自己需要对公司情况进行大量学习和了解，但事实并非如此。更具体地说，他也许认为，你的公司和他目前所在的公司一样复杂。</p>
<p>要注意这样一种特征：有的应聘者只会根据公司为其分配的任务来设定节奏，而不是自己设定节奏。但永远不会有人为他分配任务。</p>
<p>挑选那些能拿出很多你意想不到的新方案的应聘者。</p>
<p>这份新工作和你目前的工作有什么不同？</p>
<p>挑选那些能意识到工作差异的应聘者。如果他们具有你需要的经验，他们就会对这个问题做出明确的回答。</p>
<p>注意那些认为自己的丰富经验可以立即得到应用的应聘者。从长远来看，这也许可以实现，但眼前却不大可能。</p>
<p>你为什么要加入一个小公司？</p>
<p>注意将获得股权作为首要动机的应聘者。一无所有的百分之一还是一无所有。这个动机让一些大公司主管有时很难理解。</p>
<p>如果他们的回答是想变得更有创造力，这就要好得多。大小公司之间最重要的差别在于，管理者花在管理和创造上的时间各不相同。想加入你公司的正确理由应该是：渴望变得更有创造力。</p>
<p>积极帮助新人融入公司</p>
<p>最关键的一步也许是帮助新人融入公司。你应该安排大量时间帮助新人尽快融入公司。下列事项需要牢记于心：</p>
<p>第一，促使他们积极创造。每月、每周，甚至每天给他们制定目标，确保他们做出相应的贡献。公司其余员工一直从旁观察，这对帮助他们融入公司很关键。</p>
<p>第二，确保他们明白自己的职责所在。无事可做的主管在创业公司中没有价值。他们要清楚地了解产品、技术、客户和市场，要督促新员工学习上述内容。每天安排一次和新主管的会面，要求他们带着各种问题而来，了解他们当天所听到的且没完全搞懂的所有情况。回答这些问题要有深度，要从基本原则开始。告诉他们最新发展情况。如果他们提不出任何问题，就要考虑解雇他们。如果30天后，你觉得他们还没有掌握情况，那就要毫不犹豫地解雇他们。</p>
<p>第三，把他们放入集体。确保他们和同事以及公司中的重要人员进行接触和交流。给他们列一份他们要认识并向其学习的人员名单。一旦他们按要求做到了，让他们提交一份报告，汇报自己从这些人身上学到了什么。</p>
<p>最后一点建议</p>
<p>从加速公司发展的角度而言，没有什么比雇用一位在创建类似规模的公司方面富有经验的人更有效果。然而，雇用这样的人有可能充满风险，要密切注意那些预示着成功和失败的重要指标。</p>
<p> [1]中断驱动，计算机用语，即当某进程要启动某个I/O设备工作时，便由CPU向相应的设备控制器发出一条I/O命令，然后立即返回，执行原来的任务，设备控制器则按照该命令的要求去控制指令的I/O设备。比喻应答式的工作方式，即只有提出请求，对方才会予以回应。——编者注</p>
<p>招聘主管：在没有招聘经验的情况下，怎样才能招到优秀的人才？</p>
<p>当一名出色的部门经理和当一名出色的总经理（尤其是一名出色的CEO）之间最大的差别是，作为总经理，你必须招聘并管理那些远远比你更胜任他们工作的人。事实上，很多时候，你必须招聘很多人，来做你从未做过的工作，并对他们进行管理。有多少CEO曾担任过人力资源主管、技术主管、销售主管、营销主管、财务主管以及法律主管呢？很可能一个都没有。</p>
<p>那么，在没有任何招聘经验的情况下，怎样才能招到优秀的人才呢？</p>
<p>第一步：知道自己想要什么</p>
<p>第一步是整个招聘过程中最重要的一步，也是常被忽略的一步。正如著名励志大师托尼·罗宾斯所说：“如果不知道自己想要什么，你实现愿望的可能性就微乎其微。”如果没有任何经验的话，你又怎么知道自己想要什么呢？</p>
<p>首先，你必须意识到自己非常无知，不要妄想仅靠面试应聘者就能学会如何招聘。虽然面试过程对你可能很有启发意义，但将其当作唯一的知识来源却很危险。这样做会让你很容易落入下面的陷阱：</p>
<p>第一，凭外表和感觉聘人。如果有人根据应聘者在面试中的形象和言语来聘用主管，这会很愚蠢。但是根据我的经验，大多数主管选聘人才的首要标准就是形象和感觉。如果CEO不清楚自己想要什么样的人才，再加上董事会成员对招聘也欠考虑，他们会怎样招聘呢？</p>
<p>第二，挑选与众不同的人才。如果我当年采取了这个观点，那我就永远也招不到马克·克兰尼了，你们现在可能也就看不到我写的这些话了。这一错误观点从寓意上看，就相当于对销售主管怀有柏拉图式的理想。你会想象一个完美的销售主管形象，然后把实际应聘者和你理想中的形象进行对应。这一观点之所以错误有以下几点原因：首先，你不能雇用一名想象中的主管来管理一个充满可能性的公司。你必须为处在这一特殊时刻的公司雇用一位合适人选。甲骨文公司2010年的销售主管在1989年很可能是失败的。就手机服务网站Foursquare而言，苹果公司的技术主管完全属于用人不当。细节最重要。其次，你想象中的主管形象往往都是错误的。你设想的这个形象的基础是什么？最后，让招聘团队理解这么抽象的一套标准极其困难。其结果是，每一个人都想在应聘者身上寻找与众不同的东西。</p>
<p>第三，看重的是应聘者身上没有弱点，而不是其长处。经验越丰富，就越清楚公司里的每个员工都有严重的缺点（包括你自己）。金无足赤，人无完人。因此，招聘时要看重应聘者的长处，而不是其身上没有弱点。每个人都有弱点，只不过有些人身上的弱点比较明显而已。因为其人没有弱点而对其加以聘用意味着你将愉快感作为优先考虑的因素。当然，你必须清楚自己需要应聘者具备什么能力，然后找出具备这种能力的人，忽略他在其他方面的弱点。</p>
<p>想知道自己需要什么样的人才，最好的方法是在该职位上亲自体验一番。不是名义上的，而是真正履行职责。在我的职业生涯中，我曾担任过人力资源主管、首席财务官以及销售主管。CEO往往不愿意干职能性工作，因为他们担心自己缺乏相应的知识。这种担心恰恰是你应该干这类工作的原因——学会相应的知识。的确，亲自体验是获得招聘所需要的所有知识的唯一方式，因为你要为公司寻找合适的主管，而不是普通主管。</p>
<p>除了亲自体验，引进专家也十分有益。如果你认识一位出色的销售主管，先和其进行面谈，了解他获得成功的原因，搞清楚他的哪些能力最符合你公司的需要。如果可能，将该领域专家纳入面试流程。不过，要注意，这些专家并不完全符合招聘条件。也就是说，他对你的公司缺乏了解，不知道公司的运作模式以及公司的需要。因此，不能将决定都推给专家来做。</p>
<p>最后，你心里要清楚自己对加入公司的人有什么期许。这个人在第一个月会做什么？你期望他加入公司的动机是什么呢？你想让他立刻扩大部门规模，还是在下一年只招一两个新人？</p>
<p>第二步：控制招聘流程</p>
<p>为了找到合适的主管，你现在必须将自己已经掌握的知识转化成一个能找到合适人选的招聘程序。下面是我喜欢使用的招聘程序。</p>
<p>写下你想要的能力，以及你愿意忍受的缺点</p>
<p>为了保证完整性，我发现在招聘主管时，下列标准非常有用：</p>
<p>•这位主管在履行职责方面是顶尖的吗？</p>
<p>•这位主管的经营能力出色吗？</p>
<p>•这位主管对公司的战略方向会做出重大贡献吗？这就是“他们够聪明”的标准。</p>
<p>•这位主管会成为团队中工作高效的一员吗？在这里，“高效”是关键词。一名主管很可能会受到团队其他成员的喜欢，但工作起来却毫无效率。同时他也可能工作十分高效，影响十分深远，却受到大家的鄙视。相比而言，后者要好得多。</p>
<p>这些职能对不同职位的重要性并不相同，管理者一定要适当地进行平衡。一般情况下，经营能力对技术主管或销售主管的重要性要超过其对营销主管或首席财务官的重要性。</p>
<p>设置检验招聘标准的问答题目（参见附录）</p>
<p>这样做很重要，即便你从来不问应聘者预先准备好的问题。把能检验出自己对人才的要求的问答题目写下来，这样目标就会变得具体明确，否则将极难实现。组织一支合理的面试小组，开展面试工作。</p>
<p>组成面试小组</p>
<p>面试小组必须牢记两个问题：</p>
<p>1.谁最能帮你发现应聘者是否符合招聘标准？这个人也许是公司内部人员，也许是公司以外的人员；可能是董事会成员、其他部门主管，也可能只是名专家。</p>
<p>2.录用主管之后，你需要谁支持你的决定呢？这个新团队和第一个团队同样重要。无论主管多么优秀，如果他周围的人一直在暗中使坏，他将很难取得成功。避免这种问题的最好办法是，在录用此人之前搞清楚所有可能发生的问题。</p>
<p>当然，一些人可能同时属于两个招聘小组，而且两个小组的意见都非常重要：第一个小组会帮你挑选最出色的应聘者，第二个小组会帮你判断每一位应聘者能否很快融入你的公司。通常，最好让第二个小组单独进行最后的面试环节。</p>
<p>接下来，根据面试官的不同才能分配问答题目。具体来说，要确保提问的面试官清楚什么样的回答是好的。</p>
<p>进行面试时，一定要和面试官讨论每一场面试，利用这段时间让大家对招聘标准达成统一理解，这样就能尽可能获得最满意的信息。</p>
<p>秘密调查和公开调查</p>
<p>对于通过面试的应聘者，CEO应亲自对其进行背景调查，这样做至关重要。应聘者提供的推荐信必须依据面试过程中已经检验过的同等招聘标准进行核查。秘密背景调查（找认识应聘者、但应聘者本人并未提及的人进行调查）可极其有效地获得对应聘者客观公正的评价。不过，公开背景调查的作用也不容小觑。尽管应聘者总会提供一份积极正面的推荐材料（否则他们也不会出现在面试名单上），但你要关注的并不是对他们的正面评价或负面评价，而是他们是否符合你的招聘标准。从这方面来说，公开调查作用很大，它会让你清楚地了解应聘者。</p>
<p>第三步：单独做决定</p>
<p>虽然参与招聘的人很多，但最终决定还要由自己做出。只有CEO能全面了解招聘标准、制定招聘标准的基本根据、面试官和应聘者推荐人反馈回来的所有意见，以及各类持股人的相对重要性。关于招聘主管的一致性决定几乎总会令招聘者忽视应聘者的能力，注重应聘者没有弱点这一方面。做决定是一份孤独的任务，但总得有人来做。</p>
<p>为什么实现了业绩目标，却没有达到预期效果？</p>
<p>在Loudcloud公司成立之初，很多人会做一些疯狂的事，然后拿我当挡箭牌，说：“这是本说的。”一般情况下，我对此不置一词，但我确实没有说过他们口中的那些话。在此，我与大家分享的管理原则与这样的经历有关。</p>
<p>管理Opsware公司时，我们有一个非线性季度难题，也可戏称为“曲棍球棒难题”。曲棍球棒是指一个季度当中收入曲线的形状。我们的曲棍球棒曲线非常糟糕，有一个季度，我们在季度末的最后一天才拿到新订单的90%。这种销售模式令我们很难对交易进行规划，对上市公司——我们就是上市公司——尤为不利。</p>
<p>于是，自然而然地，我决定改变曲棍球棒曲线走势，冷静应对这一切。我为销售人员设计了一项激励措施，如果他们在季度的前两个月完成交易，就给他们发放两个月的交易奖金。结果，下一个季度的曲棍球棒曲线变得更直了一点，也比预期变得短了一点——交易从上季度的第三个月转移到了本季度的前两个月。</p>
<p>在网景公司管理大型技术团队时，我对一项产品的计划表、质量和功能进行了测量。团队研发出的产品在功能上符合所有的要求，时间上非常准时，几乎没什么漏洞，但遗憾的是，产品本身很平庸，因为其所有的功能都表现一般。</p>
<p>我在惠普公司工作时，所有的交易都用数字规定了极其严格的收入目标和利润目标。一些部门虽然实现了目标数字，却是靠减少研发资金实现的。这种做法会严重削弱他们的长期竞争力，为将来的灾难埋下隐患。</p>
<p>在以上几种情况中，管理者们达到了我们的要求，但没有达到我们想要的效果。这是为什么呢？让我们来看一下。</p>
<p>拉平曲棍球棒曲线：目标错误</p>
<p>回顾过去，我当初真不应该让团队去拉平季度曲线。如果那是我想实现的目标，我就不得不心甘情愿——至少暂时——接受季度收入不断减少的后果。我们有固定数量的销售人员，他们会努力使每个季度的销售规模实现最大化。为了使季度曲线呈线性发展，他们必须改进自己的行为，调整自己的优先事项。不幸的是，我更喜欢过去优先实现收益最大化的做法。</p>
<p>考虑到当时的形势，我实在很幸运。在《孙子兵法》中，孙子警告说，给团队下达一个不可能完成的任务会削弱其实力。我并没有削弱团队的实力，却打乱了团队的工作顺序。正确的做法应该是，预先确定哪些事项更重要，然后实现每一季度销售额最大化或提高预测能力。只有给出第二种回答时，这个指导才有意义。</p>
<p>过于关注数字</p>
<p>在第二个例子中，我利用一组数字对团队进行指导，但并没有完全达到我想实现的目标。我的目标是推出一项依次满足下列指标的出色产品：客户喜欢、质量过硬、发货准时。</p>
<p>可惜，我设立的这些指标并不在产品的优先项当中。从基础水平而言，指标就是激励因素。在每次员工会议上，通过测量并讨论产品质量、功能以及计划表，员工们的注意力大都集中在上述指标之上，忽视了其他目标。这些指标并没有描述出真正的目标，因此，团队的注意力之所以偏离，罪责在我。</p>
<p>有趣的是，在很多消费者互联网创业公司里，我看到，同样的问题频频出现。我经常看到一些团队拼命将注意力放在客户获取和客户保留的指标之上。这样做通常对客户获取很有用，但对客户保留的效果并不好，为什么呢？</p>
<p>对于很多产品而言，指标通常会用足够多的细节去描述客户获取的目标，目的是提供充分的管理指导。相反，客户保留指标并不能提供足够多的细节，使自身成为一项完整的管理工具。结果是，很多新兴公司会过度强调客户保留指标，没有花足够多的时间去深入了解用户的真实体验。这通常会导致一款出色的产品被一堆混乱数字所包围。对出色产品怀有美好期望，建立强有力的指标，两者互为补充十分重要，但如果用指标去代替对产品的期望，你就无法实现自己的目标。</p>
<p>严格按数字进行管理就如同利用数字进行绘画</p>
<p>你想促成的事有些也许可以量化，有些则不可以。你不能只汇报量化目标，而忽视质化目标，因为质化目标才是最重要的目标。仅仅按照数字进行管理就像利用数字进行绘画，从严格意义上说，这完全是业余爱好者的做法。</p>
<p>惠普公司一直都想实现高收益。由于只关心数字，惠普现在虽然实现了高收益，却牺牲了未来的收益。</p>
<p>请注意下列问题中所包含的很多数字以及质性目标：</p>
<p>•我们的竞争性获胜率是在上升还是在下降？</p>
<p>•客户满意度是在上升还是在下降？</p>
<p>•我们自己的工程师对产品的看法是什么？</p>
<p>由于将公司当作黑匣子一样进行管理，惠普公司的很多部门以降低竞争力为代价，使当前利益实现了最大化。公司对实现了短期目标的管理者予以奖励，这种方式对公司极其有害。如果将白盒子考虑在内，效果就会好得多。白盒子不仅包含数字，而且还能告诉你这些数字是怎么来的。这种方式会惩罚那些以牺牲未来利益换取短期利益的管理者，奖励那些给未来投资的管理者，即使这些投资短期内难以测量。</p>
<p>最后一点想法</p>
<p>我们很容易看到，领导者被误解的方式有很多。为了正确做事，你必须认识到，你无意识评估的任何事都会引起员工们一系列的行为。一旦确定了自己想要的结果，就需要检验对这个结果的描述，而检验的依据是，员工对这一描述所做的行为反应。否则，员工行为的副作用也许比你正在补救的情况还要糟糕。</p>
<p>管理债务</p>
<p>沃德·坎宁安是第一个设计维基百科的电脑程序员，多亏了他，“技术债务”这个比喻现在成了一个很好理解的概念。你也许可以通过写快捷代码或不洁代码的方式节省时间，但最终还是要把时间还回去，还有利息。通常这种交换很公平，但如果你没有把这种交换记在脑子里，你就会遇到大麻烦。还有一个不太好理解的平行概念，我称之为“管理债务”。</p>
<p>像技术债务一样，当你牺牲掉代价高昂的长期利益、做出权宜的短期管理决定之时，就会发生管理债务。和技术债务一样，交换有时很有道理，但很多时候又没有道理。更重要的是，如果你引发了管理债务却并不负责，那你最终就会落得管理失败的下场。</p>
<p>与技术债务相似，管理债务形式多样，很难一一详述，但几个典型例子会有助于你理解这个概念。以下是创业公司中比较流行的三种管理债务形式：</p>
<p>1.一山藏二虎。</p>
<p>2.因某一员工得到了另一工作机会而对其补偿过度。</p>
<p>3.缺乏绩效管理机制或员工反馈机制。</p>
<p>一山藏二虎</p>
<p>如果你有两名非常出色的员工，他们理论上都非常适合公司的某一职位，你会怎么做？也许你公司里技术部门的主管是一名世界一流的建筑师，但他却缺乏将公司规模扩大一个等级的经验。你还有一名出色的经营性人才，但其技术水平却不高。你想把这两个人都留在公司，但职位只有一个。于是，你就想出一个好主意，“一山藏二虎”，并因此而背负了一点点管理债务。短期利益很明显：你保留了两名员工，也不必对他们进行培养，因为他们在理论上会互相帮助，共同进步，他们之间的技能差距立刻得到了弥合。但是很不幸，为了这些利益，你必须在短期之内连本带利地偿还债务。</p>
<p>首先，这么做会令所有工程师的工作变得更加困难。如果某位工程师需要上司做决定，他该找哪位上司呢？如果一位上司做了决定，另一位上司有权推翻这项决定吗？如果是一项需要开会讨论的复杂决定，两位上司是否都必须出席会议呢？谁来确定部门发展的方向呢？如果需要召开一系列的会议来确定部门的发展方向，这个方向真的能确定下来吗？</p>
<p>此外，你卸掉了他们所有的责任。如果产品计划有误，谁来负责？如果技术失去了竞争力，谁来负责？如果运营主管对产品计划的失误负责，技术主管为技术质量负责，那么如果是运营主管强迫工程师们制定了产品计划表，从而导致技术质量下滑，那会怎样呢？你怎么知道这件事就是他做的？真正的代价是，随着时间的流逝，情况会更加糟糕。在短期之内，通过多召开几次会议，或以一种清晰的方式进行分工，你也许可以缓和这种负面影响。然而，随着工作越来越多，之前清晰的分工会逐渐变得模糊，部门会逐渐退化。最终，你只能做出艰难的决定，留下一个人，一次性还清债务，否则你的技术部门就会永远陷入泥潭。</p>
<p>因某一员工得到了另一工作机会而对其补偿过度</p>
<p>一名优秀的工程师决定辞职，因为他得到了一个更好的工作机会。出于各种原因，你对其予以补偿，但其他公司开出的工资比你公司里任何一名工程师的工资都高，这名工程师并不是你最出色的工程师。不过，他现在正在进行一个关键项目，你不能失去他。于是，你给他开出了同样的条件，保住了项目，却承担了许多的管理债务。</p>
<p>你或许认为你给他开出的条件是保密的，因为你让他发誓保守秘密。那么，秘密是怎么泄露出去的呢？公司里有他的朋友，当他得到另一家公司向其发出的工作邀请时，他会向自己的朋友咨询建议，他最好的一个朋友建议他接受工作邀请。当他决定留下来时，他必须向这位朋友解释自己为什么没有接受他的建议，否则他就会失去个人信誉。于是，他将实情告诉了这位朋友，让他发誓保守秘密。这位朋友同意保密，却感到气愤，因为他必须用辞职进行威胁，才能使工资获得合理的上涨。而且，这位朋友还因为你对他进行了过度补偿而感到嫉妒。于是，他将情况告诉了自己的几个朋友，并让他们保密。现在，技术部的每一个人都知道，涨工资的最好办法是从其他公司拿到工作邀请，然后以辞职进行威胁。要付清这样一笔管理债务，需要很长一段时间。</p>
<p>缺乏绩效管理机制或员工反馈机制</p>
<p>你的公司现在有25名员工，你知道自己应该规范绩效管理机制，但你不想付出代价。你担心这样做会让人产生一种“大公司”的感觉。而且，你也不想让员工被反馈搞得心烦意乱，因为你现在不能失去他们任何一个人。大家其乐融融，干吗要破坏现在的良好局面呢？背负一点点管理债务有什么关系呢？</p>
<p>当某个人的工作表现没有达到工作要求时，第一笔债务就来临了：</p>
<p>CEO：我们雇用他时，他表现非常好，这是怎么回事呢？<br>经理：他总是不按我们的要求做事。<br>CEO：你们明确告诉过他吗？<br>经理：也许说得不太清楚……<br>然而，更大的债务就像一笔默不作声的高额税款。当所有人都达成共识，而且不断进步时，公司会运行得很顺利。如果没有反馈，你的公司在任何一个方面都不可能做到最好。如果只下达指令、从不进行修正，这些指令就会显得模糊不清。人们意识不到自己的缺点时，很少会对其加以改正。不对员工的行为做出反馈的最终代价是：公司业绩的系统性一塌糊涂。</p>
<p>小结</p>
<p>我所认识的每一位真正出色的、富有经验的CEO都有一个重要特征：在回答有关部门组织的问题时，他们都倾向于选择艰难复杂的回答。如果面临两种选择：其一，给每个人发同样的奖金，不犯众怒；其二，极力褒奖业绩突出的员工，惹恼其他员工。他们会选择后者。如果面临另外两个选择：其一，撤掉今天一个很受欢迎的项目，因为该项目不在长期计划之内；其二，出于维护人心的目的或为了显得前后一致而保留该项目。他们会选择前者。为什么呢？因为他们曾经为管理债务付出过代价，所以不愿再重蹈覆辙。</p>
<p>有效的人力资源管理</p>
<p>技术行业的所有人似乎一致认为，人才是最重要的，然而就人才机构到底应该是怎样的，似乎并没有达成一致看法。</p>
<p>问题是，一涉及人力资源，大多数CEO确实不知道自己想要什么。在理论上，他们想拥有一个管理完善、企业文化成熟的公司。他们本能地知道，一个人力资源机构也许无法实现这一理想。因此，CEO们通常会对这个问题撒手不管，去做一些即使不是毫无价值却也并非最适宜的事情。</p>
<p>具有讽刺意义的是，管理技术部门最先懂得：一个管理出色的质量控制部门无法生产一款高质量的产品，却能告诉你产品研发团队何时生产了一款质量低劣的产品。类似情况是，一个高质量的人力资源机构无法给你创造一个管理完善、企业文化成熟的公司，却可以告诉你，你和你的管理者何时没有尽到职责。</p>
<p>员工的职业生命周期</p>
<p>了解管理质量的最佳方式是观察员工职业生命周期。从聘用他到他退休，你的公司有多出色？你的管理团队在所有阶段都是世界一流的吗？你是怎么知道的？</p>
<p>一个出色的人力资源机构会支持、衡量并帮助你的管理团队实现提升，他们会帮你回答一些问题：</p>
<p>招聘</p>
<p>•你非常清楚每一个公开职位所需要的技能和才干是什么吗？</p>
<p>•你的面试官准备得充分吗？</p>
<p>•你的管理者和员工有没有向求职者积极介绍公司的情况？</p>
<p>•面试官们能按时到场吗？</p>
<p>•管理者和招聘人员会及时联系应聘者吗？</p>
<p>•你能和最强的公司展开强有力的人才竞争吗？</p>
<p>报酬</p>
<p>•就你公司的统计数据而言，你享受的福利合理吗？</p>
<p>•和与你展开人才竞争的公司相比，你的薪水和股票期权福利如何？</p>
<p>•相对于你的薪酬制度，你的绩效排名如何？</p>
<p>培训与融合</p>
<p>•聘用员工之后，从该员工及其同事，以及管理者角度而言，他需要多长时间才能体现出生产力？</p>
<p>•加入公司之后，员工需要多长时间才能清楚公司对他的期望？</p>
<p>绩效管理</p>
<p>•你的管理者会给予自己的员工前后一致、清晰明确的反馈吗？</p>
<p>•你公司的书面绩效评价报告质量如何？</p>
<p>•你公司所有的员工都能按时收到自己的绩效评价吗？</p>
<p>•你能有效地管理工作表现不佳的员工吗？</p>
<p>工作动机</p>
<p>•你的员工来上班时激动兴奋吗？</p>
<p>•你的员工对公司使命怀有坚定的信念吗？</p>
<p>•他们每天喜欢上班吗？</p>
<p>•有没有员工消极怠工？</p>
<p>•你的员工清楚公司对他们的期望吗？</p>
<p>•员工们是安心留在公司还是辞职人数比往常更多？</p>
<p>•员工们为什么辞职？</p>
<p>有效管理人力资源的几项要求</p>
<p>应该找哪种类型的人才来帮助自己全面、持续地了解自己管理团队的质量呢？下面是对这类人才的几项基本要求：</p>
<p>•世界一流的流程设计师。人力资源主管颇有点儿像质量监察部门的主管，他必须精通流程设计。准确衡量重要管理流程的一个关键是，看其是否具备出色的流程设计和严格的流程管理。</p>
<p>•真正的外交官。没有人喜欢打小报告的人。如果管理团队对其缺乏完全信任，人力资源部门不可能有效地开展工作。管理者必须相信，设立人力资源部的目的是帮助自己改进工作，而不是对自己进行监管。优秀的人力资源主管会真心实意地为管理者提供帮助，不会因为发现了问题而大肆表功。他们会直接找管理者解决问题，提高管理质量。如无必要，他们一般不会将问题上报给CEO。如果人力资源主管将自己的知识深藏不露，玩弄权术，或搞阴谋诡计，那他就毫无用处。</p>
<p>•行业知识专家。薪酬、福利、最佳招募方法等变化极快，人力资源主管在行业之中必须建有深厚的关系网，对所有最新情况了如指掌。</p>
<p>•CEO信任的智慧顾问。如果人力资源主管想将管理者的管理水平维持在一个高水平，CEO对此不给予充分支持的话，其他任何技能都将变得不重要，因此，CEO必须相信人力资源主管的思考和判断。</p>
<p>•感觉灵敏的人。当公司管理质量开始下滑，所有人对此毫无觉察，但感觉极其敏锐的人却能察觉出公司正在走下坡路。你需要这样一个人</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第五章　依次管理好人、产品和利润</p>
<p>我和最强悍的黑人哥们一起打拼，和最聪明的黑人哥们一起赚钱，<br>没时间听你们这些该死的黑人艺术家聒噪。<br>你最好闭嘴，把我惹急了可不是闹着玩儿的。<br>你们个个都是军中的公子少爷，只有我是黑人中士。<br>——美国说唱]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ruby SSL_connect error]]></title>
    <link href="http://yoursite.com/2016/01/30/ruby_ssl_connect_error/"/>
    <id>http://yoursite.com/2016/01/30/ruby_ssl_connect_error/</id>
    <published>2016-01-30T05:28:27.000Z</published>
    <updated>2016-01-30T05:28:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SSL_connect_returned_3D1_errno_3D0_state_3DSSLv3_read_server_certificate_B_3A_certificate_verify_failed"><a href="#SSL_connect_returned_3D1_errno_3D0_state_3DSSLv3_read_server_certificate_B_3A_certificate_verify_failed" class="headerlink" title="SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed"></a>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed</h1><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><hr>
<p>其实这个问题，先前就已经碰到过了。<br>这个问题是ruby在请求https的地址时候，找不到Certificate Authority (CA) bundle。就是一个<em>.pem</em>文件。默认的访问地址是<code>/usr/local/etc/cacert.pem</code>，如果你没有这个文件，或者这个文件有问题，都会报这个错误。<br>当时是在mac上，之前的解决办法是<a href="http://stackoverflow.com/questions/4528101/ssl-connect-returned-1-errno-0-state-sslv3-read-server-certificate-b-certificat" target="_blank" rel="external">参考链接</a>。</p>
<ul>
<li>sudo port install curl-ca-bundle</li>
<li>或者是直接wget下载wget <a href="http://curl.haxx.se/ca/cacert.pem" target="_blank" rel="external">http://curl.haxx.se/ca/cacert.pem</a></li>
<li>下载好这个文件之后，<code>export SSL_CERT_FILE=/path/to/cert.pem</code>添加到bashConfig中。如果还是有问题，记得打印<strong>ENV[‘SSL_CERT_FILE’]</strong>，到底是不是指向你的文件。</li>
<li>如果还是不行的：rvm reinstall ruby –disable-binary</li>
</ul>
<h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><hr>
<p>今天我又在Centos下面碰到了相同的问题，实在调用RestClient的时候报的错。就直接去搜索这个问题，然后发现有多个原因会导致这个问题，尝试了所有的解决办法，发现跟之前的原因其实是一样的，就是没有在环境中设置正确的<strong>SSL_CERT_FILE</strong>。<br>不过还是把一些没有解决我问题的解决方案全都列出来。兴许以后会遇到。</p>
<h4 id="1-__u76F4_u63A5_u653E_u5F03_u9A8C_u8BC1"><a href="#1-__u76F4_u63A5_u653E_u5F03_u9A8C_u8BC1" class="headerlink" title="1. 直接放弃验证"></a>1. 直接放弃验证</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"><span class="constant">OpenSSL::SSL::VERIFY_PEER</span> = <span class="constant">OpenSSL::SSL::VERIFY_NONE</span></span><br></pre></td></tr></table></figure>
<h4 id="2-_u91CD_u65B0_u8BA9rvm_u5B89_u88C5openssl"><a href="#2-_u91CD_u65B0_u8BA9rvm_u5B89_u88C5openssl" class="headerlink" title="2.重新让rvm安装openssl"></a>2.重新让rvm安装openssl</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rvm pkg install openssl</span><br><span class="line"><span class="comment">#安装完openssl之后，需要重新安装ruby</span></span><br><span class="line">rvm reinstall <span class="number">2.1</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="3-_u7531_u4E8Ervm_u4F1A_u9884_u7F16_u8BD1ruby_uFF0C_u800C_u4F7F_u5F97ruby_u627E_u4E00_u4E2A_u9519_u8BEF_u7684cert_u6587_u4EF6"><a href="#3-_u7531_u4E8Ervm_u4F1A_u9884_u7F16_u8BD1ruby_uFF0C_u800C_u4F7F_u5F97ruby_u627E_u4E00_u4E2A_u9519_u8BEF_u7684cert_u6587_u4EF6" class="headerlink" title="3.由于rvm会预编译ruby，而使得ruby找一个错误的cert文件"></a>3.由于rvm会预编译ruby，而使得ruby找一个错误的cert文件</h4><p>这里主要参考了这个<a href="http://toadle.me/2015/04/16/fixing-failing-ssl-verification-with-rvm.html" target="_blank" rel="external">参考地址</a></p>
<ol>
<li>可以使用这个<a href="https://github.com/mislav/ssl-tools" target="_blank" rel="external">ssl-tools</a>来验证，是不是这个问题。</li>
<li><code>wget https://github.com/mislav/ssl-tools&amp;&amp;cdssl-tools</code></li>
<li><code>ruby doctor.rb accounts.google.com:443</code>，如果返回<strong>error code 20: unable to get local issuer certificate</strong>。那可能就是这个问题导致的。</li>
<li>解决办法就是<strong>重新安装ruby</strong><code>rvm install 2.2.0 --disable-binary</code></li>
<li><code>ruby doctor.rb accounts.google.com:443</code>，这个时候应该返回ok了。</li>
</ol>
<h4 id="4-_u6700_u540E_u7684_u529E_u6CD5"><a href="#4-_u6700_u540E_u7684_u529E_u6CD5" class="headerlink" title="4.最后的办法"></a>4.最后的办法</h4><p>第三种办法，可能最后返回ok了，但是再换一个网站，比如微信的api地址<strong>‘<a href="https://api.mch.weixin.qq.com" target="_blank" rel="external">https://api.mch.weixin.qq.com</a></strong>，可能还是继续最开的那个SSL_Connect的错误。根据问题的描述，其实就是没有合法的ca文件，因为ruby默认去<code>/usr/local/etc/cacert.pem</code>这个地址找，即便是在CentOs上面，他也是去找这个地址。</p>
<ol>
<li>所以我就用Mac上的办法，下载新的cert文件，并且做了一个引用，连接到<code>/usr/local/etc/cacert.pem</code>。但是<strong>没有用</strong>。</li>
<li>然后发现CentOs的openssl其实是安装在<code>/etc/pki/tls/</code>这个地址的。他的证书其实是<strong>/etc/pki/tls/certs/ca-bundle.crt</strong>。</li>
<li>所以在ruby请求https之前设置<code>ENV[&quot;SSL_CERT_FILE&quot;]=/etc/pki/tls/certs/ca-bundle.crt</code>，<strong>问题顺利解决。</strong></li>
</ol>
<h3 id="u8BC1_u4E66_u5230_u5E95_u7528_u54EA_u4E2A_u53C2_u8003_u94FE_u63A5"><a href="#u8BC1_u4E66_u5230_u5E95_u7528_u54EA_u4E2A_u53C2_u8003_u94FE_u63A5" class="headerlink" title="证书到底用哪个参考链接"></a>证书到底用哪个<a href="http://www.cnblogs.com/guogangj/p/4118605.html" target="_blank" rel="external">参考链接</a></h3><hr>
<h4 id="u7F16_u7801_u683C_u5F0F"><a href="#u7F16_u7801_u683C_u5F0F" class="headerlink" title="编码格式"></a>编码格式</h4><ol>
<li><strong>PEM</strong> - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码。查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout。Apache和*NIX服务器偏向于使用这种编码格式.</li>
<li><strong>DER</strong> - Distinguished Encoding Rules,打开看是二进制格式,不可读。查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout。Java和Windows服务器偏向于使用这种编码格式.</li>
</ol>
<h4 id="u6587_u4EF6_u6269_u5C55_u540D"><a href="#u6587_u4EF6_u6269_u5C55_u540D" class="headerlink" title="文件扩展名"></a>文件扩展名</h4><p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫”PEM”或者”DER”,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式.</p>
<ol>
<li>CRT</li>
<li>CER</li>
<li>KEY</li>
<li>CSR</li>
<li>PFX/P12</li>
<li>JKS</li>
</ol>
<h4 id="u8BC1_u4E66_u83B7_u53D6_u529E_u6CD5"><a href="#u8BC1_u4E66_u83B7_u53D6_u529E_u6CD5" class="headerlink" title="证书获取办法"></a>证书获取办法</h4><p><strong>向权威证书颁发机构申请证书</strong><br>用这命令生成一个csr: <code>openssl req -newkey rsa:2048 -new -nodes -keyout my.key -out my.csr</code><br>把csr交给权威证书颁发机构,权威证书颁发机构对此进行签名,完成.保留好csr,当权威证书颁发机构颁发的证书过期的时候,你还可以用同样的csr来申请新的证书,key保持不变.</p>
<p><strong>生成自签名的证书</strong><br><code>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</code><br>在生成证书的过程中会要你填一堆的东西,其实真正要填的只有Common Name,通常填写你服务器的域名,如”yourcompany.com”,或者你服务器的IP地址,其它都可以留空的.  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SSL_connect_returned_3D1_errno_3D0_state_3DSSLv3_read_server_certificate_B_3A_certificate_verify_failed"><a href="#SSL_connect_retur]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[从此过着幸福快乐的日子]]></title>
    <link href="http://yoursite.com/2016/01/28/read/read9/"/>
    <id>http://yoursite.com/2016/01/28/read/read9/</id>
    <published>2016-01-28T03:09:43.000Z</published>
    <updated>2016-01-28T03:09:43.000Z</updated>
    <content type="html"><![CDATA[<p>第十九章</p>
<p>从此过着幸福快乐的日子<br>在过去的500年间，我们见证了一连串令人惊叹的革命。地球在生态和历史上都已经整合成一个单一的领域。经济呈现指数增长，今日人类所享有的财富在过去只有可能出现在童话里。而科学和工业革命也带给我们超人类的力量，以及几乎可以说无限的能源。不仅社会秩序完全改变，政治、日常生活和人类心理也彻底改观。</p>
<p>只不过，我们真的更快乐了吗？人类在过去5世纪间积蓄的财富，是不是真的让我们找到了新的满足感？有了取之不尽的能源之后，我们是不是也得到了用之不竭的快乐？如果我们往更久之前回顾，认知革命以来这动荡不安的7万年间，世界是不是真的变得更好？到现在，阿姆斯特朗的脚印还留在无风的月球上，而3万年前也有个不知名的人，把手印留在雪维洞穴里；他们究竟谁比较快乐？如果后来的人并没有比较快乐，我们又为什么要发展农业、城市、文字、钱币、帝国、科学和工业呢？</p>
<p>历史学家很少问这样的问题。他们不去讨论秦朝人是不是比先前采集为生的人更快乐，伊斯兰兴起后，埃及人是不是对生活更满意，也不讨论欧洲帝国在非洲崩溃之后，数百万非洲人的幸福受到什么影响。然而，这些可以说是最重要的历史问题。目前大多数的意识形态和政治纲领，虽然都说要追求人类幸福，但对于幸福快乐的真正来源为何却还是不明就里。民族主义者会说政治自决能够带来快乐。共产主义者会说无产阶级专政能够带来快乐。资本主义者会说自由市场能够创造经济成长，能够教导人类自立自强、积极进取，所以能够为最多人带来最大的快乐。</p>
<p>如果经过仔细研究，结果全盘推翻了这些人的假设，情况会如何？如果经济成长和自立自强并不会让人更快乐，又何必将资本主义奉如圭臬？如果研究显示大型帝国的属民通常比独立国家的公民更幸福，例如假设阿尔及利亚人被法国统治时比较快乐，那我们该怎么办？这样一来，要怎样评价去殖民化，民族自决的价值又该怎么说？</p>
<p>这些都还只是假设，但原因就是历史学家至今还在回避提出这些问题，更不用说什么时候才会找出答案了。学者研究历史，但只是点出了一切的情形，像是政治、社会、经济、性别、疾病、性、食物、服装，而很少有人提到这些究竟如何影响人类的幸福。这是我们对于历史理解的最大空白之处。</p>
<p>虽然很少有人提出对于快乐的长期纵观研究，但几乎所有学者和大众心中都多少有些模糊的定见。常有人认为，历史不断进展，人类的能力也不断增加。而一般来说，我们会运用能力来减轻痛苦、满足愿望，所以我们想必过得比中世纪的祖宗们来得快乐，而他们又一定比石器时代的狩猎采集者来得开心。</p>
<p>然而，这种进步论却可能有些问题。正如我们所见，新的倾向、行为和技能不一定会让生活过得更好。像是人类在农业革命学会了农耕畜牧，提升了人类整体形塑环境的力量，但对许多个人而言，生活反而变得更为艰苦。农民的工作比起狩猎采集者更为繁重，而且取得的食物种类变少、营养较不均衡，染上疾病与受到剥削的可能性都大增。同样，欧洲帝国开枝散叶，同时将各种概念、科技和农作物向四方传播，而且还打开了商业的新道路，大大提升了人类整体的力量；但对于数百万的非洲人、美洲原住民和澳大利亚原住民来说，这几乎完全算不上是好事。历史一再证实，人类有了权力或能力就可能滥用，所以要说能力越高就越幸福，看来实在有些天真。</p>
<p>有些反对这种观点的人，就会站在完全相反的立场。他们认为人的能力和幸福之间正好是负相关。他们认为权力使人腐化，人类有了越来越多的能力之后，创造出来的是个冷漠的机器世界，并不符合人类实际的需求。人类的演化，是让我们的思想和身体符合狩猎采集生活。因此，无论是转型成农业还是后来再转型到工业，都是让我们堕入不自然的生活方式，让我们无法完全实现基因中固有的倾向和本能，也就不可能满足我们最深切的渴望。就算是都市中产阶级，过着舒适的生活，生活中却再也没有什么比得上狩猎采集者猎到长毛象那种兴奋和纯粹的快乐。每次出现新发明，只是让我们与伊甸园又离得更远。</p>
<p>然而，如果认为每个发明都必然带来阴影，似乎也流于武断，就像是深信历史进步无法避免一样。或许，虽然我们与内心那个狩猎采集者越来越远，但并不全然是件坏事。举例来说，在过去的两个世纪里，现代医学让儿童死亡率从33%降到了5%以下。对于那些本来无法存活的孩童或是他们的家人朋友来说，难道这不是让他们的幸福感大增了吗？</p>
<p>还有一种更微妙的立场，就是把历史分成前后两段讨论。在科学革命之前，能力还不一定能带来幸福。中世纪的农民确实可能过得比狩猎采集者更为悲惨。然而在过去几世纪间，人类已经学会更聪明地使用能力。现代医学的胜利只是其中一个例子，其他同样震古烁今的成就还包括让暴力事件大幅降低，国际战争几乎已经烟消云散，而且大规模饥荒也几乎不再发生。</p>
<p>然而，这种说法其实也流于过度简化。首先，这里只根据了非常小的时间抽样，就做出了乐观的评估。大多数人类是要到1850年才开始享受到现代医学的果实，而且儿童死亡率急遽下降也是20世纪才出现的现象。至于大规模饥荒，一直到20世纪中叶都还是大问题。国际战争一直要到1945年后才变得罕见，而且一大原因还在于核子末日这项新的威胁。因此，虽然说过去几十年似乎是人类前所未有的黄金年代，但想知道这究竟代表历史潮流已经有了根本转变，又或只是昙花一现的美好，目前还言之过早。而且，要对现代性加以评价的时候，实在很难避开21世纪西方中产阶级的观点。但我们不该忘记，对于19世纪韦尔斯的煤矿矿工、中国鸦片烟的瘾君子，又或是塔斯马尼亚岛的原住民，观点必然相当不同。楚格尼尼的重要性，绝对不下于《辛普森一家》里的老爸霍默。</p>
<p>其次，就算是过去半个世纪这短暂的黄金年代，也可能已经播下未来灾难的种子。在过去几十年间，人类用了无数新方法干扰地球的生态平衡，而且看来可能后患无穷。有大量证据显示，我们纵情消费而不知节制，正在摧毁人类赖以繁荣的根基。</p>
<p>最后一点，虽然智人确实取得了空前的成就，或许值得沾沾自喜，但代价就是赔上几乎所有其他动物的命运。人类现在取得许多物资和资源，让我们得以免受疾病和饥荒之苦，但我们是牺牲了实验室里的猴子、农场里的奶牛、输送带上的鸡，才换来这些让我们扬扬得意的成就。在过去两个世纪间，有数百亿动物遭到现代工业制度的剥削，而且其冷酷程度是整个地球史上前所未有的。就算那些动物保护团体指出的现象只有1/10是事实，现代农业产业也已经是史上最大规模、最残暴的罪行。要评估全球幸福程度的时候，只看上层阶级、只看欧洲人、只看男性，都是巨大的错误。而且，或许只看人类也同样有失公允。</p>
<p>快乐该如何计算？</p>
<p>到目前为止，我们讨论快乐的时候，似乎都认为这是由各种实质因素（例如健康、饮食和财富）建构出的产品。如果某个人更有钱、更健康，就一定也更快乐。但这一切真的这么理所当然吗？几千年来，早就有哲学家、神职人员和诗人反复思索快乐的本质，而且许多人都认为，社会、伦理和心灵因素对幸福感的影响，绝对不下于其他物质条件。有没有可能，虽然富裕社会里的人类荷包满满，却因为人际疏离和生活没有意义而深感痛苦？有没有可能，虽然我们的老祖宗生活条件较差，但因为与家人朋友、宗教和自然关系紧密，所以反而生活得比较满足？</p>
<p>近几十年来，心理学家和生物学家开始用科学方法来研究快乐的根源。究竟让人感到幸福快乐的是金钱、家庭、基因，还是美德？首先，得先定义要测量的对象。一般对于快乐普遍接受的定义是“主观感到幸福”。依照这个观点，快乐是种个人内在的感受，可能是因为当下直接的快感，或是对于长期生活方式的满足。而如果这是内部的感受，又要怎样才能由外部测量呢？一种做法是直接询问受试者，问问他们的感受如何。所以心理学家和生物学家就请受试者填写关于幸福感的问卷，再计算相关统计结果。</p>
<p>一般来说，关于主观幸福感的问卷会列出各种叙述，再请受试者以0到10加以评分，这些叙述例如“我对自己现在的样子感到满意”，“我觉得活到现在非常值得”，“我对未来感到乐观”，“生活是美好的”。接着研究人员就会计算所有分数，算出受试者整体的主观幸福感程度。</p>
<p>这样的问卷能够用来了解快乐有哪些客观因素。举例来说，我们可以研究比较1000位年收入10万美元的人，以及1000位年收入5万美元的人。假设前者的平均主观幸福感有8.7分，而后者平均只有7.3分，研究就能合理推论财富与主观幸福感是正相关的。说得白话一点，也就是金钱会带来快乐。用同样的方法，我们也可以研究在民主国家的人是不是真的比独裁统治下的人更幸福，或是结婚的人是否比单身、离婚或丧偶的人来得快乐。</p>
<p>有了这些数据，就能为历史学家提供比较基础，让他们再用过去关于财富、政治自由度和离婚率的资料来推论。举例来说，假设民主国家的人比独裁国家的人快乐、已婚的人比离婚的人快乐，历史学家就能主张：过去几十年间，民主化进程让人类的幸福感提高，但离婚率上升则有反效果。</p>
<p>当然，这种方式也还有改进的空间，但在更好的方式出现之前，这些发现也值得参考。</p>
<p>目前有一项耐人寻味的结论：金钱确实会带来快乐，但是有一定限度，超过限度之后的效果就不那么明显。所以，对于在经济阶层底层的人来说，确实是钱越多就越快乐。如果你就是一个年收入只有一万多元的清洁工，忽然中了一张两百万元的彩票，主观幸福感可能就会维持好一段时间的高档状态。这下，你可以让孩子吃饱穿暖，而且不用担心欠债越滚越多。然而，如果你本来就是个年薪几百万元的外商高阶主管，就算中的是两三千万元的乐透，主观幸福感也可能只会提高几个星期。根据实证研究，这几乎肯定不会对你的长期感受有太大的影响。你或许会买台炫一点的车，搬到大一些的豪宅，喝些更顶级的红酒，但很快就会觉得这一切都普普通通，没什么新鲜感。</p>
<p>另一项有趣的发现是疾病会短期降低人的幸福感，但除非病情不断恶化，或是症状带有持续、让人无力的疼痛，否则疾病并不会造成长期的不快。像是如果有人被诊断患有像糖尿病之类的慢性疾病，确实是会让人郁闷一阵子，但只要病情没有恶化，他们就能调适过来，觉得自己和一般人的快乐程度也没什么差别。让我们假设一下，有一对中产阶级的双胞胎露西和路克，一起参与了一项主观幸福感的研究。早上做完研究之后，露西开车回家，却被一辆大巴士撞上，让她多处骨折，有一只脚永远行动不便。但就在救援人员把她拉出车子的时候，路克打电话来，兴奋大叫他中了千万美元的乐透大奖。于是，在两年后，她会是个瘸子，而他会比现在更为有钱。但是如果心理学家再去做后续追踪研究，他们两个人的幸福感与事件发生当天早上的结果并不会有多大不同。</p>
<p>目前看来，对快乐与否的影响，家庭和社群要比金钱和健康来得重要。那些家庭关系紧密良好、社群互相扶持帮助的人，明显比较快乐。而那些家庭机能失调、一直无法融入某个社群的人则明显比较不快乐。而其中，婚姻又是特别重要的一项因素。多项重复研究发现，婚姻美好与感觉快乐，以及婚姻不协调与感觉痛苦，分别都呈现高度相关。而且，不论经济状况或是身体健康如何，情况都是如此。所以，就算是贫穷而有病在身的人，如果身边有爱他的另一半、爱他的家人、愿意支持他的社群，他就可能比一个孤单无伴的亿万富翁感觉更幸福快乐。（当然，前提是这个人不能真的穷到无法生活，而他的疾病也不会不断恶化或让他持续感受疼痛。）</p>
<p>这样一来，我们就得考虑一种可能性。虽然过去两个世纪间人类在物质条件上有了大幅改善，但因为家庭崩溃、社会失调，所以两者的作用很可能互相抵消。如果真是如此，现在的人并不见得比1800年更快乐。甚至是我们现在如此看重的“自由”，也可能是让我们不那么快乐的原因。虽然我们可以自己选择另一半、选择朋友、选择邻居，但他们也可以选择离开我们。现代社会每个人都拥有了前所未有的自由，能够决定自己要走哪条路，但也让我们越来越难真正信守承诺、不离不弃。于是，社群和家庭的凝聚力下降而解体，这个世界让我们感到越来越孤独。</p>
<p>然而，关于快乐最重要的一项发现在于：快乐并不在于任何像是财富、健康甚至社群之类的客观条件，而在于客观条件和主观期望之间是否相符。如果你想要一辆牛车，而你也得到了一辆牛车，你就会感到满足。如果你想要一台全新的法拉利，而得到的只是一台二手的菲亚特，你就感觉不开心。正是因为如此，不管是中乐透还是出车祸，对人们的幸福感并不会有长期影响。一切顺利的时候，我们的期望跟着膨胀，于是就算客观条件其实改善了，我们还是可能不满意。而在一切不顺的时候，我们的期望也变得保守，于是就算又碰上其他的麻烦，很可能心情也不会更低落。</p>
<p>你可能会觉得，这一切不就是老生常谈吗？就算没有这群心理学家、什么问卷都没做，我们也早就知道了。就像千年之前，先知、诗人和哲学家也早就说过，重要的是要知足，而不是一直想要得到更多。只不过，看到现代研究用了这么多数字和图表，最后得出和古人相同的结论，其实感觉还是不错。</p>
<hr>
<p>正因为人类的期望如此重要，想要了解快乐这件事的历史，就不能不检视各种期望的影响。如果快乐只受客观条件影响（例如财富、健康和社会关系），要谈快乐的历史也就相对容易。但我们知道快乐有赖于主观的期望之后，历史学家的任务也就更为艰巨。对现代人来说，虽然有各种镇静剂和止痛药任我们使用，但我们越来越期望能得到舒适和快感，也越来越不能忍受不便和不适。结果就是我们感受到的痛苦程度可能还高于我们的先人。</p>
<p>这种想法可能很难理解。这里的问题在于，我们的心理深深埋藏着一个推理的谬误。在我们试着猜测或想象其他人有多快乐的时候（可能是现在或过去的人），我们总是想要设身处地去想想自己在那个情况下会如何感受。但这么一来，我们是把自己的期望放到了别人的物质条件上，结果当然就会失准。现代社会丰饶富裕，我们很习惯每天都要洗澡更衣。但在中世纪，农民好几个月都不用洗澡，而且也很少会换衣服。对现代人来说，光是想到要这样生活，就觉得真是臭到要命、脏到骨头里，完全无法接受。只不过，中世纪的农民似乎一点都不介意。这种衣服长时间没洗没换的触感和气味，他们早就已经习惯。他们并不是因为太穷而无法负担换洗衣服，而是压根儿就没有这种期望。于是，至少就衣服这一件事来说，他们其实很满足了。</p>
<p>如果真的想想，这其实也不足为奇。毕竟，像是人类的表亲黑猩猩也很少洗澡，更从来没换过衣服。而我们的宠物猫狗也不是天天洗澡更衣，但我们也不会因此就讨厌它们，而是照样拍拍它们、抱抱它们，甚至还抱起来亲。就算是在富裕的社会里，小孩通常也不喜欢洗澡，得花上好几年的教育和管教，才能够养成这种理论上应该很舒服的习惯。一切都只是期望的问题而已。</p>
<p>如果说快乐要由期望来决定，那么我们社会的两大支柱（大众媒体和广告业）很有可能正在不知不觉地让全球越来越不开心。假设现在是5000年前，而你是一个住在小村子里的18岁年轻人。这时全村大概只有50个人左右，老的老、小的小，身上不是伤痕皱纹遍布，就是稚气未脱，很有可能就会让你觉得自己真是好看，因而满是自信。但如果你是活在今日的青少年，觉得自己长相不怎么样的可能性就要高多了。就算同一个学校的人都输你一截，你也不会因此就感觉开心。因为你在心里比较的对象是那些明星、运动员和超级名模，你整天都会在电视、脸书和巨型广告牌上看到他们。</p>
<p>有没有可能，第三世界国家之所以会对生活不满，不只是因为贫穷、疾病、腐败和政治压迫，也是因为他们看到了第一世界国家的生活标准？平均来说，埃及人在前总统穆巴拉克的统治下，死于饥饿、瘟疫或暴力的可能性远低于在古代法老拉美西斯二世（Ramses II）或埃及艳后克丽奥佩特拉统治的时期。对大多数埃及人而言，这根本是有史以来物质条件最好的时刻。在2011年，理论上他们应该要在大街上跳舞庆祝，感谢安拉赐给他们这一切的财富才对。然而，他们反而是满怀愤怒，起身推翻了穆巴拉克。原因就在于，他们比较的对象不是古代的法老王，而是同时代的美国总统奥巴马。</p>
<p>这么一来，就算是长生不老也可能会导致不满。假设科学找出了能够医治所有疾疾的万灵丹，加上有效抗老疗程和再生治疗，能够让人永葆青春，那么，最可能发生的事，就是整个世界感到空前的愤怒和焦虑。</p>
<p>那些无力负担这些医学奇迹的人（也就是绝大多数人），一定会愤怒到无以复加。纵观历史，穷人和受压迫者之所以还能自我安慰，就是因为死亡是唯一完全公平的事。不论再富有、权力再大，人也难逃一死。光是想到自己得死，但有钱人居然能长生不老，就会让穷人怒火中烧、不可遏抑。</p>
<p>而且，就算是那极少数负担得起的，也不是从此无忧无虑。他们有太多需要担心的了。虽然新疗法可以延长寿命、常葆青春，但一旦真的死亡，仍然是无可救药。这么一来，原本自己和所爱的人应该能够永远在一起的，但就得更需要避免意外，不能被卡车撞到，也不能被恐怖分子炸成碎片！像这些理论上可以达到长生的人，很有可能一丁点儿的风险也不愿意承担，而且一旦真的失去配偶、子女或密友，他们感受到的痛苦更会高到难以想象。</p>
<p>快乐的化学成分</p>
<p>研究快乐的时候，社会科学家做的是发问卷调查主观幸福感，再将结果与财富和政治自由等社会经济因素结合。至于生物学家的做法，虽然也用一样的问卷，但结合的是生化和遗传因素。他们得出的研究结果令人大感震惊。</p>
<p>生物学家认为，我们的心理和情感世界其实是由经过数百万年演化的生化机制所形塑。所有的心理状态（包括主观幸福感）并不是由外在因素（例如工资、社会关系或政治权利）来决定，而是由神经、神经元、突触和各种生化物质（例如血清素、多巴胺和催产素）构成的复杂系统而定。</p>
<p>所以，不管是中了乐透、买了房子、升官发财，或是找到了真正的爱情，都不是真正让我们快乐的原因。我们能够快乐的唯一原因，就是身体内发出快感的感官感受。所以，那些刚中了乐透、刚找到真爱的人，之所以会快乐地跳了起来，并不是因为真的对金钱或情人有所反应，而是因为血液中开始流过各种激素，脑中也开始闪现着小小的电流。</p>
<p>但很遗憾，虽然我们总是想在人间创造出快乐的天堂，但人体的内部生化系统似乎就是对快乐多有限制，只会维持在恒定的水平。快乐这件事不适用于自然选择的原则，如果是个快乐的孤独隐士，对上两位整天焦虑的爸妈，前者会绝种，而后者却能把基因再传下去。快乐或痛苦在演化过程里的作用，就只在于鼓励或阻挡生存和繁衍。所以也不难想象，人类演化的结果，就是不会太快乐，也不会太痛苦。我们会短暂感受到快感，但不会永远持续。迟早快感会消退，让我们再次感受到痛苦。</p>
<p>举例来说，演化就把快感当成奖赏，鼓励男性和女性发生性行为、将自己的基因传下去。如果性交没有高潮，大概很多男性就不会那么热衷。但同时，演化也确保高潮得迅速退去。如果性高潮永续不退，可以想象男性会非常开心，但连觅食的动力都没了，最后死于饥饿，而且也不会有兴趣再去找下一位能够繁衍后代的女性。</p>
<p>有学者认为，人类的生化机制就像是个恒温空调系统，不管是严寒还是酷暑都要想办法保持恒定。虽然遇到某些事件会让温度暂时有波动，但最后总是会控制调整回到原来设定的温度。</p>
<p>有些空调系统会设定在25℃，也有的会设在20℃。至于人类的快乐空调系统，也是人人设定有所不同。如果说快乐的程度是由1到10分，有些人的生化机制天生开朗，就会允许自己的情绪在6到10分之间来回，大约稳定在8分附近。像这样的人，就算住在一个冷漠的大城市，碰上金融市场崩溃而丧失了所有积蓄，还被诊断患有糖尿病，还是会相当愉快乐观。也有些人，就是倒霉有着天生阴郁的生化机制，情绪在3到7分之间来回，大约稳定在5分附近。像这样的人，就算得到了密切社群的支持，中了几千万的乐透，健康得可以当奥运选手，还是会相当忧郁悲观。事实上，如果是这位天生忧郁的朋友，就算她早上中了几十亿的乐透，中午又同时找到了治愈艾滋病和癌症的方法，下午帮忙让以色列和巴勒斯坦达成和平，晚上又终于和失散多年的孩子团聚，她感受到的快乐程度仍然顶多就是7分而已。不论如何，她的大脑就是没办法让她乐不可支。</p>
<p>想想你的家人、朋友。是不是有些人，不论发生多糟的事，还是能保持愉快？是不是也有些人，不管得到了多大的恩赐，还是一直郁郁寡欢？我们常认为，只要换个工作、找到老公、买了新车、写完小说，或是付完房贷，做完诸如此类的事，就能让自己快乐得不得了。然而，等我们真正达到这些期望的时候，却没有感觉真的比较快乐。毕竟，买车和写小说并不会改变我们的生化机制。虽然可以有短暂的刺激，但很快就会回到原点。</p>
<hr>
<p>然而，先前的心理学及社会学研究也得出了一些结论（例如平均而言，已婚的人比单身的人更快乐），生物学对此要怎么解释？首先，心理学和社会学的研究只证明了相关性，但是真正的因果方向有可能和研究人员的假设正好相反。确实，已婚的人比单身和离婚的人更快乐，但这不一定代表是婚姻带来了快乐，也有可能是快乐带来了婚姻。或者更准确来说，是血清素、多巴胺和催产素带来并维系了婚姻。那些生化机制天生开朗的人，一般来说都会是快乐和满足的。而这样的人会是比较理想的另一半，所以他们结婚的概率也比较高。而且，和快乐满足的另一半相处，绝对比和郁闷不满的另一半相处来得容易，所以他们也比较不容易离婚。所以，确实已婚的人平均来说比单身的人更快乐，但如果是个生化机制天生忧郁的女生，就算真的找到好老公，也不一定就会比较快乐。</p>
<p>此外，大多数生物学家也不是完全只看生物这一套。虽然他们主张快乐“主要”是取决于生化机制，但也同意心理学和社会学因素同样有其影响力。毕竟，我们这套快乐空调系统虽然有上下限，但在这个范围里还是可以活动活动。虽然要超出边界的可能性微乎其微，但结婚和离婚却能影响心情在这个范围内的移动方向。那些平均就是只有5分的人，永远不会忽然在大街上开心地跳起舞来。但如果嫁了好老公，就能让她三不五时感受到7分的愉悦，而更能避开3分的沮丧。</p>
<p>如果我们接受了生物学对于快乐的理论，历史这个学科的重要性就大减；毕竟，大多数的历史事件并不会对我们的生化机制有什么影响。虽然历史可以改变那些影响血清素分泌的外界刺激，但却无法改变最后的浓度，所以也就是无法让人变得更快乐。</p>
<p>让我们用古代中国农夫和现代香港企业家为例。假设我们这位古代农夫住在没有暖气的小土屋里，旁边就是猪圈；企业家住在拥有各种最新科技的豪宅，窗口就能俯瞰南海的浩瀚海景。直觉上，我们会觉得企业家想必比农民更快乐。然而，快乐是在脑子里决定的，而大脑根本不管土屋或豪宅、猪圈或南海，只管血清素的浓度。所以，农夫盖完了他的土屋之后，大脑神经元分泌血清素，让浓度到达X。而在现代，企业家还完最后一笔豪宅房贷之后，大脑神经元也分泌出差不多数量的血清素，并且也让浓度差不多到达X。对大脑来说，它完全不知道豪宅要比土屋舒适太多，它只知道现在的血清素浓度是X。所以，这位企业家快乐的程度，并不会比那位足以当他高高高高高祖父的农夫来得高。</p>
<p>不仅对个人生活是如此，就算是众人的事件也不例外。我们以秦朝统一天下为例。秦朝统一天下之后，彻底改变了中国的政治、文化、社会和经济。但这一切都并未改变中国人的生化机制。因此，虽然统一让政治、社会、意识形态和经济都起了翻天覆地的变化，但对于中国人的快乐并没有多大影响。那些生化机制天生开朗的人，不管是活在战国时代，或是秦汉时代，都会一样快乐。但那些生化机制天生忧郁的人，过去总是在抱怨战国诸侯，现在也只是转而抱怨秦朝天子，并不会有什么改变。</p>
<p>但这么说来，究竟把中国统一有什么好处？如果没办法让人更快乐，又何必要有这么多的混乱、恐惧、流血和战争？像是生物学家就绝对不会攻向巴士底狱。就算有人认为这些政治革命或社会改革会让他们开心，但到头来人们总是一次又一次被生化机制玩弄于股掌。</p>
<p>历史上，只有一项发展真正有重大意义。现在我们终于意识到，快乐的关键就在于生化系统，因此我们就不用再浪费时间处理政治和社会改革、叛乱和意识形态，而是开始全力研究唯一能真正让我们快乐的方法：操纵人类的生化机制。如果我们投入几十亿美元来了解我们的脑部化学，并推出适当的疗法，我们就能在无须发动任何革命的情况下，让人过得远比以前的人快乐。举例来说，百忧解（Prozac）之所以让人不再沮丧，靠的就不是对任何体制的改革，而只是提高血清素的浓度。</p>
<p>讲到这套生物学理论，最能抓到精髓的就是著名的新世纪（New Age）口号：“快乐来自内心。”金钱、社会地位、整形手术、豪宅、握有大权的职位，这些都不会给你带来快乐。想要有长期的快乐，只能靠血清素、多巴胺和催产素。</p>
<p>112</p>
<p>1932年，正值经济大萧条的时代，赫胥黎出版了反乌托邦小说《美丽新世界》，书中将“快乐”当成最重要的价值，而且政治的基础不是警方、不是选举，而是精神病的药物。每天，所有人都要服用苏麻（soma，一种合成药物），这能让他们感到快乐，而且不影响生产力和工作。书中的政府是世界一体、统治全球，而且所有人不论生活环境如何，都对这感到无比满足。也因此，政府完全不用担心会爆发战争、革命、罢工或示威游行等威胁。这下，赫胥黎想象中的未来可能还比奥韦尔的《1984》更为棘手。赫胥黎的世界似乎对大多数读者来说都非常可怕，但又很难解释原因。所有人永远都是快乐的，这到底能有什么问题？</p>
<p>生命的意义</p>
<p>赫胥黎笔下这个令人毛骨悚然的世界，背后有一项基本生物学假设：“快乐等于快感”。在他看来，快乐就是身体感觉到快感。因为我们的生化机制限制了这些快感的程度和时间，唯一能够让人长时间、高强度感受到快乐的方法，就是操纵这个生化机制。</p>
<p>然而，这种对于快乐的定义还是受到一些学者质疑。在一项著名的研究中，诺贝尔经济学奖得主丹尼尔·卡尼曼（Daniel Kahneman）请受试者描述自己一般上班日的全天行程，再分段一一评估他们究竟有多喜欢或讨厌这些时刻。他发现，大多数人对生活的看法其实会有所矛盾。让我们以养小孩为例。卡尼曼发现，如果真要计算哪些时刻令人开心，哪些时候叫人无聊，就单纯的数字来说，养小孩可说是非常不愉快的事。很多时候，养小孩就是要换尿布、洗碗、处理他们的哭闹和脾气，这些都算是没人想做的苦差事。然而，大多数家长都说孩子是他们快乐的主要来源。难道这些人都是脑子有问题吗？</p>
<p>当然，这是一种可能。但还有另一种可能：调查结果让我们知道，快乐不只是“愉快的时刻多于痛苦的时刻”这么简单。相反，快乐要看的是某人生命的整体；生命整体有意义、有价值，就能得到快乐。快乐还有重要的认知和道德成分。价值观不同，想法也就可能完全不同，例如有人觉得养小孩就像是个悲惨的奴隶，得侍候一个独裁的小霸王，但也有人觉得自己真是满怀着爱，正在培育一个新的生命。113正如尼采所言，只要有了活下去的理由，几乎什么都能够忍受。生活有意义，就算在困境中也能甘之如饴；生活无意义，就算在顺境中也度日如年。</p>
<p>不管任何文化、任何时代的人，身体感受快感和痛苦的机制都一样，然而他们对生活经验所赋予的意义却可能大不相同。如果真是如此，快乐的历史很可能远比生物学家想象的要来得动荡不安。这个结论并不一定是站在现代这边。如果我们将生活切成以一分钟为单位来评估当时是否幸福快乐，中世纪的人肯定看来相当悲惨。然而，如果他们相信死后可以得到永恒的祝福，很有可能就会认为生活真是充满了价值和意义；相对而言，现代世俗子民如果不信这一套，就觉得人到最后就只有死亡，迟早会被遗忘，没了任何意义。如果用主观幸福感问卷问道“你对生活整体是否满意”，中世纪的人很可能得分会相当高。</p>
<p>所以，我们的中世纪祖先会感到快乐，就只是因为他们有着对来世的集体错觉，因而感觉生命充满意义吗？没错！只要没人去戳破他们的幻想，又为什么要不开心呢？从我们所知的纯粹科学角度来看，人类的生命本来就完全没有意义。人类只是在没有特定目标的演化过程中，盲目产生的结果。人类的行动没有什么神圣的整体计划，而且如果整个地球明天早上就爆炸消失，整个宇宙很可能还是一样这么继续运行下去。到目前为止，我们还是不能排除掉人类主观的因素。但这也就是说，我们对生活所赋予的任何意义，其实都只是错觉。不管是中世纪那种超脱凡世的生活意义，或是现代人文主义、民族主义和资本主义，本质上都完全相同，没有高下之别。像是可能有科学家觉得自己增加了人类的知识，所以他的生命有意义；有士兵觉得他保卫自己的国家，所以他的生命有意义。不论是创业者想要开新公司，或是中世纪的人想要读经、参与圣战、兴建新庙，他们从中感受到的意义，都只是错觉与幻想。</p>
<p>这么说来，所谓的快乐，很可能只是让个人对意义的错觉和现行的集体错觉达成同步而已。只要我自己的想法能和身边的人的想法达成一致，我就能说服自己、觉得自己的生命有意义，而且也能从这个信念中得到快乐。</p>
<p>这个结论听起来似乎很叫人难过。难道快乐真的就只是种自我的欺骗吗？</p>
<p>认识你自己</p>
<p>如果快乐是在于感受快感，想要更快乐，就得操纵我们的生化系统。如果快乐是在于觉得生命有意义，想要更快乐，就得要骗自己骗得更彻底。还有没有第三种可能呢？</p>
<p>以上两种论点都有一个共同假设：快乐是一种主观感受（不管是感官的快感还是生命有意义），而想要判断快不快乐，靠的就是直接问他们的感受。很多人可能觉得这很合逻辑，但这正是现代自由主义当道而成的结果。自由主义将“个人主观感受”奉若圭臬，认为这些感受正是权威最根本的源头。无论是好坏、美丑、应不应为，都是由每个人的感觉来确定。</p>
<p>自由主义政治的基本想法，是认为选民个人最知道好坏，我们没有必要由政府老大哥来告诉人民何者为善、何者为恶。自由主义经济学的基本想法，是客户永远是对的。自由主义艺术的基本想法，是各花入各眼，看的人觉得美就是美。自由主义的学校和大学，叫学生要为自己多想想。广告叫我们：“做就对了！”就连动作片、舞台剧、八点档、小说和流行歌，都不断在洗脑着：“忠于自我”、“倾听你自己”、“顺从你的渴望”。对于这种观点，卢梭的说法称得上是经典：“我觉得好的，就是好的。我觉得坏的，就是坏的。”</p>
<p>如果我们从小到大不断被灌输这些口号，就很可能相信快乐是种主观的感受，而是否快乐当然就是每个人自己最清楚。然而，这不过是自由主义独有的一个观点而已。历史上大多数的宗教和意识形态认为，关于善、关于美、关于何事应为，都有客观的标准。在这些宗教和意识形态看来，一般人自己的感觉和偏好可能并不可信。从老子到苏格拉底，哲学家不断告诫人们：“认识你自己！”但言下之意也就是一般人并不知道自己真实的自我，也因此很可能忽略了真正的快乐。弗洛伊德很可能也会这么想。 [2]</p>
<p>基督教神学家应该也会同意这种说法。不管是圣保罗或是圣奥古斯丁都心知肚明，如果让人自己选择的话，大多数人都宁愿把时间用来做爱，而不是向上帝祈祷。这种选择绝对是顺从你的渴望，但这意思是想要快乐就该去做爱吗？圣保罗和圣奥古斯丁可绝对不会这么说。对他们而言，这只证明了人类本来就有罪，而且容易受到撒旦的诱惑。从基督教的角度来看，大多数人都多多少少沉溺在类似海洛因成瘾的情境里。假设有个心理学家，想调查吸毒者的快乐指数。经过调查之后，他发现这些吸毒者全部志同道合，所有人都说在吸毒的时候最快乐了。请问这位心理学家是不是该发表一份文件，告诉大家想快乐就该去吸毒？</p>
<p>除了基督教以外，还有其他人也认为主观感受不该是最大重点。至少在讲到主观感受的价值时，甚至达尔文和英国演化生物学家道金斯（Dawkins）都有部分观点会与圣保罗和圣奥古斯丁相同。根据道金斯《自私的基因》理论，正如同其他动物，人类在自然选择的影响下，就算对个人不利，他们也会选择要让基因继续流传下去。大多数男性一生劳苦、终日烦忧、竞争激烈、需要不断战斗，就是没办法享受一下平静的幸福；但这是因为DNA操纵着他们，要他们为它自私的目的做牛做马。DNA就像撒旦，用一些稍纵即逝的快乐作为引诱，令人为之臣服。</p>
<p>正因如此，大多数宗教和哲学看待快乐的方式，都与自由主义非常不同。114最看重快乐这个问题的，就是佛教。两千五百多年来，佛教有系统地研究了快乐的本质和成因；正因如此，最近有越来越多科学团体开始研究佛教哲学和冥想。佛教认为，快乐既不是主观感受到愉悦，也不是主观觉得生命有意义，反而是在于放下追求主观感受这件事。</p>
<p>根据佛教的观点，大多数人太看重自己的感受，以为快感就是快乐，不愉悦的感受就是受苦。于是，人类就渴望能有快感，并希望避免不愉悦的感受。然而，这是大大的误解。事实是，人类的主观感受没有任何实质或意义。主观感受就只是一种电光石火的波动，每个瞬间都在改变，就像海浪一样。不论你感受到的是快感或不快，觉得生命是否有着意义，这都只是一瞬间的波动而已。</p>
<p>如果我们太看重这些内部的波动，就会变得太过执迷，心灵也就焦躁不安、感到不满。每次碰上不快，就感觉受苦。而且就算已经得到快感，因为我们还希望快感能够增强或是害怕快感将会减弱，所以心里还是不能感到满足。追求这些主观感受十分耗费心神，而且终是徒劳，只是让我们受制于追求本身。因此，苦的根源既不在于感到悲伤或疼痛，也不在于感觉一切没有意义。苦真正的根源就在于“追求”主观感受这件事，不管追求的是什么，都会让人陷入持续的紧张、困惑和不满之中。</p>
<p>人想要离苦得乐，就必须了解自己所有的主观感受都只是一瞬间的波动，而且别再追求某种感受。如此一来，虽然感受疼痛，但不再感到悲惨；虽然愉悦，但不再干扰心灵的平静。于是，心灵变得一片澄明、自在。这样产生的心灵平静力量强大，那些穷极一生疯狂追求愉悦心情的人完全难以想象。这就像是有人已经在海滩上站了数十年，总是想抓住“好的海浪”，让这些海浪永远留下来，同时又想躲开某些“坏的海浪”，希望这些海浪永远别靠近。就这样一天又一天，这个人站在海滩上徒劳无功，被自己累得几近发疯。最后终于气力用尽，瘫坐在海滩上，让海浪就这样自由来去。忽然发现，这样多么平静啊！</p>
<p>这种想法与现代自由主义的文化完全格格不入，所以等到西方的新世纪运动碰上佛教教义，就想用自由主义的方式加以解释，结果意思却是完全相反。新时代教派常常主张：“快乐不在于外在条件，而只在于我们内心的感受。我们应该别再追求像是财富、地位之类的外在成就，而是要多接触自己内心的情感。”或者说得简单一点，就是“快乐来自内心”。这与生物学家的说法不谋而合，但与佛教的说法几乎正是背道而驰。</p>
<p>佛教与现代生物学和新世纪运动的相同点，在于都认定快乐不在于外在条件。但佛教更重要也更深刻的见解在于，真正的快乐也不在于我们的主观感受。我们如果越强调主观感受，反而就越感到苦。佛教给我们的建议是，除了别再追求外在成就之外，同时也别再追求那些感觉良好的心里感受了。</p>
<hr>
<p>总结来说，我们现在会使用主观幸福感问卷，希望找出来我们主观认定什么时候有幸福感，而且认为找到特定的情绪状态就是找到了快乐。但相反的是，许多传统哲学和宗教（如佛教）则认为，快乐的关键在于追求真我、真正了解自己。大多数人都以为自己的感觉、想法、好恶就组成了自己，但这是一大错误。他们感觉愤怒的时候，心里想“我很生气，这是我的愤怒”。于是这一辈子做的，都是想要避开某些感受并追求另外某些感受。但他们从来没有发现，苦真正的来源不在于感受本身，而是对感受的不断追求。</p>
<p>如果真是如此，我们过去对于快乐这件事的历史认知，就有可能都是错的。或许，究竟期望是否得到满足、感受是否快活都不是重点，真正重要的问题在于人类是否了解自己。我们有什么证据，证明今天的人比起远古的采集者或中世纪的农民更了解自己呢？</p>
<p>学者一直到几年前才开始研究快乐这件事的历史，而且现在还停留在最初的阶段，正在做出初步的假设、寻找适当的研究方法。这场讨论才刚刚起步，要得出确切的结论还为时过早。最重要的，是要了解各种不同的研究方法，并且提出正确的问题。</p>
<p>大多数的历史书籍强调的都是伟大的思想家、英勇的战士、慈爱的圣人，以及创造力丰沛的艺术家。这些书籍对于社会结构的建立和瓦解、帝国的兴衰、科技的发明和传播，可说是知无不言、言无不尽。但对于这一切究竟怎么为个人带来快乐或造成痛苦，却是只字未提。这是我们对于历史理解的最大空白之处。而且，现在该是补上的时候了。</p>
<p> [2]　心理学要研究主观幸福感，靠的是受试者要能够正确判断自己的快乐程度；但矛盾的是，之所以会出现心理学，正是因为人类并不正真了解自己，有时候需要靠着专业人士的帮助，以避免自我毁灭的行为。</p>
<p>第二十章</p>
<p>智人末日<br>本书一开始，提到我们是从物理学走向化学、走向生物学，然后走向历史学。而无论是物理作用、化学反应，或是生物的自然选择，都对智人和其他一切生物一视同仁、殊无二致。虽然说在自然选择这一块，智人的发挥空间似乎远大于其他生物，但毕竟仍然有限。换句话说，不论智人付出了多少努力，有了多少成就，还是没办法打破生物因素的限制。</p>
<p>然而，就在21世纪曙光乍现之时，情况已经有所改变：智人开始超越了这些界限。自然选择的法则开始被打破，而由智慧设计（intelligent design）法则取而代之。</p>
<p>在将近40亿年的时间里，地球上每一种生物的演化都是依循着自然选择的法则。没有任何一种是由某个具有智慧的创造者所设计的。以长颈鹿为例，它的长颈是因为远古时代长颈鹿原型之间的竞争，而不是因为有某个具有超级智慧的生物所操控。在长颈鹿原型之间，脖子较长的就能够得到更多食物，相较于脖子短的，也就产下较多后代。没有人（肯定也没有长颈鹿）曾经说过：“如果有比较长的脖子，就能让长颈鹿吃到树顶上更多叶子。所以我们就让脖子变长吧！”达尔文理论美妙的地方，就是并不需要有某位智慧过人的设计者来解释为什么长颈鹿会有长脖子。</p>
<p>数十亿年来，因为我们根本没有足以设计生物的智能水平，所以智能设计甚至从来都不是选项之一。一直到相对不久之前，微生物都是地球上唯一的生物，而且能够完成某些神奇的任务。属于某个物种的微生物，可以从完全不同的物种中取得基因码、加入自己的细胞中，从而取得新的能力，例如对抗生素产生抗药性。然而，至少就我们所知，微生物并没有意识，它们没有生活目标，也不会未雨绸缪、为将来做准备。</p>
<p>演化到某个阶段之后，像是长颈鹿、海豚、黑猩猩和尼安德特人都已经有了意识，也有了为将来做准备的能力。然而，就算尼安德特人曾经有过这个梦想，希望鸡可以长得肥一些，动得慢一点，好让他饿的时候抓起来方便，他也无法把梦想化为现实。他还是只能乖乖去打猎，猎捕那些经过物竞天择发展成现在这个样子的鸟类。</p>
<p>大约1万年前，因为出现了农业革命，让古老的系统首次有了突破。那些还是希望鸡能够又肥又慢的智人，发现如果找出长得最肥的母鸡，再把它与动得最慢的公鸡交配，生出来的后代就会又肥又慢。这些生下来的后代再继续互相交配，后代的鸡就都具有又肥又慢的特点。这是一种原本不存在于自然界的鸡，之所以经过这样的智慧设计而出现，是因为人而不是神。</p>
<p>不过，与所谓全能的神相比，智人的设计技术还差得远了。虽然智人可以通过选择育种（selective breeding）来走快捷方式，加速自然选择的进程，但如果想要加入的特性并不存在于野生鸡的基因库里，就仍然无能为力。在某种程度上，智人与鸡之间的关系，就和一般常见而自然的共生关系十分相似。智人等于是对鸡施予了特定的选择压力，让又肥又慢的鸡特别能够繁衍下来；就像是蜜蜂采蜜授粉的时候也是对植物施予了选择压力，让花朵色彩鲜艳的品种更能生生不息。</p>
<p>时至今日，这个40亿岁的自然选择系统却面临了一项完全不同的挑战。在全球各地的实验室里，科学家正在改造各种生物。他们打破自然选择的法则而丝毫未受惩罚，就连生物最基本的原始特征也完全不看在眼里。巴西生物艺术家爱德华多·卡茨（Eduardo Kac）就在2000年推出了一项新艺术作品：一只发着荧光绿的兔子。卡茨找上法国的一间实验室，付费请求依他的要求改造出一只会发光的兔子。法国科学家于是拿了一个普通的兔子胚胎，再植入由绿色荧光水母取得的DNA。当当当当！绿色荧光兔隆重登场。卡茨将这只兔子命名为阿巴（Alba）。</p>
<p>如果只有自然选择，阿巴根本不可能存在。她就是智能设计下的产物。同时，她也可说是一个预兆。阿巴的出现其实代表着一股潜力，如果这股潜力完全发挥（而且人类没有因此灭亡），科学革命很可能就远远不只是历史学上的一场革命而已。这很可能会成为地球出现以来最重要的生物学革命。经过40亿年的自然选择之后，阿巴可说是站在新时代曙光乍现的时间点，生命即将改由智能设计来操控。如果这种可能性终于成真，事后看来，到这之前为止的人类历史就能够有新的诠释：这就是一个实验和实习的过程，最后是要彻底改变生命的游戏规则。像这样的过程，我们不能只看人类的几千年，而要看整体的几十亿年。</p>
<p>全世界的生物学家现在都正在与智能设计这场风潮相对抗。智慧设计反对所有我们在学校里学到的达尔文演化论，而且认为既然生物如此复杂各异，想必是有某个创造者，从一开始就想好了所有的生物细节。生物学家说对了过去，但讽刺的是，讲到未来，有可能智能设计才是对的。</p>
<p>本书写到这里的时候，有三种方式可能让智慧设计取代自然选择：生物工程（biological engineering）、仿生工程（cyborg engineering）与无机生命（inorganic life）工程。</p>
<p>老鼠和人</p>
<p>所谓生物工程，指的是人类刻意在生物层次进行的干预行为（例如植入基因），目的在于改变生物体的外形、能力、需求或欲望，以实现某些预设的文化概念（例如爱德华多·卡茨心中的那种艺术）。</p>
<p>到目前为止，生物工程本身并不算是什么新的概念。人们数千年来一直使用生物工程来重新塑造自己和其他生物。一个简单的例子是阉割。在英文里，未阉割的公牛称为“bull”，阉割后的称为“ox”，这种将牛阉割的做法已经有大约一万年之久，阉割后的牛比较不具侵略性，也就比较容易训练拉犁。此外，也有一些年轻男性被阉割，好培养出可唱出女高音优美声调的假声男高音，或是能够协助宫廷事务的太监。</p>
<p>然而，人类最近对生物体运作的研究有长足进展，已经达到细胞、细胞核的水平，也出现了许多过去难以想象的可能性。举例来说，我们现在不只能够将男性阉割，甚至还能通过外科手术和注射荷尔蒙，完全改变他们的性别。这还只是开始。</p>
<p>在1996年，下面这张照片出现在报纸和电视上，各方反应不一，有人惊喜，有人恶心，有人完全吓傻了。</p>
<p>这并不是改图修图的假照片，而是千真万确的一只真的老鼠，背上被科学家植入牛软骨细胞。因为科学家能够控制新组织生长，就能让它长出人类耳朵的形状。也许在不久之后，科学家就能用这种方式制造出能植入人体的人工耳。115</p>
<p>图27 在这只老鼠背上，科学家用牛软骨细胞让它长出一只“耳朵”。这可以说是以一种怪诞的方式响应着施泰德洞穴里的狮人雕像。在3万年前，人类就已经有了想要结合不同物种的幻想，而今天我们真的有能力制造出这种嵌合体了（chimera，指由两个以上不同遗传结构的组织组成的个体或器官）。</p>
<p>此外，基因工程更是能做到一些几近奇迹的事，也因此引发了一系列的伦理、政治和意识形态议题。而且，并不是只有虔诚的一神教信徒指责人类不该抢了上帝的角色。对于科学家这种干预自然事务的做法，有许多坚定的无神论者也同样大感震惊。动物权利保护团体谴责这种基因工程实验，认为这不但造成实验动物的痛苦，而且改造时也完全无视家禽家畜的需求和欲望。人权保护团体也担心，基因工程可能被用来创造某种超人类，结果就是其他人都成了他的奴隶。另外也早有人预期将会出现生物独裁统治的末日场景，用复制的方式制造出不懂得恐惧为何物的士兵，不知道反抗是什么概念的工人。许多人都认为，现在人类太快看到太多的机会，手中已经握有基因修改能力，却还无法做出明智、有远见的决定。</p>
<p>结果就是，我们现在只发挥了基因工程一小部分的能力。现在改造的大多数生物，都是那些最没有政治利害关系的物种，像是植物、真菌、细菌、昆虫等等。举例来说，大肠杆菌是一种共生在人体肠道里的细菌，只有在它跑出了肠道、造成致命感染的时候，大家才会在报纸上看到它们造成的消息。而现在大肠杆菌就经过基因工程改造，用来生产生质燃料。116大肠杆菌和其他几种真菌也经过改造来生产胰岛素，期望能降低糖尿病的治疗费用。117现在我们也取出某种北极鱼类的基因，植入马铃薯的基因，好让马铃薯更耐寒。118</p>
<p>少数哺乳动物也正在接受基因工程改造。奶农业一直得要面对乳腺炎这项大敌，每年奶牛因此无法产奶的损失高达数十亿美元。科学家目前正在尝试将奶牛基因改造，让牛奶里含有溶葡萄球菌酶（lysostaphin），能够攻击造成乳腺炎的细菌。119另外，最近健康意识抬头，消费者不希望从火腿和培根吃到太多不健康脂肪，养猪业最近正在期待一种植入了蠕虫基因的猪，这种基因能够让猪的脂肪酸从不健康的omega-6脂肪酸转为健康的omega-3脂肪酸。120</p>
<p>真正走到下一代基因工程之后，这种让猪有健康脂肪的改造就只能算是小菜一碟罢了。现在，遗传基因学家已经成功将蠕虫的平均寿命延长6倍，也已经创造出某种天才老鼠，在记忆和学习能力上大有长进。121田鼠是一种小型、粗壮的啮齿类动物，很像老鼠，而且大多数品种的习性都是杂交。然而，却有一种品种有忠贞的一夫一妻关系。遗传基因学家声称已经找出了这种形成田鼠一夫一妻制的基因。只要加上这个基因，就能让田鼠从爱偷吃变成爱顾家，我们的基因改造能力就不仅能改变啮齿动物的个体能力，甚至有可能改变它们的社会结构。（而且，是不是人类也能如法炮制？）122</p>
<p>让尼安德特人再现</p>
<p>然而，遗传基因学家想改造的还不只是现有的生物，甚至也想让已绝种的动物再现身影。而且对象还不只是像电影《侏罗纪公园》演的恐龙。从西伯利亚冰层里挖掘出长毛象遗体之后，由俄罗斯、日本和韩国组成的科学家团队最近已经完成长毛象的基因定序。他们正在计划要拿一个现代大象的受精卵细胞，将大象的DNA换成长毛象DNA，再重新植回大象的子宫。只要再经过大约22个月，长毛象就能在绝迹近5000年后再次重现于地球。</p>
<p>123</p>
<p>然而，又为什么要画地自限，只做长毛象呢？哈佛大学的乔治·丘奇（George Church）教授最近指出，完成尼安德特人基因组计划（Neanderthal Genome Project）之后，我们就将能在智人的卵子里重建尼安德特人的DNA，在3万年后再次诞生一个尼安德特人的小孩。丘奇表示，只要给他少少的3亿美元预算，这就可能成真。而且已经有几位女性自愿担任代理孕母。124</p>
<p>我们为什么需要让尼安德特人再现？有些人认为，如果我们能研究活生生的尼安德特人，就能解决某些关于智人起源和独特性最难解的问题。只要能比较尼安德特人和智人的大脑，找出两者不同之处，或许我们就能知道有什么生物上的变化让我们产生了现在的意识。而且，有人认为这也有伦理道德上的理由：如果是智人造成了尼安德特人灭绝，岂不该负责把他们救回来？此外，有尼安德特人这种人种也可能很好用。许多产业可能很高兴，因为两个智人才能做的粗活，尼安德特人一个就能搞定。</p>
<p>然而，又为什么要画地自限，只做尼安德特人呢？为什么不回到最初上帝的那块画板，直接设计出更完美的智人？智人的种种能力、需求和欲望都根源于智人的基因，而且智人的基因组其实并不比田鼠或老鼠复杂太多。（老鼠的基因组有大约25亿个核碱基，智人约有29亿个，也就是说智人只比老鼠复杂了14%。）125在基因工程的中程发展（或许就是几十年内），基因工程和其他各种生物工程可能有办法带来影响深远的改变，不仅能够改变人类的生理、免疫系统和寿命长短，甚至能改变人类的智力和情感能力。如果基因工程可以创造出天才老鼠，为什么不创造天才的人呢？如果基因工程可以让两只田鼠长相厮守，何不让人类也是天生彼此忠贞不贰？</p>
<p>认知革命后，智人从几乎微不足道的猿类变成了世界的主人。然而智人的生理并没有什么改变，甚至连大脑的容量和外形也和过去几乎相同。可见这只是大脑内部几个小小的调整罢了。也或许，只要再有某个小小的调整，就会引发第二次的认知革命，建立一种全新的意识，让智人再次改头换面、彻底不同。</p>
<p>虽然我们目前确实还无法创造出超人类，但看来前方的路上也没有什么绝对无法克服的科技障碍。现在真正让人类研究放慢脚步的原因，在于伦理和政治上的争议。然而，不管现在的伦理论点如何有说服力，未来的发展似乎势不可当；特别是这有可能让我们无限延长人类生命、解决各种疑难杂症，以及强化人类认知和情感上的能力。</p>
<p>举例来说，如果我们本来只是想治疗阿兹海默症，但发现药物的副作用是大幅增进一般健康民众的记忆力，又该如何？这种研究挡得住吗？而等到药物开发生产之后，会有哪个执法机关能够规定仅得用于治疗阿兹海默症，一般人不得用以取得超级记忆力？</p>
<p>我们现在还不知道生物工程是不是真能让尼安德特人再现，但这很可能将为智人拉下终幕。操纵基因并不一定会让智人大批死亡而绝种，但很可能会让智人这个物种大幅改变，到最后就成了另一个物种，而不宜再使用智人这个名称。</p>
<p>仿生的生命</p>
<p>现在再来谈第二种可能改变生命法则的新科技：仿生工程。仿生工程结合有机和无机组织，创造出“生化人”（cyborg），例如为人类装上生化手就是一例。从某种意义上，现代所有人几乎多多少少都是生化人，用各种其他设备来辅助我们的感官和能力，像是眼镜、心脏起搏器、辅具，甚至还包括计算机和手机（这样一来就能减轻一些大脑要储存及处理数据的负担）。但我们正要迈入一个要成为真正生化人的门槛，真正让一些无机组织与身体结合而不再分开，而会改变我们的能力、欲望、个性以及身份认同。</p>
<p>美国国防先进研究计划署（Defense Advanced Research Projects Agency）是美国官方的军事研究机构，正在研究仿生昆虫。这里的概念是在苍蝇或蟑螂身上植入电子芯片，让人或机器从远程遥控昆虫的动作，并取得昆虫接收到的外界信息。这样的间谍苍蝇就能潜入敌人总部，停在墙上窃听最机密的谈话，只要别被蜘蛛抓走，就能让我们完全掌握敌人的计划。126在2006年，美国海军水下作战中心（Naval Undersea Warfare Center）也曾提出计划研发仿生鲨鱼，表示“本中心正研发一种鱼用标签，希望通过神经植入物控制宿主动物的行为”。鲨鱼天生就能够侦测到磁场，效果比目前所有人类发明的侦测器都灵敏，因此研发人员希望利用它们的这种能力，侦测到潜艇和水雷形成的电磁场。127</p>
<p>智人也正在变成生化人。最新一代的助听器有时也会称为“生化耳”，外侧有一个麦克风，可以吸收外界声音，经过过滤、识别出人声，转化成电波信号，直接传递到中央听觉神经，再传送到大脑中。128</p>
<p>德国的“Retina Implant”（视网膜植入）公司取得政府资金，正在开发一种人工视网膜，可能让盲人重获部分视力。它的做法是将一个微芯片植入患者眼中，光感应器吸收进入眼中的光线，将光能转为电能，刺激视网膜上未受损的神经细胞。细胞发出神经冲动刺激大脑，就会转译为视觉影像。目前，这项科技已经让患者能够进行空间定位、读识字母，甚至也能够辨识人脸。129</p>
<p>在2001年，美国一位水电工杰西·沙利文因为事故而让双臂从肩膀以下截肢。但今天在芝加哥复健研究中心（Rehabilitation Institute of Chicago）协助下，他能有一双生化手臂。这双新手臂的特殊之处，在于只要用想的就能操纵。杰西的大脑发出神经信号，再由微电脑转译成电子信号命令，就能让手臂移动。所以，杰西想要举起右手的时候，是有意识地进行我们一般人下意识做的动作。虽然这双电子手臂能做的事远远少于正常的人类手臂，但已经让杰西能够处理一些日常生活的简单工作。克劳迪亚·米切尔是一位美国大兵，她最近在一次机车事故中失去了一只手臂，现在也装上了一只类似的生化手。科学家相信，生化手很快不只能够随心所欲运动，还能再发送信号传回大脑，也就是甚至能让截肢病患者恢复触觉！</p>
<p>130</p>
<p>图28 杰西·沙利文和克劳迪亚·米切尔握手。他们的生化手臂只要用意识就能操纵，十分令人惊奇。</p>
<p>目前的生化手臂还远远不及真正的有机手臂，但它们的发展潜力无穷。举例来说，我们可以让生化手臂有着远大于人类手臂的力量，就算拳王在生化手臂前也会像是弱鸡。此外，生化手臂可以每隔几年就更新换代，也能够脱离身体、远距离操作。</p>
<p>北卡罗来纳州杜克大学的科学家最近刚证明了这一点，他们在几只恒河猴的大脑里面植入电极，再让电极收集脑中的信号，传送到外部设备。接着，猴子被训练单纯用意识控制外部的生化手脚。有一只叫极光（Aurora）的母猴，不仅学会了如何用意识控制外部的生化手臂，还能同时移动自己的两只手臂。现在它就像是印度教的女神一样，有三条手臂，而且生化手臂还能位于另一个房间甚至另一个城市里。所以，它现在可以坐在北卡罗来纳州的实验室里，一手抓抓背，一手抓抓头，还能有一手在纽约偷根香蕉（只可惜现在还没办法远距离吃香蕉）。另一只叫伊多雅（Idoya）的母猴，则是曾在2008年坐在北卡罗来纳州实验室的椅子上，再用意识控制一双在日本京都的生化腿，让它从此世界知名。那双腿足足有伊多雅体重的20倍重。</p>
<p>131</p>
<p>闭锁症候群（locked-in syndrome）是一种神经疾病，病患会丧失几乎所有控制身体移动的能力，但认知能力却完全不受影响。罹患这种疾病的病人，最后只能用眼球微小的运动与外界沟通。然而，现在已经有几位病人的脑中植入了收集大脑信号的电极。目前科学家正在努力解译这些信号，希望不只能将信号转为动作，更能转为语言。如果实验成功，闭锁症候群的患者就终于能够直接与外界说话，而且我们甚至可以用这项科技来阅读他人心中的想法。132</p>
<p>然而，在所有目前进行的研究当中，最革命性的就是要建构一个直接的大脑–计算机双向接口，让计算机能够读取人脑的电子信号，并且同时输回人脑能够了解的电子信号。如果这种设备成功，再直接将大脑连上网络，或是让几个大脑彼此相连、形成“脑际网络”，情况会如何？如果大脑能够直接存取集体共同的记忆库，对于人类的记忆、意识和身份认同又会有什么影响？举例来说，在这种情况下，生化人就能够取得他人的记忆。就算从来没听说过另一个人，没看过他的自传，也不是靠着想象，但却能够直接记得他的记忆，就像是自己的记忆一样。而且，这里的他人可能是男，也可能是女。像这样的集体记忆概念，对于自我和性别认同又会有什么影响？在这种时候，我们要怎么“认识你自己”？又要怎么知道，哪些才是真正属于你自己的梦想，而不是集体记忆中的愿望？</p>
<p>这样的生化人就不再属于人类，甚至也不再属于有机生物，而是完全不同的全新物种。这一切是根本上的改变，其中的哲学、心理或政治影响可能都还不在我们的掌握之中。</p>
<p>另一种生命</p>
<p>第三种改变生命法则的方式，则是创造出完全无机的生命。最明显的例子，就是能够自行独立演化的计算机程序和计算机病毒。</p>
<p>现在资讯工程世界正当红的一个领域，就是基因程序设计（genetic programming）。这种程序设计模仿基因遗传演化。许多程序设计师都有一个梦想，希望能创造出一个能够独立于创造者、完全自行学习演化的程序。在这种情况下，程序设计师只是一个原动力（primum mobile），程序一经发动之后，就会开始自由演化，无论创造者或其他任何人都不再能掌握它的发展方向。</p>
<p>我们现在已经有了这种程序的原型，也就是一般说的计算机病毒。计算机病毒在网络上流传的时候，会不断自我复制数百万到数亿次，一面要躲避追杀的防毒软件，一面又要与其他病毒争夺网络里的空间。而总有某一次，在病毒自我复制的时候出现了错误，这就成了一种计算机化的突变。这种突变有可能是因为病毒设计师，原本就让病毒偶尔会发生随机复制错误；也有可能就是因为某种随机发生的误差。假设在偶然下，突变后的病毒比较能躲过防毒软件的侦测，而且仍然保留着入侵其他计算机的能力，就会在网络里迅速传播。于是，这种突变种就能生存下来，而且开始繁衍。随着时间过去，网络空间就会充满这些并非由人所设计出来、经过无机演化而成的新型病毒。</p>
<p>这些病毒算是生命吗？这可能要取决于每个人对“生命”的定义，但它们确实是由新的演化程序而生，完全独立于有机演化的法则和局限之外。</p>
<p>我们再想象一下另一种可能性。假设你可以将自己的大脑整个儿备份到硬盘上，再用笔记本电脑来读取运作。这样一来，笔记本电脑是不是就能够像智人一样地思考和感受了呢？如果是的话，那算是你吗？还是算别人呢？如果计算机程序设计师可以建构起一个全新的数字个体心灵，完全由计算机程序码组成，但拥有自我的知觉、意识和记忆，这又算是什么？如果你让这个程序在计算机上运作，这算是一个人吗？如果你删了这个程序，算是谋杀吗？</p>
<p>我们可能很快就会得到这些问题的答案了。2005年成立了一项“蓝脑计划”（Blue Brain Project），希望能用计算机完整重建一个人脑，用电子回路来仿真大脑中的神经网络。计划主持人表示，如果能有足够的经费，大约只要10到20年，就能在计算机里建构出人工大脑，而且语言及举止就像是正常人一样。到现在，并不是所有学者都认为人脑的运作方式类似于计算机（因此也就很难用现今的计算机来仿真），但我们并不能因此就排除这种可能性。在2013年，蓝脑计划已经从欧盟取得了10亿欧元资金的挹注。133</p>
<p>奇异点</p>
<p>目前，所有这些新契机只有一小部分已经成真。然而，在2014年这个世界上，文化已经挣脱了生物学的束缚。我们现在不只能改造周遭的世界，更能改造自己体内和内心的世界，而且发展的速度奇快无比。有越来越多领域的行事方式都已经被迫大幅改变，不再能照旧便宜行事。律师需要重新思考关于隐私和身份认同的问题；各国政府需要重新思考医疗保健和平等的问题；体育协会和教育机构需要对公平竞争和成就重新定义；退休基金和劳动力市场也得调整，未来的60岁可能只像是现在的30岁。此外，它们全部都得面对生物工程、生化人及无机生命所带来的难题。</p>
<p>想当初，第一次进行人类基因组定序的时候花费了15年、30亿美元，但现在只要花上几周、几百美元，就能完成一个人的基因定序。134根据DNA为人度身定做的个人化医学时代已然展开。你的家庭医生很快就能告诉你，你得到肝癌的风险比较高，但倒是不用太烦恼心脏病的概率。医生还能告诉你，某种对92%的人有效的药物就是对你没用，而且另外一种通常会致命的药物反而正是你的救命仙丹。一个几近完美的医疗世界，已经近在眼前。</p>
<p>然而，医疗知识的改进也会带来新的伦理难题。光是现在，伦理学家和法律专家就已经因为DNA所涉及的隐私问题而感到焦头烂额。保险公司是否有权要求我们提供DNA定序数据？如果要投保人的基因显示遗传性的鲁莽倾向，保险公司又是否有权要求提高保费？以后公司要聘雇新员工的时候，会不会要求的不是履历而是DNA数据？雇主有权歧视DNA看来较差的求职者吗？而像这样的“基因歧视”，我们可以控告吗？生化公司能不能创造出一种新的生物或是新的器官，再申请其DNA序列的专利？我们都认同某个人可以拥有某只鸡，但我们可以完全拥有某个物种吗？</p>
<p>然而，以上种种都还只是小巫，真正的大巫是吉尔伽美什计划以及未来创造出超人类的可能，将会为人类的伦理、社会和政治秩序带来巨幅改变。不论是《世界人权宣言》、全球各地的政府医疗方案、全民健康保险方案甚至是宪法，都认为人道社会应该让所有成员拥有公平的医疗待遇，并且维持相对良好的健康状态。如果医疗只是要预防疾病、治疗疾病，这一切看来再好不过。但如果医药的目的变成要提高人的能力，情况会有何不同？是让所有人类都能提升能力吗？还是只有少数精英能够享有超人的能力？</p>
<p>我们这个现代晚期的世界，是有史以来第一次认为所有人类应享有基本上的平等，然而我们可能正准备要打造出一个最不平等的社会。纵观历史，上层阶级总是说自己比下层阶级更聪明、更强壮，整体而言更为优秀。他们过去通常只是在自欺欺人，贫苦农家的孩子智力很可能和王子也相去不远。然而，在新一代医药推波助澜下，上层阶级的自命不凡可能即将成为一种客观事实。</p>
<p>这不是科幻小说的情节。在大多数的科幻小说里，讲的是像我们一样的智人，拥有光速宇宙飞船和激光枪之类的先进科技。这些小说里的伦理和政治难题多半和我们的世界如出一辙，只不过是把我们的情感和社会问题搬到未来的场景重新上演。然而，未来科技的真正潜力并不在于改变什么车辆或武器，而在于改变智人本身，包括我们的情感、我们的欲望。宇宙飞船其实只是小事，真正会惊天动地的，可能是能够永远年轻的生化人，既不繁衍后代，也没有性欲，能够直接和其他生物共享记忆，而且专注力和记性是现代人类的一千倍以上，不会愤怒、不会悲伤，而他们的情感和欲望完全是我们所无法想象的。</p>
<p>科幻小说很少会把未来描述成这个样子，因为基本上这种场景就是超乎我们的想象，就算描述出来也难以理解。想把某种超级生化人的生活拍成电影给现代人看，就像是要为尼安德特人演一场莎士比亚剧目。事实上，未来世界主人翁与我们之间的差异，可能会远大于我们和尼安德特人之间的差异。我们与尼安德特人至少都还是人，但未来的主人翁很可能会更接近神的概念。</p>
<p>物理学家认为宇宙大爆炸（Big Bang）就是一个奇异点（singularity）。在奇异点之前，所有我们认知的自然法则都还不存在，就连时间也不存在。所以要说宇宙大爆炸“之前”如何如何，对我们来说是没有意义、无法理解的。而我们可能正在接近下一个奇异点，所有我们现在这个世界的意义（不论是你我、男女、爱恨）都即将变得再也无关紧要。而在那个点之后的任何事，都还超出我们现在所能想象的。</p>
<p>科学怪人预言</p>
<p>在1818年，玛丽·雪莱（Mary Shelley）写出了《科学怪人》（Frankenstein），讲的是一个科学家创造出了人造生物，但失去控制、造成一片混乱。在过去的两个世纪间，有无数个版本不断讲述着同样的故事。这已经成为新科学神话的一大主流概念。乍看之下，科学怪人的故事似乎是在告诉我们，如果竟敢试图僭越神的角色、试图操纵生命，就会受到严厉的惩罚。然而，这个故事其实还有更深的含义。</p>
<p>科学怪人的故事直接向智人提出挑战，告诉我们智人终结的一天已经不远。根据这个故事，除非发生全球核灾或生态浩劫，否则根据现在科技发展的步伐，很快智人就会被取代。新一代的主宰不仅体形、体态不同，连认知和情感世界也有极大差异。对大多数智人来说，这个故事都实在太令人不安。我们比较想听到的故事，是未来仍然都是由像我们一样的人来主宰，只是多了高速宇宙飞船，让我们能往来于各个星球之间罢了。但是，如果说和我们拥有相同情感和认同的生物未来将会灭绝，由能力远高于我们的陌生物种取而代之，这个版本就比较毛骨悚然，令人难以接受。</p>
<p>对我们来说，把科学怪人描述成一个怪物，而我们不得不为了拯救人类而将之摧毁，算是个比较能叫人放心的结局。我们喜欢这种版本，是因为这个版本暗示着人类仍然是万物之灵，再也不会有比人类更优秀的物种。此外，想要“改进”人类的尝试也必然失败，因为就算能够增强身体的能力，重点还是在那崇高而不得碰触的人类心灵。</p>
<p>但人类很难接受的一个事实就是，科学家不仅能够改造身体，也能改造心灵，未来创造出来的科学怪人可能就是硬生生比人类优秀不知凡几，他们看着我们，就像是我们看尼安德特人一样带着一种轻蔑和不屑。</p>
<hr>
<p>我们还不能确定今天的科学怪人是不是会正如这个预言一般。没有人能够确实知道未来。本书最后这几页所做的预测，也不太可能样样都说得准。历史一再让我们看到，许多以为必然会发生的事，常常因为不可预见的阻碍而无法成真，而某些难以想象的情节，最后却成为事实。20世纪40年代进入核子时代的时候，很多人预测公元2000年会成为核子世界。第一颗人造卫星和阿波罗11号发射，也让全球想象力大作，大家都开始认为到了20世纪结束的时候，人类就可以移民到火星和冥王星。但这些预测全都没有成真。而另一方面，当时谁都没想过互联网能发展成现在这个样子。</p>
<p>所以，关于未来的数字物种，可以说现在谁都还说不准。上面提的所有理想或说是梦魇，其实只是为了刺激大家的想象。我们真正应该认真以对的，是在于下一段历史改变不仅是关于科技和组织的改变，更是人类意识与身份认同的根本改变。这些改变触及的会是人类的本质，就连“人”的定义都有可能从此不同。我们还有多久时间？没有人真正知道。如同前面所提，有人认为到了2050年，就有少数人能够达到长生的状态。一些比较不那么激进的预测，则说时间点是在下个世纪或是下一个千禧年。然而，如果从智人长达7万年的历史来看，几千年又算什么呢？</p>
<p>如果智人的历史确实即将谢幕，我们这些最后一代的智人，或许该花点时间回答最后一个问题：我们究竟想要变成什么？有人把它称之为“人类强化”（Human Enhancement）的问题，所有目前政治家、哲学家、学者和一般大众所争论的其他问题，在人类强化问题前都算不上什么。毕竟，等到智人消失之后，今天所有的宗教、意识形态、民族和阶级很可能也会随之烟消云散。而如果我们的接班人与我们有完全不同的意识层次（或者是有某种已经超乎我们想象的意识运作方式），再谈基督教或伊斯兰教、共产主义或是资本主义，甚至性别的男女，对他们来说可能都已不具意义。</p>
<p>然而，我们还是有必要谈谈这些关于历史的重要问题，因为就算是这些新时代的神，第一代还是由我们人类所设计，受到我们的文化概念影响。创造他们时所依循的理念，究竟会是资本主义、伊斯兰教，还是女权主义？根据不同的答案，就可能让他们走向完全不同的方向。</p>
<p>大多数人宁愿躲避而不去想了。就连生命伦理学这个领域，也宁可去回答另一个问题：“有什么是必须禁止的？”我们可以用活人做基因实验吗？用流产的胚胎？用干细胞？克隆羊符合伦理道德吗？克隆黑猩猩？克隆人类呢？虽然这些问题确实都很重要，但如果还认为我们能够踩刹车、阻止让人类升级成另一种不同的物种，可能就太天真了。原因就在于，虽然这些计划各有不同，但追根究底还是回到了对长生不死的追求：吉尔伽美什计划。不管是问科学家为什么要研究基因组，还是为什么要把大脑连接到计算机，或是为什么要在计算机里创建一个心灵，十有八九，都会得到相同的标准答案：这么做是为了治疗疾病、挽救人的性命。想一想，为了治疗精神疾病，就说要在计算机里创建一个心灵，难道不会觉得太小题大做？但就是因为这种标准解答太具正当性，所以没有人能够反驳。正因如此，吉尔伽美什计划正是现在科学的旗舰，能够让科学所做的一切都有了正当的理由。创造科学怪人的弗兰肯斯坦博士，现在就坐在吉尔伽美什的肩膀上。阻挡不了吉尔伽美什，我们也就阻挡不了弗兰肯斯坦博士。</p>
<p>现在我们唯一能做的，就是影响他们走的方向。既然我们可能很快也能改造我们的欲望，或许真正该问的问题不是“我们究竟想要变成什么”，而是“我们究竟希望自己想要什么”，如果还对这个问题视若等闲，可能就是真的还没想通。<br>后记</p>
<p>变成神的这种动物</p>
<p>在7万年前，智人还不过是一种微不足道的动物，在非洲的角落自顾自地生活。但就在接下来的几千年间，智人就成了整个地球的主人、生态系统的梦魇。时至今日，智人似乎只要再跨一步就能进入神的境界，不仅有望获得永恒的青春，更拥有创造和毁灭一切的神力。</p>
<p>但遗憾的是，智人在地球上的所作所为，实在没有太多令人自豪。虽然我们主宰了环境、增加了粮食产量、盖起城市、建立帝国，还创造了无远弗届的贸易网络，但全球的痛苦减少了吗？一次又一次，虽然整体人类的能力大幅提升，但却不一定能改善个别人类的福祉，而且常常还让其他动物深受其害。</p>
<p>在过去的几十年间，至少就人类的生存条件而言有了确实的进步，饥荒、瘟疫和战争都已减少。然而，其他动物的生存条件却是以前所未有的速度急遽恶化，而且就算是人类相关的改进，也还需要再长时间观察才能判断是否利大于弊，是否能够延续。</p>
<p>此外，虽然现在人类已经拥有许多令人赞叹的能力，但我们仍然对目标感到茫然，而且似乎也仍然总是感到不满。我们的交通工具已经从独木舟变成帆船、变成汽船、变成飞机，再变成航天飞机，但我们还是不知道自己该前往的目的地。我们拥有的力量比以往任何时候都更强大，但几乎不知道该怎么使用这些力量。更糟糕的是，人类似乎也比以往任何时候更不负责。我们让自己变成了神，而唯一剩下的只有物理法则，我们也不用对任何人负责。正因如此，我们对周遭的动物和生态系统掀起一场灾难，只为了寻求自己的舒适和娱乐，但从来无法得到真正的满足。</p>
<p>拥有神的能力，但是不负责任、贪得无厌，而且连想要什么都不知道。天下危险，恐怕莫此为甚。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第十九章</p>
<p>从此过着幸福快乐的日子<br>在过去的500年间，我们见证了一连串令人惊叹的革命。地球在生态和历史上都已经整合成一个单一的领域。经济呈现指数增长，今日人类所享有的财富在过去只有可能出现在童话里。而科学和工业革命也带给我们超人类的力量，以及几乎可以说无]]>
    </summary>
    
  </entry>
  
</feed>
